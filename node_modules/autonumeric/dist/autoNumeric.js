(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["AutoNumeric"] = factory();
	else
		root["AutoNumeric"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(8);
	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nutoNumeric.js\nnversion      4.0.0-beta.16\ndate         2017-04-19 UTC 09:00\nnauthor       Bob Knothe\ncontributors Alexandre Bonneau, Sokolov Yura and others, cf. AUTHORS.md\ncopyright    2009 Robert J. Knothe http://www.decorplanit.com/plugin/\nsince        2009-08-09\nnsummary      autoNumeric is a standalone Javascript library\nthat provides live *as-you-type* formatting for\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *               international numbers and currencies.\nnote : Some functions are borrowed from big.js\nlink         https://github.com/MikeMcl/big.js/\nnlease report any bugs to https://github.com/autoNumeric/autoNumeric\nnlicense      Released under the MIT License\nlink         http://www.opensource.org/licenses/mit-license.php\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Permission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sub license, and/or sell\ncopies of the Software, and to permit persons to whom the\noftware is furnished to do so, subject to the following\nconditions:\nnhe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nnnnn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nnnn\n/* global module */\n\n//TODO Prevent having to enter relative path in the js files (ie. using `./AutoNumericHelper` instead of just `AutoNumericHelper`) (cf. http://moduscreate.com/es6-es2015-import-no-relative-path-webpack/)\n\n\nvar _AutoNumericHelper = __webpack_require__(3);\n\nvar _AutoNumericHelper2 = _interopRequireDefault(_AutoNumericHelper);\n\nvar _AutoNumericEnum = __webpack_require__(2);\n\nvar _AutoNumericEnum2 = _interopRequireDefault(_AutoNumericEnum);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Class declaration for the AutoNumeric object.\n *\n * An AutoNumeric element is an object wrapper that keeps a reference to the DOM element it manages (usually an <input> one), and provides autoNumeric-specific variables and functions.\n */\nvar AutoNumeric = function () {\n    //TODO Use the better notation `export default class` when webpack and babel will allow it (cf. https://github.com/webpack/webpack/issues/706)\n    /**\n     * Initialize the AutoNumeric object onto the given DOM element, and attach the settings and related event listeners to it.\n     * The options passed as a parameter is an object that contains the settings (ie. {digitGroupSeparator: \".\", decimalCharacter: \",\", currencySymbol: '€ '})\n     *\n     * @example\n     * anElement = new AutoNumeric(domElement); // With the default options\n     * anElement = new AutoNumeric(domElement, { options }); // With one option object\n     * anElement = new AutoNumeric(domElement, null, { options }); // With one option object, and a failed initial value\n     * anElement = new AutoNumeric(domElement).french(); // With one pre-defined language object\n     * anElement = new AutoNumeric(domElement).french({ options });// With one pre-defined language object and additional options that will override the defaults\n     *\n     * // ...or init and set the value in one call :\n     * anElement = new AutoNumeric(domElement, 12345.789); // With the default options, and an initial value\n     * anElement = new AutoNumeric(domElement, 12345.789, { options });\n     * anElement = new AutoNumeric(domElement, '12345.789', { options });\n     * anElement = new AutoNumeric(domElement, 12345.789).french({ options });\n     * anElement = new AutoNumeric(domElement, 12345.789, { options }).french({ options }); // Not really helpful, but possible\n     *\n     * // The AutoNumeric constructor class can also accept a string as a css selector. Under the hood this use `QuerySelector` and limit itself to only the first element it finds.\n     * anElement = new AutoNumeric('.myCssClass > input');\n     * anElement = new AutoNumeric('.myCssClass > input', { options });\n     * anElement = new AutoNumeric('.myCssClass > input', 12345.789);\n     * anElement = new AutoNumeric('.myCssClass > input', 12345.789, { options });\n     * anElement = new AutoNumeric('.myCssClass > input', null, { options }); // With a failed initial value\n     * anElement = new AutoNumeric('.myCssClass > input', 12345.789).french({ options });\n     *\n     * @param {object|Array|number|string} arg1\n     * @param {object|Array|number|string|null} arg2\n     * @param {object|Array|number|string|null} arg3\n     * @throws\n     */\n    function AutoNumeric() {\n        var arg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        var _this = this;\n\n        var arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var arg3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        _classCallCheck(this, AutoNumeric);\n\n        // --------------------------------------------------------\n        // -------------- Initialization\n        // Initialize the arguments\n        var _AutoNumeric$_setArgu = AutoNumeric._setArgumentsValues(arg1, arg2, arg3),\n            domElement = _AutoNumeric$_setArgu.domElement,\n            initialValue = _AutoNumeric$_setArgu.initialValue,\n            userOptions = _AutoNumeric$_setArgu.userOptions;\n\n        // Initialize the element\n\n\n        this.domElement = domElement;\n\n        // Generate the settings\n        this._setSettings(userOptions, false);\n        //TODO If `styleRules` is not null, add by default a class 'autoNumeric' that adds transition to color, background-color, border-color properties\n        // Check if the DOM element is supported\n        this._checkElement();\n\n        // Store the additional attributes inside the AutoNumeric object\n        // Note: This variable is needed and not a duplicate of `initialValueOnKeydown` nor `valueOnFocus` since it serves a different purpose and has a different lifecycle\n        this.savedCancellableValue = null;\n\n        // Initialize the undo/redo variables\n        this.historyTable = []; // Keep track of *all* valid states of the element value\n        this.historyTableIndex = -1; // Pointer to the current undo/redo state. This will be set to '0' during initialization since it first adds itself.\n        this.onGoingRedo = false; // Variable that keeps track if a 'redo' is ongoing (in order to prevent an 'undo' to be launch when releasing the shift key before the ctrl key after a 'redo' shortcut)\n\n        // Set the initial value if it exists and if the `formatOnPageLoad` option will allow it\n        if (!this.runOnce && this.settings.formatOnPageLoad) {\n            // Format the element value if needed\n            this._formatDefaultValueOnPageLoad(initialValue);\n        }\n\n        this.runOnce = true;\n\n        // Add the events listeners only on input elements\n        if (this.isInputElement || this.isContentEditable) {\n            if (!this.settings.noEventListeners) {\n                //XXX Here we make sure the global list is created after creating the event listeners, to only create the event listeners on `document` once\n                this._createEventListeners();\n            }\n\n            this._setReadOnly();\n        }\n\n        // Save the initial values (html attribute + element.value) for the pristine test\n        this._saveInitialValues(initialValue);\n\n        // --------------------------------------------------------\n        // -------------- Tracking\n        // Keep track if the element is currently focused\n        this.isFocused = false;\n\n        if (this.settings.createLocalList) {\n            // Keep track of every AutoNumeric elements that this object initialized\n            this._createLocalList();\n        }\n\n        // Keep track of all AutoNumeric elements in the current web page\n        this.constructor._addToGlobalList(this);\n\n        // --------------------------------------------------------\n        // -------------- Methods\n        // Create the global functions\n        this.global = {\n            /**\n             * Set the same given element value for each elements in the local AutoNumeric element list, and format those elements immediately\n             *\n             * @param {number|string} newValue The value must be a number or a numeric string\n             * @param {object} options A settings object that will override the current settings. Note: the update is done only if the `newValue` is defined.\n             */\n            set: function set(newValue) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.set(newValue, options);\n                });\n            },\n\n            /**\n             * Set the value given value directly as the DOM element value, without formatting it beforehand.\n             * This sets the same unformatted value for each elements in the local AutoNumeric element list.\n             *\n             * @param {number|string} value\n             * @param {object} options\n             */\n            setUnformatted: function setUnformatted(value) {\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.setUnformatted(value, options);\n                });\n            },\n\n            /**\n             * This is an alias of the `getNumericString()` function, and should not be used anymore.\n             *\n             * @returns {Array<string>}\n             * @deprecated\n             */\n            get: function get() {\n                var result = [];\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    result.push(aNObject.get());\n                });\n\n                return result;\n            },\n\n            /**\n             * Return an array of the unformatted values (as a string) of each AutoNumeric element of the local AutoNumeric element list\n             *\n             * @returns {Array<string>}\n             */\n            getNumericString: function getNumericString() {\n                var result = [];\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    result.push(aNObject.getNumericString());\n                });\n\n                return result;\n            },\n\n            /**\n             * Return an array of the current formatted values (as a string) of each AutoNumeric element of the local AutoNumeric element list\n             *\n             * @returns {Array<string>}\n             */\n            getFormatted: function getFormatted() {\n                var result = [];\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    result.push(aNObject.getFormatted());\n                });\n\n                return result;\n            },\n\n            /**\n             * Return an array of the element unformatted values (as a real Javascript number), for each element of the local AutoNumeric element list\n             *\n             * @returns {Array<number>}\n             */\n            getNumber: function getNumber() {\n                var result = [];\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    result.push(aNObject.getNumber());\n                });\n\n                return result;\n            },\n\n            /**\n             * Returns the unformatted values (following the `outputFormat` setting) of each element of the local AutoNumeric element list into an array\n             *\n             * @returns {Array<string>}\n             */\n            getLocalized: function getLocalized() {\n                var result = [];\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    result.push(aNObject.getLocalized());\n                });\n\n                return result;\n            },\n\n            /**\n             * Force each element of the local AutoNumeric element list to reformat its value\n             */\n            reformat: function reformat() {\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.reformat();\n                });\n            },\n\n            /**\n             * Remove the formatting and keep only the raw unformatted value (as a numericString) in each elements of the local AutoNumeric element list\n             */\n            unformat: function unformat() {\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.unformat();\n                });\n            },\n\n            /**\n             * Remove the formatting and keep only the localized unformatted value in the element, with the option to override the default outputFormat if needed\n             *\n             * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n             */\n            unformatLocalized: function unformatLocalized() {\n                var forcedOutputFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.unformatLocalized(forcedOutputFormat);\n                });\n            },\n\n            /**\n             * Updates the AutoNumeric settings, and immediately format the elements accordingly, for each elements of the local AutoNumeric element list\n             *\n             * @param {object} newOptions This can be either one or more option objects\n             */\n            update: function update() {\n                for (var _len = arguments.length, newOptions = Array(_len), _key = 0; _key < _len; _key++) {\n                    newOptions[_key] = arguments[_key];\n                }\n\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.update.apply(aNObject, newOptions);\n                });\n            },\n\n            /**\n             * Return `true` is *all* the autoNumeric-managed elements are pristine, if their raw value hasn't changed.\n             * By default, this returns `true` if the raw unformatted value is still the same even if the formatted one has changed (due to a configuration update for instance).\n             *\n             * @param {boolean} checkOnlyRawValue If set to `true`, the pristine value is done on the raw unformatted value, not the formatted one. If set to `false`, this also checks that the formatted value hasn't changed.\n             * @returns {boolean}\n             */\n            isPristine: function isPristine() {\n                var checkOnlyRawValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n                var isPristine = true;\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    if (isPristine && !aNObject.isPristine(checkOnlyRawValue)) {\n                        isPristine = false;\n                    }\n                });\n\n                return isPristine;\n            },\n\n            /**\n             * Execute the `clear()` method on each AutoNumeric object in the local AutoNumeric element list\n             *\n             * @param {boolean} forceClearAll\n             */\n            clear: function clear() {\n                var forceClearAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.clear(forceClearAll);\n                });\n            },\n\n            /**\n             * Execute the `remove()` method on each AutoNumeric object in the local AutoNumeric element list\n             */\n            remove: function remove() {\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.remove();\n                });\n            },\n\n            /**\n             * Execute the `wipe()` method on each AutoNumeric object in the local AutoNumeric element list\n             */\n            wipe: function wipe() {\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.wipe();\n                });\n            },\n\n            /**\n             * Execute the `nuke()` method on each AutoNumeric object in the local AutoNumeric element list\n             */\n            nuke: function nuke() {\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    aNObject.nuke();\n                });\n            },\n\n            /**\n             * Return `true` if the given AutoNumeric object (or DOM element) is in the local AutoNumeric element list\n             *\n             * @param {HTMLElement|HTMLInputElement|AutoNumeric} domElementOrAutoNumericObject\n             * @returns {*}\n             */\n            has: function has(domElementOrAutoNumericObject) {\n                var result = void 0;\n                if (domElementOrAutoNumericObject instanceof AutoNumeric) {\n                    result = _this.autoNumericLocalList.has(domElementOrAutoNumericObject.node());\n                } else {\n                    result = _this.autoNumericLocalList.has(domElementOrAutoNumericObject);\n                }\n\n                return result;\n            },\n\n            /**\n             * Add an existing AutoNumeric object (or DOM element) to the local AutoNumeric element list, using the DOM element as the key.\n             * This manages the case where `addObject` is used on an AutoNumeric object that already has multiple elements in its local list.\n             *\n             * @param {HTMLElement|HTMLInputElement|AutoNumeric} domElementOrAutoNumericObject\n             */\n            addObject: function addObject(domElementOrAutoNumericObject) {\n                // Start with the same data, whatever the user passed as arguments\n                var domElement = void 0;\n                var otherAutoNumericObject = void 0;\n                if (domElementOrAutoNumericObject instanceof AutoNumeric) {\n                    domElement = domElementOrAutoNumericObject.node();\n                    otherAutoNumericObject = domElementOrAutoNumericObject;\n                } else {\n                    domElement = domElementOrAutoNumericObject;\n                    otherAutoNumericObject = AutoNumeric.getAutoNumericElement(domElementOrAutoNumericObject);\n                }\n\n                // Check if the current autoNumeric object has a local list\n                if (!_this._hasLocalList()) {\n                    _this._createLocalList();\n                }\n\n                // Check if the other autoNumeric object has a local list...\n                var otherANLocalList = otherAutoNumericObject._getLocalList();\n                if (otherANLocalList.size === 0) {\n                    // Special case if the other AutoNumeric object has an empty local list, then populate itself to it\n                    otherAutoNumericObject._createLocalList();\n                    otherANLocalList = otherAutoNumericObject._getLocalList(); // Update the other local list\n                }\n\n                var mergedLocalLists = void 0;\n                if (otherANLocalList instanceof Map) {\n                    // ...If it does, merge the local lists together\n                    mergedLocalLists = _AutoNumericHelper2.default.mergeMaps(_this._getLocalList(), otherANLocalList);\n                } else {\n                    // ...If not, just set the current local list onto the other AutoNumeric object\n                    // We need to specify the AutoNumeric object, otherwise the `_addToLocalList` function would not correctly add the AutoNumeric object since we would not have a reference to it, but a reference to the current AutoNumeric object on which is called this method.\n                    _this._addToLocalList(domElement, otherAutoNumericObject);\n                    mergedLocalLists = _this._getLocalList();\n                }\n\n                // Update the resulting list, on all the objects of that local list (so that we can indifferently use `init()` on any object belonging to that list)\n                mergedLocalLists.forEach(function (aNObject) {\n                    aNObject._setLocalList(mergedLocalLists);\n                });\n            },\n\n            /**\n             * Remove the given AutoNumeric object (or DOM element) from the local AutoNumeric element list, using the DOM element as the key.\n             * If this function attempts to remove the current AutoNumeric object from the local list, a warning is shown, but the deletion is still done.\n             *\n             * Special cases :\n             * - If the current object removes itself, then it's removed from the shared local list, then a new empty local list is used/created\n             * - If another object remove this object, then a local list with only this object is used/created\n             *\n             * @param {HTMLElement|HTMLInputElement|AutoNumeric} domElementOrAutoNumericObject\n             * @param {boolean} keepCurrentANObject If set to `false`, then the function will also remove the current AutoNumeric object if asked, otherwise it will ignore it and print a warning message\n             */\n            removeObject: function removeObject(domElementOrAutoNumericObject) {\n                var keepCurrentANObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n                // Start with the same data, whatever the user passed as arguments\n                var domElement = void 0;\n                var otherAutoNumericObject = void 0;\n                if (domElementOrAutoNumericObject instanceof AutoNumeric) {\n                    domElement = domElementOrAutoNumericObject.node();\n                    otherAutoNumericObject = domElementOrAutoNumericObject;\n                } else {\n                    domElement = domElementOrAutoNumericObject;\n                    otherAutoNumericObject = AutoNumeric.getAutoNumericElement(domElementOrAutoNumericObject);\n                }\n\n                // Remove the other object from the local list\n                var initialCompleteLocalList = _this.autoNumericLocalList;\n                _this.autoNumericLocalList.delete(domElement);\n\n                // Update the local list for all objects in it\n                initialCompleteLocalList.forEach(function (aNObject) {\n                    aNObject._setLocalList(_this.autoNumericLocalList);\n                });\n\n                if (!keepCurrentANObject && domElement === _this.node()) {\n                    // This object is removed by itself\n                    // Empty the object local list\n                    otherAutoNumericObject._setLocalList(new Map());\n                } else {\n                    // This object is removed by another object\n                    // Set the local list for the removed object, with only this object in it\n                    otherAutoNumericObject._createLocalList();\n                }\n            },\n\n            /**\n             * Remove all elements from the shared list, effectively emptying it.\n             * This is the equivalent of calling `detach()` on each of its elements.\n             *\n             * @param {boolean} keepEachANObjectInItsOwnList If set to `true`, then instead of completely emptying the local list of each AutoNumeric objects, each one of those keeps itself in its own local list\n             */\n            empty: function empty() {\n                var keepEachANObjectInItsOwnList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n                var initialCompleteLocalList = _this.autoNumericLocalList;\n\n                // Update the local list for all objects in it\n                initialCompleteLocalList.forEach(function (aNObject) {\n                    if (keepEachANObjectInItsOwnList) {\n                        aNObject._createLocalList();\n                    } else {\n                        aNObject._setLocalList(new Map());\n                    }\n                });\n            },\n\n            /**\n             * Return an array containing all the AutoNumeric DOM elements that have been initialized by each other\n             *\n             * @returns {Array<HTMLElement>}\n             */\n            elements: function elements() {\n                var result = [];\n                _this.autoNumericLocalList.forEach(function (aNObject) {\n                    result.push(aNObject.node());\n                });\n\n                return result;\n            },\n\n            /**\n             * Return the `Map` object directly\n             * @returns {Map}\n             */\n            getList: function getList() {\n                return _this.autoNumericLocalList;\n            },\n\n            /**\n             * Return the number of element in the local AutoNumeric element list\n             * @returns {number}\n             */\n            size: function size() {\n                return _this.autoNumericLocalList.size;\n            }\n        };\n\n        // Create the functions that will allow to change each setting one by one\n        /**\n         * For each options, we define if we need to reformat the element content (does changing the options should change the way its value is displayed?).\n         * If yes, then we use the `update()` for force a reformat, otherwise, we just update the `settings` object.\n         */\n        this.options = {\n            /**\n             * Reset any options set previously, by overwriting them with the default settings\n             *\n             * @returns {AutoNumeric}\n             */\n            reset: function reset() {\n                delete _this.settings;\n                _this.settings = {};\n                _this.update(AutoNumeric.defaultSettings);\n\n                return _this;\n            },\n            allowDecimalPadding: function allowDecimalPadding(_allowDecimalPadding) {\n                _this.update({ allowDecimalPadding: _allowDecimalPadding });\n\n                return _this;\n            },\n            caretPositionOnFocus: function caretPositionOnFocus(_caretPositionOnFocus) {\n                //FIXME à tester\n                _this.settings.caretPositionOnFocus = _caretPositionOnFocus;\n\n                return _this;\n            },\n            createLocalList: function createLocalList(_createLocalList2) {\n                _this.settings.createLocalList = _createLocalList2;\n\n                // Delete the local list when this is set to `false`, create it if this is set to `true` and there is not pre-existing list\n                if (_this.settings.createLocalList) {\n                    if (!_this._hasLocalList()) {\n                        _this._createLocalList();\n                    }\n                } else {\n                    _this._deleteLocalList();\n                }\n\n                return _this;\n            },\n            currencySymbol: function currencySymbol(_currencySymbol) {\n                _this.update({ currencySymbol: _currencySymbol });\n\n                return _this;\n            },\n            currencySymbolPlacement: function currencySymbolPlacement(_currencySymbolPlacement) {\n                _this.update({ currencySymbolPlacement: _currencySymbolPlacement });\n\n                return _this;\n            },\n            decimalCharacter: function decimalCharacter(_decimalCharacter) {\n                _this.update({ decimalCharacter: _decimalCharacter });\n\n                return _this;\n            },\n            decimalCharacterAlternative: function decimalCharacterAlternative(_decimalCharacterAlternative) {\n                _this.settings.decimalCharacterAlternative = _decimalCharacterAlternative;\n\n                return _this;\n            },\n            decimalPlacesOverride: function decimalPlacesOverride(_decimalPlacesOverride) {\n                _this.update({ decimalPlacesOverride: _decimalPlacesOverride });\n\n                return _this;\n            },\n            decimalPlacesShownOnFocus: function decimalPlacesShownOnFocus(_decimalPlacesShownOnFocus) {\n                _this.update({ decimalPlacesShownOnFocus: _decimalPlacesShownOnFocus });\n\n                return _this;\n            },\n            defaultValueOverride: function defaultValueOverride(_defaultValueOverride) {\n                _this.update({ defaultValueOverride: _defaultValueOverride });\n\n                return _this;\n            },\n            digitalGroupSpacing: function digitalGroupSpacing(_digitalGroupSpacing) {\n                _this.update({ digitalGroupSpacing: _digitalGroupSpacing });\n\n                return _this;\n            },\n            digitGroupSeparator: function digitGroupSeparator(_digitGroupSeparator) {\n                _this.update({ digitGroupSeparator: _digitGroupSeparator });\n\n                return _this;\n            },\n            emptyInputBehavior: function emptyInputBehavior(_emptyInputBehavior) {\n                _this.update({ emptyInputBehavior: _emptyInputBehavior });\n\n                return _this;\n            },\n            failOnUnknownOption: function failOnUnknownOption(_failOnUnknownOption) {\n                _this.settings.failOnUnknownOption = _failOnUnknownOption; //FIXME à tester\n\n                return _this;\n            },\n            formatOnPageLoad: function formatOnPageLoad(_formatOnPageLoad) {\n                _this.settings.formatOnPageLoad = _formatOnPageLoad; //FIXME à tester\n\n                return _this;\n            },\n            isCancellable: function isCancellable(_isCancellable) {\n                _this.settings.isCancellable = _isCancellable; //FIXME à tester\n\n                return _this;\n            },\n            leadingZero: function leadingZero(_leadingZero) {\n                _this.update({ leadingZero: _leadingZero });\n\n                return _this;\n            },\n            maximumValue: function maximumValue(_maximumValue) {\n                _this.update({ maximumValue: _maximumValue });\n\n                return _this;\n            },\n            minimumValue: function minimumValue(_minimumValue) {\n                _this.update({ minimumValue: _minimumValue });\n\n                return _this;\n            },\n            modifyValueOnWheel: function modifyValueOnWheel(_modifyValueOnWheel) {\n                _this.settings.modifyValueOnWheel = _modifyValueOnWheel; //FIXME à tester\n\n                return _this;\n            },\n            negativeBracketsTypeOnBlur: function negativeBracketsTypeOnBlur(_negativeBracketsTypeOnBlur) {\n                _this.update({ negativeBracketsTypeOnBlur: _negativeBracketsTypeOnBlur });\n\n                return _this;\n            },\n            negativePositiveSignPlacement: function negativePositiveSignPlacement(_negativePositiveSignPlacement) {\n                _this.update({ negativePositiveSignPlacement: _negativePositiveSignPlacement });\n\n                return _this;\n            },\n            noEventListeners: function noEventListeners(_noEventListeners) {\n                //FIXME à tester\n                if (_noEventListeners === AutoNumeric.options.noEventListeners.noEvents && _this.settings.noEventListeners === AutoNumeric.options.noEventListeners.addEvents) {\n                    // Remove the events once\n                    _this._removeEventListeners();\n                }\n\n                _this.update({ noEventListeners: _noEventListeners });\n\n                return _this;\n            },\n            noSeparatorOnFocus: function noSeparatorOnFocus(_noSeparatorOnFocus) {\n                _this.update({ noSeparatorOnFocus: _noSeparatorOnFocus });\n\n                return _this;\n            },\n            onInvalidPaste: function onInvalidPaste(_onInvalidPaste) {\n                _this.settings.onInvalidPaste = _onInvalidPaste; //FIXME à tester\n\n                return _this;\n            },\n            outputFormat: function outputFormat(_outputFormat) {\n                _this.settings.outputFormat = _outputFormat;\n\n                return _this;\n            },\n            overrideMinMaxLimits: function overrideMinMaxLimits(_overrideMinMaxLimits) {\n                _this.update({ overrideMinMaxLimits: _overrideMinMaxLimits });\n\n                return _this;\n            },\n            readOnly: function readOnly(_readOnly) {\n                //FIXME à tester\n                _this.settings.readOnly = _readOnly;\n                _this._setReadOnly();\n\n                return _this;\n            },\n            roundingMethod: function roundingMethod(_roundingMethod) {\n                _this.update({ roundingMethod: _roundingMethod });\n\n                return _this;\n            },\n            saveValueToSessionStorage: function saveValueToSessionStorage(_saveValueToSessionStorage) {\n                _this.update({ saveValueToSessionStorage: _saveValueToSessionStorage });\n\n                return _this;\n            },\n            scaleDecimalPlaces: function scaleDecimalPlaces(_scaleDecimalPlaces) {\n                _this.update({ scaleDecimalPlaces: _scaleDecimalPlaces });\n\n                return _this;\n            },\n            scaleDivisor: function scaleDivisor(_scaleDivisor) {\n                _this.update({ scaleDivisor: _scaleDivisor });\n\n                return _this;\n            },\n            scaleSymbol: function scaleSymbol(_scaleSymbol) {\n                _this.update({ scaleSymbol: _scaleSymbol });\n\n                return _this;\n            },\n            selectNumberOnly: function selectNumberOnly(_selectNumberOnly) {\n                _this.settings.selectNumberOnly = _selectNumberOnly; //FIXME à tester\n\n                return _this;\n            },\n            selectOnFocus: function selectOnFocus(_selectOnFocus) {\n                _this.settings.selectOnFocus = _selectOnFocus; //FIXME à tester\n\n                return _this;\n            },\n            serializeSpaces: function serializeSpaces(_serializeSpaces) {\n                _this.settings.serializeSpaces = _serializeSpaces; //FIXME à tester\n\n                return _this;\n            },\n            showPositiveSign: function showPositiveSign(_showPositiveSign) {\n                _this.update({ showPositiveSign: _showPositiveSign });\n\n                return _this;\n            },\n            showWarnings: function showWarnings(_showWarnings) {\n                _this.settings.showWarnings = _showWarnings; //FIXME à tester\n\n                return _this;\n            },\n            styleRules: function styleRules(_styleRules) {\n                _this.update({ styleRules: _styleRules });\n\n                return _this;\n            },\n            suffixText: function suffixText(_suffixText) {\n                _this.update({ suffixText: _suffixText });\n\n                return _this;\n            },\n            unformatOnHover: function unformatOnHover(_unformatOnHover) {\n                _this.settings.unformatOnHover = _unformatOnHover; //FIXME à tester\n\n                return _this;\n            },\n            unformatOnSubmit: function unformatOnSubmit(_unformatOnSubmit) {\n                _this.settings.unformatOnSubmit = _unformatOnSubmit; //FIXME à tester\n\n                return _this;\n            },\n            wheelStep: function wheelStep(_wheelStep) {\n                _this.settings.wheelStep = _wheelStep; //FIXME à tester\n\n                return _this;\n            }\n        };\n    }\n\n    /**\n     * Return the autoNumeric version number (for debugging purpose)\n     *\n     * @returns {string}\n     */\n\n\n    _createClass(AutoNumeric, [{\n        key: '_saveInitialValues',\n\n\n        /**\n         * Save the initial element values for later use in the pristine test.\n         * Those values are :\n         * - the html attribute (ie. <input value='42'>), and\n         * - the script `value` (ie. `let domElement.value`)\n         *\n         * @param {null|number|string} initialValue\n         * @private\n         */\n        value: function _saveInitialValues(initialValue) {\n            // Keep the very first initial values (in the html attribute and set by the script). This is needed to check if the element is pristine.\n            // Save the html attribute 'value'\n            this.initialValueHtmlAttribute = this.domElement.getAttribute('value');\n            if (_AutoNumericHelper2.default.isNull(this.initialValueHtmlAttribute)) {\n                // Set the default empty value attribute instead of `null`, since if the initial value is null, the empty string is used\n                this.initialValueHtmlAttribute = '';\n            }\n\n            // Save the 'script' value\n            this.initialValue = initialValue;\n            if (_AutoNumericHelper2.default.isNull(this.initialValue)) {\n                // Same as above\n                this.initialValue = '';\n            }\n        }\n\n        /**\n         * Generate all the event listeners for the given DOM element\n         * @private\n         */\n\n    }, {\n        key: '_createEventListeners',\n        value: function _createEventListeners() {\n            var _this2 = this;\n\n            // Create references to the event handler functions, so we can then cleanly removes those listeners if needed\n            // That would not be possible if we used closures directly in the event handler declarations\n            this._onFocusInFunc = function (e) {\n                _this2._onFocusIn(e);\n            };\n            this._onFocusInAndMouseEnterFunc = function (e) {\n                _this2._onFocusInAndMouseEnter(e);\n            };\n            this._onFocusFunc = function () {\n                _this2._onFocus();\n            };\n            this._onKeydownFunc = function (e) {\n                _this2._onKeydown(e);\n            };\n            this._onKeypressFunc = function (e) {\n                _this2._onKeypress(e);\n            };\n            this._onInputFunc = function (e) {\n                _this2._onInput(e);\n            };\n            this._onKeyupFunc = function (e) {\n                _this2._onKeyup(e);\n            };\n            this._onBlurFunc = function (e) {\n                _this2._onBlur(e);\n            };\n            this._onFocusOutAndMouseLeaveFunc = function (e) {\n                _this2._onFocusOutAndMouseLeave(e);\n            };\n            this._onPasteFunc = function (e) {\n                _this2._onPaste(e);\n            };\n            this._onWheelFunc = function (e) {\n                _this2._onWheel(e);\n            };\n            this._onFormSubmitFunc = function (e) {\n                _this2._onFormSubmit(e);\n            };\n            this._onKeydownGlobalFunc = function (e) {\n                _this2._onKeydownGlobal(e);\n            };\n            this._onKeyupGlobalFunc = function (e) {\n                _this2._onKeyupGlobal(e);\n            };\n            this._onDropFunc = function (e) {\n                _this2._onDrop(e);\n            };\n\n            // Add the event listeners\n            this.domElement.addEventListener('focusin', this._onFocusInFunc, false);\n            this.domElement.addEventListener('focus', this._onFocusInAndMouseEnterFunc, false);\n            this.domElement.addEventListener('focus', this._onFocusFunc, false);\n            this.domElement.addEventListener('mouseenter', this._onFocusInAndMouseEnterFunc, false);\n            this.domElement.addEventListener('keydown', this._onKeydownFunc, false);\n            this.domElement.addEventListener('keypress', this._onKeypressFunc, false);\n            this.domElement.addEventListener('input', this._onInputFunc, false);\n            this.domElement.addEventListener('keyup', this._onKeyupFunc, false);\n            this.domElement.addEventListener('blur', this._onBlurFunc, false);\n            this.domElement.addEventListener('blur', this._onFocusOutAndMouseLeaveFunc, false);\n            this.domElement.addEventListener('mouseleave', this._onFocusOutAndMouseLeaveFunc, false);\n            this.domElement.addEventListener('paste', this._onPasteFunc, false);\n            this.domElement.addEventListener('wheel', this._onWheelFunc, false);\n            this.domElement.addEventListener('drop', this._onDropFunc, false);\n\n            var parentForm = this.form();\n            if (!_AutoNumericHelper2.default.isNull(parentForm)) {\n                parentForm.addEventListener('submit.autoNumeric', this._onFormSubmitFunc, false); //FIXME à tester\n            }\n\n            // Create one global event listener for the keyup event on the document object, which will be shared by all the autoNumeric elements\n            if (!AutoNumeric._doesGlobalListExists()) {\n                document.addEventListener('keydown', this._onKeydownGlobalFunc, false);\n                document.addEventListener('keyup', this._onKeyupGlobalFunc, false);\n            }\n        }\n\n        /**\n         * Remove all the autoNumeric-related event listeners for the given DOM element\n         * @private\n         */\n\n    }, {\n        key: '_removeEventListeners',\n        value: function _removeEventListeners() {\n            //FIXME à tester\n            this.domElement.removeEventListener('focusin', this._onFocusInFunc, false);\n            this.domElement.removeEventListener('focus', this._onFocusInAndMouseEnterFunc, false);\n            this.domElement.removeEventListener('focus', this._onFocusFunc, false);\n            this.domElement.removeEventListener('mouseenter', this._onFocusInAndMouseEnterFunc, false);\n            this.domElement.removeEventListener('blur', this._onFocusOutAndMouseLeaveFunc, false);\n            this.domElement.removeEventListener('mouseleave', this._onFocusOutAndMouseLeaveFunc, false);\n            this.domElement.removeEventListener('keydown', this._onKeydownFunc, false);\n            this.domElement.removeEventListener('keypress', this._onKeypressFunc, false);\n            this.domElement.removeEventListener('input', this._onInputFunc, false);\n            this.domElement.removeEventListener('keyup', this._onKeyupFunc, false);\n            this.domElement.removeEventListener('blur', this._onBlurFunc, false);\n            this.domElement.removeEventListener('paste', this._onPasteFunc, false);\n            this.domElement.removeEventListener('wheel', this._onWheelFunc, false);\n\n            document.removeEventListener('keydown', this._onKeydownGlobalFunc, false);\n            document.removeEventListener('keyup', this._onKeyupGlobalFunc, false);\n\n            var parentForm = this.form();\n            if (!_AutoNumericHelper2.default.isNull(parentForm)) {\n                parentForm.removeEventListener('submit.autoNumeric', this._onFormSubmitFunc, false);\n            }\n        }\n\n        /**\n         * Set the element attribute 'readonly' according to the current settings.\n         *\n         * @private\n         */\n\n    }, {\n        key: '_setReadOnly',\n        value: function _setReadOnly() {\n            if (this.isInputElement && this.settings.readOnly) {\n                this.domElement.readOnly = true;\n            }\n        }\n\n        /**\n         * Save the current raw value into the history table, along with the selection information.\n         *\n         * If the user has done some undos and tries to enter:\n         * - a new and different number than the 'next' state, this drops the rest of the history table\n         * - the very same number that result in the same rawValue than the 'next' state, we only move the history table pointer to the next state\n         *\n         * @private\n         */\n\n    }, {\n        key: '_historyTableAdd',\n        value: function _historyTableAdd() {\n            //TODO Add a `this.settings.saveSelectionsIntoHistory` option to prevent saving the selections (in order to gain performance)\n            var isEmptyHistoryTable = this.historyTable.length === 0;\n            // Only add a new value if it's different than the previous one (to prevent infinitely adding values on mouseover for instance)\n            if (isEmptyHistoryTable || this.settings.rawValue !== this._historyTableCurrentValueUsed()) {\n                // Trim the history table if the user changed the value of an intermediary state\n                var addNewHistoryState = true;\n                if (!isEmptyHistoryTable) {\n                    // If some undo has been done and the user type the exact same data than the next entry after the current history pointer, do no drop the rest of the 'redo' list, and just advance the historyTableIndex\n                    var nextHistoryStateIndex = this.historyTableIndex + 1;\n                    if (nextHistoryStateIndex < this.historyTable.length && this.settings.rawValue === this.historyTable[nextHistoryStateIndex].value) {\n                        // If the character input result in the same state than the next one, do not remove the next history states nor add a new one\n                        addNewHistoryState = false;\n                    } else {\n                        // First remove anything that is after the current index\n                        _AutoNumericHelper2.default.arrayTrim(this.historyTable, this.historyTableIndex + 1);\n                    }\n                }\n\n                // Update the history pointer\n                this.historyTableIndex++;\n\n                // Add the new history state, if needed\n                if (addNewHistoryState) {\n                    // Save the selection info\n                    var selection = _AutoNumericHelper2.default.getElementSelection(this.domElement);\n                    this.selectionStart = selection.start;\n                    this.selectionEnd = selection.end;\n\n                    // Then add the new raw value\n                    this.historyTable.push({\n                        // Save the rawValue and selection start/end\n                        value: this.settings.rawValue,\n                        // The selection for this element is temporary, and will be updated when the next history state will be recorded.\n                        // That way, we are always sure we save the last caret or selection positions just before the value is changed. Otherwise we would only save those positions when the value is first changed, and would not take into account that the user could move the caret around afterward.\n                        // For instance, this is needed if the user change the element value, and immediately undo it ; if he then does a redo, he'll see the value and the right selection\n                        // To sum up; The selection position are not always +1 character, since it could also be '2' if a group separator is added when entering one character. That's why the current history state caret/selection position is updated on each `keyup` event.\n                        start: this.selectionStart + 1, // Here we add one since the user added one character too\n                        end: this.selectionEnd + 1\n                    });\n\n                    // Update the selection in the previous entry, in order to keep track of the updated caret/selection positions\n                    if (this.historyTable.length > 1) {\n                        this.historyTable[this.historyTableIndex - 1].start = this.selectionStart;\n                        this.historyTable[this.historyTableIndex - 1].end = this.selectionEnd;\n                    }\n                }\n\n                // Limit the history table size according to the `historySize` option\n                if (this.historyTable.length > this.settings.historySize) {\n                    this._historyTableForget();\n                }\n            }\n        }\n\n        /**\n         * Debug function for the history table\n         * @private\n         */\n        /*\n        _debugHistoryTable() {\n            let i = 0;\n            let mark;\n            this.historyTable.forEach(history => {\n                if (this.historyTableIndex === i) {\n                    mark = '> ';\n                } else {\n                    mark = '';\n                }\n                console.log(`${mark}${i++}: ${history.value} ${history.start}|${history.end} [onGoingRedo: ${this.onGoingRedo}]`); //DEBUG\n            });\n        }\n        */\n\n        /**\n         * 'Undo' or 'Redo' the last/next user entry in the history table.\n         * This does not modify the history table, only the pointer to the current state.\n         *\n         * @param {boolean} undo If set to `true`, then this function does an 'Undo', otherwise it does a 'Redo'\n         * @private\n         */\n\n    }, {\n        key: '_historyTableUndoOrRedo',\n        value: function _historyTableUndoOrRedo() {\n            var undo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            var check = void 0;\n            if (undo) {\n                // Only 'undo' if there are some info to undo\n                check = this.historyTableIndex > 0;\n                if (check) {\n                    this.historyTableIndex--;\n                }\n            } else {\n                // Only 'redo' if there are some info to redo at the end of the history table\n                check = this.historyTableIndex + 1 < this.historyTable.length;\n                if (check) {\n                    this.historyTableIndex++;\n                }\n            }\n\n            if (check) {\n                // Set the value back\n                var undoInfo = this.historyTable[this.historyTableIndex];\n                this.set(undoInfo.value, null, false); // next or previous raw value\n\n                // Set the selection back\n                _AutoNumericHelper2.default.setElementSelection(this.domElement, undoInfo.start, undoInfo.end);\n            }\n        }\n\n        /**\n         * 'Undo' the last user entry by going back one entry in the history table.\n         * This keeps the following entries in order to allow for a 'redo'.\n         * This does not modify the history table, only the pointer to the current state.\n         * @private\n         */\n\n    }, {\n        key: '_historyTableUndo',\n        value: function _historyTableUndo() {\n            this._historyTableUndoOrRedo(true);\n        }\n\n        /**\n         * 'Redo' the next user entry in the history table.\n         * This does not modify the history table, only the pointer to the current state.\n         * @private\n         */\n\n    }, {\n        key: '_historyTableRedo',\n        value: function _historyTableRedo() {\n            this._historyTableUndoOrRedo(false);\n        }\n\n        /**\n         * Reset the history table to its initial state, and select the value.\n         * @private\n         */\n        /*\n        resetHistoryTable() { //FIXME Test this\n            this.set(this.settings.rawValue, null, false);\n            this.select();\n            const selection = AutoNumericHelper.getElementSelection(this.domElement);\n            this.historyTableIndex = 0;\n            this.historyTable = [{\n                // Save the rawValue and selection start/end\n                value: this.settings.rawValue,\n                start: selection.start,\n                end  : selection.end,\n            }];\n        }\n        */\n\n        /**\n         * Make the history table forget its first N elements, shifting its indexes in the process.\n         * `N` being given as the `numberOfEntriesToForget` parameter.\n         *\n         * @param {Number} numberOfEntriesToForget\n         * @returns {object|Array<object>} The discarded objects, in an Array.\n         * @private\n         */\n\n    }, {\n        key: '_historyTableForget',\n        value: function _historyTableForget() {\n            var numberOfEntriesToForget = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n            var shiftedAway = [];\n            for (var i = 0; i < numberOfEntriesToForget; i++) {\n                shiftedAway.push(this.historyTable.shift());\n                // Update the history table index accordingly\n                this.historyTableIndex--;\n                if (this.historyTableIndex < 0) {\n                    // In case this function is called more times than there is states in the history table\n                    this.historyTableIndex = 0;\n                }\n            }\n\n            if (shiftedAway.length === 1) {\n                return shiftedAway[0];\n            }\n\n            return shiftedAway;\n        }\n\n        /**\n         * Return the currently used value from the history table.\n         *\n         * @returns {string|number}\n         * @private\n         */\n\n    }, {\n        key: '_historyTableCurrentValueUsed',\n        value: function _historyTableCurrentValueUsed() {\n            var indexToUse = this.historyTableIndex;\n            if (indexToUse < 0) {\n                indexToUse = 0;\n            }\n\n            var result = void 0;\n            if (_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.historyTable[indexToUse])) {\n                result = '';\n            } else {\n                result = this.historyTable[indexToUse].value;\n            }\n\n            return result;\n        }\n\n        /**\n         * Parse the `styleRules` option and run the test for each given rules, either pre-defined ones like `positive`, `negative` and `ranges`, or user defined callbacks within the `userDefined` attribute.\n         * @private\n         */\n\n    }, {\n        key: '_parseStyleRules',\n        value: function _parseStyleRules() {\n            var _this3 = this;\n\n            if (_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.settings.styleRules) || this.settings.rawValue === '') {\n                return;\n            }\n\n            // 'positive' attribute\n            if (!_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.settings.styleRules.positive)) {\n                if (this.settings.rawValue >= 0) {\n                    this._addCSSClass(this.settings.styleRules.positive);\n                } else {\n                    this._removeCSSClass(this.settings.styleRules.positive);\n                }\n            }\n\n            // 'negative' attribute\n            if (!_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.settings.styleRules.negative)) {\n                if (this.settings.rawValue < 0) {\n                    this._addCSSClass(this.settings.styleRules.negative);\n                } else {\n                    this._removeCSSClass(this.settings.styleRules.negative);\n                }\n            }\n\n            // 'ranges' attribute\n            if (!_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.settings.styleRules.ranges) && this.settings.styleRules.ranges.length !== 0) {\n                this.settings.styleRules.ranges.forEach(function (range) {\n                    if (_this3.settings.rawValue >= range.min && _this3.settings.rawValue < range.max) {\n                        _this3._addCSSClass(range.class);\n                    } else {\n                        _this3._removeCSSClass(range.class);\n                    }\n                });\n            }\n\n            // 'userDefined' attribute\n            //TODO Also pass the old raw value as a parameter, and not only the new raw value\n            if (!_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.settings.styleRules.userDefined) && this.settings.styleRules.userDefined.length !== 0) {\n                this.settings.styleRules.userDefined.forEach(function (userObject) {\n                    if (_AutoNumericHelper2.default.isFunction(userObject.callback)) {\n                        // Test for the type of the `classes` attribute, which changes the function behavior\n                        if (_AutoNumericHelper2.default.isString(userObject.classes)) {\n                            // If 'classes' is a string, set it if `true`, remove it if `false`\n                            if (userObject.callback(_this3.settings.rawValue)) {\n                                _this3._addCSSClass(userObject.classes);\n                            } else {\n                                _this3._removeCSSClass(userObject.classes);\n                            }\n                        } else if (_AutoNumericHelper2.default.isArray(userObject.classes)) {\n                            if (userObject.classes.length === 2) {\n                                // If 'classes' is an array with only 2 elements, set the first class if `true`, the second if `false`\n                                if (userObject.callback(_this3.settings.rawValue)) {\n                                    _this3._addCSSClass(userObject.classes[0]);\n                                    _this3._removeCSSClass(userObject.classes[1]);\n                                } else {\n                                    _this3._removeCSSClass(userObject.classes[0]);\n                                    _this3._addCSSClass(userObject.classes[1]);\n                                }\n                            } else if (userObject.classes.length > 2) {\n                                (function () {\n                                    // The callback returns an array of indexes to use on the `classes` array\n                                    var callbackResult = userObject.callback(_this3.settings.rawValue);\n                                    if (_AutoNumericHelper2.default.isArray(callbackResult)) {\n                                        // If multiple indexes are returned\n                                        userObject.classes.forEach(function (userClass, index) {\n                                            if (_AutoNumericHelper2.default.isInArray(index, callbackResult)) {\n                                                _this3._addCSSClass(userClass);\n                                            } else {\n                                                _this3._removeCSSClass(userClass);\n                                            }\n                                        });\n                                    } else if (_AutoNumericHelper2.default.isInt(callbackResult)) {\n                                        // If only one index is returned\n                                        userObject.classes.forEach(function (userClass, index) {\n                                            if (index === callbackResult) {\n                                                _this3._addCSSClass(userClass);\n                                            } else {\n                                                _this3._removeCSSClass(userClass);\n                                            }\n                                        });\n                                    } else if (_AutoNumericHelper2.default.isNull(callbackResult)) {\n                                        // Remove all the classes\n                                        userObject.classes.forEach(function (userClass) {\n                                            _this3._removeCSSClass(userClass);\n                                        });\n                                    } else {\n                                        _AutoNumericHelper2.default.throwError('The callback result is not an array nor a valid array index, ' + (typeof callbackResult === 'undefined' ? 'undefined' : _typeof(callbackResult)) + ' given.');\n                                    }\n                                })();\n                            } else {\n                                _AutoNumericHelper2.default.throwError('The classes attribute is not valid for the `styleRules` option.');\n                            }\n                        } else if (_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(userObject.classes)) {\n                            // If 'classes' is `undefined` or `null`, then the callback is called with the AutoNumeric object passed as a parameter\n                            userObject.callback(_this3);\n                        } else {\n                            _AutoNumericHelper2.default.throwError('The callback/classes structure is not valid for the `styleRules` option.');\n                        }\n                    } else {\n                        _AutoNumericHelper2.default.warning('The given `styleRules` callback is not a function, ' + (typeof callback === 'undefined' ? 'undefined' : _typeof(callback)) + ' given.');\n                    }\n                });\n            }\n        }\n\n        /**\n         * Add the given CSS class to the DOM element.\n         *\n         * @param {string} cssClassName\n         * @private\n         */\n\n    }, {\n        key: '_addCSSClass',\n        value: function _addCSSClass(cssClassName) {\n            this.domElement.classList.add(cssClassName);\n        }\n\n        /**\n         * Remove the given CSS class from the DOM element.\n         *\n         * @param {string} cssClassName\n         * @private\n         */\n\n    }, {\n        key: '_removeCSSClass',\n        value: function _removeCSSClass(cssClassName) {\n            this.domElement.classList.remove(cssClassName);\n        }\n\n        // This are the public function available on each autoNumeric-managed element\n\n        /**\n         * Method that updates the AutoNumeric settings, and immediately format the element accordingly.\n         * The options passed as parameter(s) is either one or many objects that each contains some settings, ie. :\n         * {\n         *     digitGroupSeparator: \".\",\n         *     decimalCharacter: \",\",\n         *     currencySymbol: '€ ',\n         * }\n         * If multiple options are passed, the latter overwrite the previous ones.\n         *\n         * @example anElement.update({ options }) // Updates the settings\n         * @example anElement.update({ options1 }, { options2 }) // Updates the settings with multiple option objects\n         *\n         * @param {object} newOptions\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'update',\n        value: function update() {\n            // Store the current unformatted input value\n            var numericString = this.settings.rawValue;\n\n            // Generate a single option object with the settings from the latter overwriting those from the former\n            var optionsToUse = {};\n\n            for (var _len2 = arguments.length, newOptions = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                newOptions[_key2] = arguments[_key2];\n            }\n\n            if (_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(newOptions) || newOptions.length === 0) {\n                optionsToUse = null;\n            } else if (newOptions.length >= 1) {\n                newOptions.forEach(function (optionObject) {\n                    _extends(optionsToUse, optionObject);\n                });\n            }\n\n            // Update the settings\n            try {\n                this._setSettings(optionsToUse, true);\n            } catch (error) {\n                _AutoNumericHelper2.default.throwError('Unable to update the settings, those are invalid.');\n\n                return this;\n            }\n\n            // Reformat the input value with the new settings\n            // Note: we always `set`, even when `numericString` is the empty string '', since `emptyInputBehavior` (set to `always` or `zero`) can change how the empty input is formatted\n            this.set(numericString);\n\n            return this;\n        }\n\n        /**\n         * Return the options object containing all the current autoNumeric settings in effect.\n         * You can then directly access each option by using its name : `anElement.getSettings().optionNameAutoCompleted`.\n         *\n         * @example\n         * anElement.getSettings()\n         * anElement.getSettings().decimalCharacter // Return the decimalCharacter setting as a string - any valid option name can be used\n         *\n         * @returns {object}\n         */\n\n    }, {\n        key: 'getSettings',\n        value: function getSettings() {\n            return this.settings;\n        }\n\n        /**\n         * Set the given element value, and format it immediately.\n         * Additionally, this `set()` method can accept options that will be merged into the current AutoNumeric element, taking precedence over any previous settings.\n         *\n         * @example anElement.set('12345.67') // Formats the value\n         * @example anElement.set(12345.67) // Formats the value\n         * @example anElement.set(12345.67, { decimalCharacter : ',' }) // Update the settings and formats the value in one go\n         *\n         * @param {number|string} newValue The value must be a number or a numeric string\n         * @param {object} options A settings object that will override the current settings. Note: the update is done only if the `newValue` is defined.\n         * @param {boolean} saveChangeToHistory If set to `true`, then the change is recorded in the history table\n         * @returns {AutoNumeric}\n         * @throws\n         */\n\n    }, {\n        key: 'set',\n        value: function set(newValue) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            var saveChangeToHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            //TODO Add the `saveSettings` options. If `true`, then when `options` is passed, then it overwrite the current `this.settings`. If `false` the `options` are only used once and `this.settings` is not modified\n            if (newValue === null || _AutoNumericHelper2.default.isUndefined(newValue)) {\n                return this;\n            }\n\n            // The options update is done only if the `newValue` is not null\n            if (!_AutoNumericHelper2.default.isNull(options)) {\n                this._setSettings(options, true); // We do not call `update` here since this would call `set` too\n            }\n\n            var value = this.constructor._toNumericValue(newValue, this.settings);\n            if (isNaN(Number(value))) {\n                this.setValue('', saveChangeToHistory);\n\n                return this;\n            }\n\n            if (value === '' && this.settings.emptyInputBehavior === AutoNumeric.options.emptyInputBehavior.zero) {\n                // Keep the value zero inside the element\n                value = 0;\n            }\n\n            if (value !== '') {\n                var _constructor$_checkIf = this.constructor._checkIfInRangeWithOverrideOption(value, this.settings),\n                    _constructor$_checkIf2 = _slicedToArray(_constructor$_checkIf, 2),\n                    minTest = _constructor$_checkIf2[0],\n                    maxTest = _constructor$_checkIf2[1];\n                // This test is needed by the showPositiveSign option\n\n\n                var isZero = _AutoNumericHelper2.default.isZeroOrHasNoValue(value);\n                if (isZero) {\n                    value = '0';\n                }\n\n                if (minTest && maxTest) {\n                    // Ensure rounding does not happen twice\n                    var hasBeenRounded = false;\n\n                    // Rounds the extended decimal places\n                    var tempDecimal = void 0;\n                    if (this.settings.decimalPlacesShownOnFocus) {\n                        tempDecimal = this.settings.decimalPlacesOverride;\n                        this.settings.decimalPlacesOverride = Number(this.settings.decimalPlacesShownOnFocus);\n                        value = this.constructor._roundValue(value, this.settings);\n                        hasBeenRounded = true;\n                        this.settings.decimalPlacesOverride = tempDecimal;\n                    }\n\n                    var rawValue = void 0;\n                    if (this.settings.scaleDivisor && !this.isFocused) {\n                        value = this.constructor._roundValue(value, this.settings);\n                        rawValue = this._trimLeadingAndTrailingZeros(value.replace(this.settings.decimalCharacter, '.')); // Move the `setRawValue` call after the `setElementValue` one\n                        value = this.constructor._toNumericValue(value, this.settings);\n                        value = value / this.settings.scaleDivisor;\n                        value = value.toString();\n\n                        if (this.settings.scaleDecimalPlaces) {\n                            tempDecimal = this.settings.decimalPlacesOverride;\n                            this.settings.decimalPlacesOverride = Number(this.settings.scaleDecimalPlaces);\n                            value = this.constructor._roundValue(value, this.settings);\n                            hasBeenRounded = true;\n                        }\n                    }\n\n                    // Rounds if this has not been done already\n                    if (!hasBeenRounded) {\n                        value = this.constructor._roundValue(value, this.settings);\n                    }\n\n                    // Stores rawValue including the decimalPlacesShownOnFocus\n                    if (!this.settings.scaleDivisor) {\n                        //TODO Find a better way to prevent potentially overwriting the `rawValue` variable (that could have already been set few lines above)\n                        rawValue = this._trimLeadingAndTrailingZeros(value.replace(this.settings.decimalCharacter, '.'));\n                    }\n\n                    value = this.constructor._modifyNegativeSignAndDecimalCharacterForFormattedValue(value, this.settings);\n                    value = this.constructor._addGroupSeparators(value, this.settings, this.isFocused, rawValue);\n                    if (!this.isFocused && this.settings.scaleSymbol) {\n                        value = value + this.settings.scaleSymbol;\n                    }\n\n                    if (this.settings.saveValueToSessionStorage && (this.settings.decimalPlacesShownOnFocus || this.settings.scaleDivisor)) {\n                        this._saveValueToPersistentStorage('set');\n                    }\n\n                    // Set back the `decimalPlacesOverride` option to its original value\n                    if (this.settings.scaleDivisor && this.settings.scaleDecimalPlaces && !this.isFocused) {\n                        this.settings.decimalPlacesOverride = tempDecimal;\n                    }\n\n                    this._setElementAndRawValue(value, rawValue, saveChangeToHistory);\n\n                    return this;\n                } else {\n                    var attemptedValue = value;\n                    value = '';\n\n                    if (!minTest) {\n                        _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.minRangeExceeded, this.domElement);\n                    }\n\n                    if (!maxTest) {\n                        _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.maxRangeExceeded, this.domElement);\n                    }\n\n                    _AutoNumericHelper2.default.throwError('The value [' + attemptedValue + '] being set falls outside of the minimumValue [' + this.settings.minimumValue + '] and maximumValue [' + this.settings.maximumValue + '] range set for this element');\n\n                    this._saveValueToPersistentStorage('remove');\n                    this.setValue('', saveChangeToHistory);\n\n                    return this;\n                }\n            } else {\n                // Here, `value` equal the empty string `''`\n                var result = void 0;\n                if (this.settings.emptyInputBehavior === AutoNumeric.options.emptyInputBehavior.always) {\n                    // Keep the currency symbol as per emptyInputBehavior\n                    result = this.settings.currencySymbol;\n                } else {\n                    result = '';\n                }\n\n                this._setElementAndRawValue(result, '', saveChangeToHistory);\n\n                return this;\n            }\n        }\n\n        /**\n         * Set the given value directly as the DOM element value, without formatting it beforehand.\n         * You can also set the value and update the setting in one go (the value will again not be formatted immediately).\n         *\n         * @param {number|string} value\n         * @param {object} options\n         * @returns {AutoNumeric}\n         * @throws\n         */\n\n    }, {\n        key: 'setUnformatted',\n        value: function setUnformatted(value) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            //TODO Should we use `AutoNumeric.unformat()` here and set the unformatted result in case `value` is formatted?\n            if (value === null || _AutoNumericHelper2.default.isUndefined(value)) {\n                return this;\n            }\n\n            // The options update is done only if the `value` is not null\n            if (!_AutoNumericHelper2.default.isNull(options)) {\n                this._setSettings(options, true); // We do not call `update` here since this would call `set` too\n            }\n\n            var strippedValue = this.constructor._removeBrackets(value, this.settings);\n            var normalizedValue = this.constructor._stripAllNonNumberCharacters(strippedValue, this.settings, true, this.isFocused);\n            normalizedValue = normalizedValue.replace(this.settings.decimalCharacter, '.');\n            if (!_AutoNumericHelper2.default.isNumber(normalizedValue)) {\n                _AutoNumericHelper2.default.throwError('The value is not a valid one, it\\'s not a numeric string nor a recognized currency.');\n            }\n\n            var _constructor$_checkIf3 = this.constructor._checkIfInRangeWithOverrideOption(normalizedValue, this.settings),\n                _constructor$_checkIf4 = _slicedToArray(_constructor$_checkIf3, 2),\n                minTest = _constructor$_checkIf4[0],\n                maxTest = _constructor$_checkIf4[1];\n\n            if (minTest && maxTest) {\n                // If the `normalizedValue` is in the range\n                this.setValue(value);\n            } else {\n                _AutoNumericHelper2.default.throwError('The value is out of the range limits [' + this.settings.minimumValue + ', ' + this.settings.maximumValue + '].');\n            }\n\n            return this;\n        }\n\n        /**\n         * Set the given value directly as the DOM element value, without formatting it beforehand, and without checking its validity.\n         *\n         * @param {string|number|null} newValue The new value to set on the element\n         * @param {boolean} saveChangeToHistory If set to `true`, then the change is recorded in the history array, otherwise it is not\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'setValue',\n        value: function setValue(newValue) {\n            var saveChangeToHistory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            this._setElementAndRawValue(newValue, saveChangeToHistory);\n\n            return this;\n        }\n\n        /**\n         * Save the raw value inside the AutoNumeric object.\n         *\n         * @param {number|string} rawValue The numeric value as understood by Javascript like a `Number`\n         * @param {boolean} saveChangeToHistory If set to `true`, then the change is recorded in the history array, otherwise it is not\n         * @private\n         */\n\n    }, {\n        key: '_setRawValue',\n        value: function _setRawValue(rawValue) {\n            var saveChangeToHistory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            // Update the raw value\n            this.settings.rawValue = rawValue;\n\n            // Change the element style or use the relevant callbacks\n            this._parseStyleRules();\n\n            if (saveChangeToHistory) {\n                // Save in the history the last known raw value and formatted result selection\n                this._historyTableAdd();\n            }\n        }\n\n        /**\n         * Set the given value on the DOM element, without affecting the `rawValue`.\n         * This send an 'autoNumeric:formatted' event if the new value is different than the old one.\n         *\n         * @param {number|string} newElementValue\n         * @returns {AutoNumeric}\n         * @private\n         */\n\n    }, {\n        key: '_setElementValue',\n        value: function _setElementValue(newElementValue) {\n            //TODO Use an internal attribute to track the current value of the element `formattedValue` (like its counterpart `rawValue`). This would allow us to avoid calling `getElementValue` many times\n            // `oldElementValue` is the previous value that will be overwritten. This is used to decide if an event should be sent or not.\n            var oldElementValue = _AutoNumericHelper2.default.getElementValue(this.domElement);\n\n            if (newElementValue !== oldElementValue) {\n                // Only update the value if it's different from the current one\n                _AutoNumericHelper2.default.setElementValue(this.domElement, newElementValue);\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.formatted, this.domElement, { oldValue: oldElementValue, newValue: newElementValue });\n            }\n\n            return this;\n        }\n\n        /**\n         * Set the given value on the DOM element, and the raw value on `this.settings.rawValue`, if both are given.\n         * If only one value is given, then both the DOM element value and the raw value are set with that value.\n         * The third argument `saveChangeToHistory` defines if the change should be recorded in the history array.\n         * Note: if the second argument `rawValue` is a boolean, we consider that is really is the `saveChangeToHistory` argument.\n         *\n         * @param {number|string} newElementValue\n         * @param {number|string|null|boolean} rawValue\n         * @param {boolean} saveChangeToHistory\n         * @returns {AutoNumeric}\n         * @private\n         */\n\n    }, {\n        key: '_setElementAndRawValue',\n        value: function _setElementAndRawValue(newElementValue) {\n            var rawValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            var saveChangeToHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            if (_AutoNumericHelper2.default.isNull(rawValue)) {\n                rawValue = newElementValue;\n            } else if (_AutoNumericHelper2.default.isBoolean(rawValue)) {\n                saveChangeToHistory = rawValue;\n                rawValue = newElementValue;\n            }\n\n            //XXX The order here is important ; the value should first be set on the element, then and only then we should update the raw value\n            // In the `set()` function, we make sure to call `_setRawValue` *after* `setElementValue` so that if `_setRawValue` calls a callback that modify the `rawValue`, then the new value is set correctly (after `setElementValue` briefly set its value first)\n            this._setElementValue(newElementValue);\n            this._setRawValue(rawValue, saveChangeToHistory);\n\n            return this;\n        }\n\n        /**\n         * Alias of the `getNumericString()` function.\n         * Developers should use one of the more explicit function names to get what they want :\n         * - a numeric string : `getNumericString()`\n         * - a formatted string : `getFormatted()`\n         * - a number : `getNumber()`, or\n         * - a localized numeric string : `getLocalized()`\n         *\n         * @usage anElement.get();\n         *\n         * @deprecated\n         * @returns {string}\n         */\n\n    }, {\n        key: 'get',\n        value: function get() {\n            return this.getNumericString();\n        }\n\n        /**\n         * Return the unformatted value as a string.\n         *\n         * @usage anElement.getNumericString();\n         *\n         * @returns {string}\n         */\n\n    }, {\n        key: 'getNumericString',\n        value: function getNumericString() {\n            // Always return a numeric string\n            // The following statement gets rid of the trailing zeros in the decimal places since the current method does not pad decimals\n            return _AutoNumericHelper2.default.trimPaddedZerosFromDecimalPlaces(this.settings.rawValue);\n        }\n\n        /**\n         * Return the current formatted value of the AutoNumeric element as a string\n         *\n         * @usage anElement.getFormatted()\n         *\n         * @returns {string}\n         */\n\n    }, {\n        key: 'getFormatted',\n        value: function getFormatted() {\n            if (!('value' in this.domElement || 'textContent' in this.domElement)) {\n                // Make sure `.value` or `.textContent' exists before trying to access those properties\n                _AutoNumericHelper2.default.throwError('Unable to get the formatted string from the element.');\n            }\n\n            return _AutoNumericHelper2.default.getElementValue(this.domElement);\n        }\n\n        /**\n         * Return the element unformatted value as a real Javascript number.\n         * Warning: This can lead to precision problems with big numbers that should be stored as strings.\n         *\n         * @usage anElement.getNumber()\n         *\n         * @returns {number}\n         */\n\n    }, {\n        key: 'getNumber',\n        value: function getNumber() {\n            var value = this.getNumericString();\n\n            return this.constructor._toLocale(value, 'number');\n        }\n\n        /**\n         * Returns the unformatted value, but following the `outputFormat` setting, which means the output can either be :\n         * - a string (that could or could not represent a number (ie. \"12345,67-\")), or\n         * - a plain number (if the setting 'number' is used).\n         *\n         * By default the returned values are an ISO numeric string \"1234.56\" or \"-1234.56\" where the decimal character is a period.\n         * Check the \"outputFormat\" option definition for more details.\n         *\n         * @usage anElement.getLocalized();\n         *\n         * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n         * @returns {*}\n         */\n\n    }, {\n        key: 'getLocalized',\n        value: function getLocalized() {\n            var forcedOutputFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            var value = void 0;\n            if (_AutoNumericHelper2.default.isEmptyString(this.settings.rawValue)) {\n                value = '';\n            } else {\n                // Here I use `this.settings.rawValue` instead of `this.getNumericString()` since the current input value could be unformatted with a localization (ie. '1234567,89-').\n                // I also convert the rawValue to a number, then back to a string in order to drop the decimal part if the rawValue is an integer.\n                value = '' + Number(this.settings.rawValue);\n            }\n\n            if (value !== '' && Number(value) === 0 && this.settings.leadingZero !== AutoNumeric.options.leadingZero.keep) {\n                value = '0';\n            }\n\n            var outputFormatToUse = void 0;\n            if (_AutoNumericHelper2.default.isNull(forcedOutputFormat)) {\n                outputFormatToUse = this.settings.outputFormat;\n            } else {\n                outputFormatToUse = forcedOutputFormat;\n            }\n\n            return this.constructor._toLocale(value, outputFormatToUse);\n        }\n\n        /**\n         * Force the element to reformat its value again (just in case the formatting has been lost).\n         * This can be used right after a form submission for instance (after a previous call to `unformat`).\n         *\n         * @example anElement.reformat()\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'reformat',\n        value: function reformat() {\n            // `this.settings.rawValue` is used instead of `this.domElement.value` because when the content is `unformatLocalized`, it can become a string that cannot be converted to a number easily\n            this.set(this.settings.rawValue);\n\n            return this;\n        }\n\n        /**\n         * Remove the formatting and keep only the raw unformatted value in the element (as a numericString)\n         * Note: this is loosely based on the previous 'unSet()' function\n         *\n         * By default, values are returned as ISO numeric strings (ie. \"1234.56\" or \"-1234.56\"), where the decimal character is a period.\n         * @example anElement.unformat()\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'unformat',\n        value: function unformat() {\n            this._setElementValue(this.getNumericString());\n\n            return this;\n        }\n\n        /**\n         * Remove the formatting and keep only the localized unformatted value in the element, with the option to override the default outputFormat if needed\n         *\n         * Locale formats are supported \"1234.56-\" or \"1234,56\" or \"-1234,56 or \"1234,56-\", or even plain numbers.\n         * Take a look at the `outputFormat` option definition in the default settings for more details.\n         *\n         * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'unformatLocalized',\n        value: function unformatLocalized() {\n            var forcedOutputFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._setElementValue(this.getLocalized(forcedOutputFormat));\n\n            return this;\n        }\n\n        /**\n         * Return `true` if the current value is the same as when the element got initialized.\n         * Note: By default, this returns `true` if the raw unformatted value is still the same even if the formatted one has changed (due to a configuration update for instance).\n         * In order to test if the formatted value is the same (which means neither the raw value nor the settings have been changed), then you must pass `false` as its argument.\n         *\n         * @param {boolean} checkOnlyRawValue If set to `true`, the pristine value is done on the raw unformatted value, not the formatted one.  If set to `false`, this also checks that the formatted value hasn't changed.\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isPristine',\n        value: function isPristine() {\n            var checkOnlyRawValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            var result = void 0;\n            if (checkOnlyRawValue) {\n                result = this.initialValue === this.getNumericString();\n            } else {\n                result = this.initialValueHtmlAttribute === this.getFormatted();\n            }\n\n            return result;\n        }\n\n        /**\n         * Select the formatted element content, based on the `selectNumberOnly` option\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'select',\n        value: function select() {\n            if (this.settings.selectNumberOnly) {\n                this.selectNumber();\n            } else {\n                this._defaultSelectAll();\n            }\n\n            return this;\n        }\n\n        /**\n         * Select the whole element content (including the currency symbol).\n         * @private\n         */\n\n    }, {\n        key: '_defaultSelectAll',\n        value: function _defaultSelectAll() {\n            _AutoNumericHelper2.default.setElementSelection(this.domElement, 0, _AutoNumericHelper2.default.getElementValue(this.domElement).length);\n        }\n\n        /**\n         * Select only the numbers in the formatted element content, leaving out the currency symbol, whatever the value of the `selectNumberOnly` option\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'selectNumber',\n        value: function selectNumber() {\n            //TODO Make sure the selection is ok when showPositiveSign is set to `true` (select the negative sign, but not the positive one)\n            var unformattedValue = _AutoNumericHelper2.default.getElementValue(this.domElement);\n            var valueLen = unformattedValue.length;\n            var currencySymbolSize = this.settings.currencySymbol.length;\n            var currencySymbolPlacement = this.settings.currencySymbolPlacement;\n            var negLen = !_AutoNumericHelper2.default.isNegative(unformattedValue) ? 0 : 1;\n            var suffixTextLen = this.settings.suffixText.length;\n            var negativePositiveSignPlacement = this.settings.negativePositiveSignPlacement;\n\n            var start = void 0;\n            if (currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                start = 0;\n            } else if (negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.left && negLen === 1 && currencySymbolSize > 0) {\n                start = currencySymbolSize + 1;\n            } else {\n                start = currencySymbolSize;\n            }\n\n            var end = void 0;\n            if (currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix) {\n                end = valueLen - suffixTextLen;\n            } else {\n                switch (negativePositiveSignPlacement) {\n                    case AutoNumeric.options.negativePositiveSignPlacement.left:\n                        end = valueLen - (suffixTextLen + currencySymbolSize);\n                        break;\n                    case AutoNumeric.options.negativePositiveSignPlacement.right:\n                        if (currencySymbolSize > 0) {\n                            end = valueLen - (currencySymbolSize + negLen + suffixTextLen);\n                        } else {\n                            end = valueLen - (currencySymbolSize + suffixTextLen);\n                        }\n                        break;\n                    default:\n                        end = valueLen - (currencySymbolSize + suffixTextLen);\n                }\n            }\n\n            _AutoNumericHelper2.default.setElementSelection(this.domElement, start, end);\n\n            return this;\n        }\n\n        /**\n         * Select only the integer part in the formatted element content, whatever the value of `selectNumberOnly`\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'selectInteger',\n        value: function selectInteger() {\n            var start = 0;\n            var isPositive = this.settings.rawValue >= 0;\n\n            // Negative or positive sign, if any\n            if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix || this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix && (this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.prefix || this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.none)) {\n                if (this.settings.showPositiveSign && isPositive || // This only exclude the positive sign from being selected\n                !isPositive && this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.left) {\n                    // And this exclude the negative sign from being selected in this special case : '-€ 1.234,57suffixText'\n                    start = start + 1;\n                }\n            }\n\n            // Currency symbol\n            if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix) {\n                start = start + this.settings.currencySymbol.length;\n            }\n\n            // Calculate the selection end position\n            var elementValue = _AutoNumericHelper2.default.getElementValue(this.domElement);\n            var end = elementValue.indexOf(this.settings.decimalCharacter);\n            if (end === -1) {\n                // No decimal character found\n                if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                    end = elementValue.length - this.settings.currencySymbol.length;\n                } else {\n                    end = elementValue.length;\n                }\n\n                // Trailing negative sign\n                if (!isPositive && (this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.suffix || this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix)) {\n                    end = end - 1;\n                }\n\n                // Avoid selecting the suffix test\n                end = end - this.settings.suffixText.length;\n            }\n\n            _AutoNumericHelper2.default.setElementSelection(this.domElement, start, end);\n\n            return this;\n        }\n\n        /**\n         * Select only the decimal part in the formatted element content, whatever the value of `selectNumberOnly`\n         * Multiple cases are possible :\n         * +1.234,57suffixText\n         *\n         * € +1.234,57suffixText\n         * +€ 1.234,57suffixText\n         * € 1.234,57+suffixText\n         *\n         * 1.234,57+ €suffixText\n         * 1.234,57 €+suffixText\n         * +1.234,57 €suffixText\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'selectDecimal',\n        value: function selectDecimal() {\n            var start = _AutoNumericHelper2.default.getElementValue(this.domElement).indexOf(this.settings.decimalCharacter);\n            var end = void 0;\n\n            if (start === -1) {\n                // The decimal character has not been found, we deselect all\n                start = 0;\n                end = 0;\n            } else {\n                // A decimal character has been found\n                start = start + 1; // We add 1 to exclude the decimal character from the selection\n\n                var decimalCount = void 0;\n                if (this.settings.decimalPlacesShownOnFocus === null || this.settings.decimalPlacesShownOnFocus !== null && !this.isFocused) {\n                    decimalCount = this.settings.decimalPlacesOverride;\n                } else {\n                    decimalCount = this.settings.decimalPlacesShownOnFocus;\n                }\n\n                end = start + Number(decimalCount);\n            }\n\n            _AutoNumericHelper2.default.setElementSelection(this.domElement, start, end);\n\n            return this;\n        }\n\n        /**\n         * Return the DOM element reference of the autoNumeric-managed element\n         *\n         * @returns {HTMLElement|HTMLInputElement}\n         */\n\n    }, {\n        key: 'node',\n        value: function node() {\n            return this.domElement;\n        }\n\n        /**\n         * Return the DOM element reference of the parent node of the autoNumeric-managed element\n         *\n         * @returns {HTMLElement|HTMLInputElement|Node}\n         */\n\n    }, {\n        key: 'parent',\n        value: function parent() {\n            return this.domElement.parentNode;\n        }\n\n        /**\n         * Detach the current AutoNumeric element from the shared local 'init' list.\n         * This means any changes made on that local shared list will not be transmitted to that element anymore.\n         * Note : The user can provide another AutoNumeric element, and detach this one instead of the current one.\n         *\n         * @param {AutoNumeric} otherAnElement\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'detach',\n        value: function detach() {\n            var otherAnElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            //FIXME à tester\n            var domElementToDetach = void 0;\n            if (!_AutoNumericHelper2.default.isNull(otherAnElement)) {\n                domElementToDetach = otherAnElement.node();\n            } else {\n                domElementToDetach = this.domElement;\n            }\n\n            this._removeFromLocalList(domElementToDetach); //FIXME What happens if the selected dom element does not exist in the list?\n\n            return this;\n        }\n\n        /**\n         * Attach the given AutoNumeric element to the shared local 'init' list.\n         * When doing that, by default the DOM content is left untouched.\n         * The user can force a reformat with the new shared list options by passing a second argument to `true`.\n         *\n         * @param {AutoNumeric} otherAnElement\n         * @param {boolean} reFormat\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'attach',\n        value: function attach(otherAnElement) {\n            var reFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            //FIXME à tester\n            this._addToLocalList(otherAnElement.node()); //FIXME Should we make sure the element is not already in the list?\n            if (reFormat) {\n                otherAnElement.update(this.settings);\n            }\n\n            return this;\n        }\n\n        /**\n         * Format and return the given value, or set the formatted value into the given DOM element if one is passed as an argument.\n         * By default, this use the current element settings.\n         * The user can override any option of its choosing by passing an option object.\n         *\n         * @param {number|HTMLElement|HTMLInputElement} valueOrElement\n         * @param {null|object} optionOverride\n         * @returns {string|null}\n         */\n\n    }, {\n        key: 'formatOther',\n        value: function formatOther(valueOrElement) {\n            var optionOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            return this._formatOrUnformatOther(true, valueOrElement, optionOverride);\n        }\n\n        /**\n         * Unformat and return the raw numeric string corresponding to the given value, or directly set the unformatted value into the given DOM element if one is passed as an argument.\n         * By default, this use the current element settings.\n         * The user can override any option of its choosing by passing an option object.\n          * @param {string|HTMLElement|HTMLInputElement} stringOrElement\n         * @param {null|object} optionOverride\n         * @returns {string|null}\n         */\n\n    }, {\n        key: 'unformatOther',\n        value: function unformatOther(stringOrElement) {\n            var optionOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            return this._formatOrUnformatOther(false, stringOrElement, optionOverride);\n        }\n\n        /**\n         * Method that either format or unformat the value of another element.\n         *\n         * - Format and return the given value, or set the formatted value into the given DOM element if one is passed as an argument.\n         * - Unformat and return the raw numeric string corresponding to the given value, or directly set the unformatted value into the given DOM element if one is passed as an argument.\n         *\n         * By default, this use the current element settings.\n         * The user can override any option of its choosing by passing an option object.\n         *\n         * @param {boolean} isFormatting If set to `true`, then the method formats, otherwise if set to `false`, it unformats\n         * @param {number|string|HTMLElement|HTMLInputElement} valueOrStringOrElement\n         * @param {null|object} optionOverride\n         * @returns {string|null}\n         * @private\n         */\n\n    }, {\n        key: '_formatOrUnformatOther',\n        value: function _formatOrUnformatOther(isFormatting, valueOrStringOrElement) {\n            var optionOverride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n            //FIXME à tester\n            // If the user wants to override the current element settings temporarily\n            var settingsToUse = void 0;\n            if (!_AutoNumericHelper2.default.isNull(optionOverride)) {\n                settingsToUse = this._cloneAndMergeSettings(optionOverride);\n            } else {\n                settingsToUse = this.settings;\n            }\n\n            // Then the unformatting is done...\n            var result = void 0;\n            if (_AutoNumericHelper2.default.isElement(valueOrStringOrElement)) {\n                // ...either directly on the DOM element value\n                var elementValue = _AutoNumericHelper2.default.getElementValue(valueOrStringOrElement);\n                if (isFormatting) {\n                    result = AutoNumeric.format(elementValue, settingsToUse);\n                } else {\n                    result = AutoNumeric.unformat(elementValue, settingsToUse);\n                }\n\n                _AutoNumericHelper2.default.setElementValue(valueOrStringOrElement, result); //TODO Use `unformatAndSet` and `formatAndSet`instead\n\n                return null;\n            }\n\n            // ...or on the given value\n            if (isFormatting) {\n                result = AutoNumeric.format(valueOrStringOrElement, settingsToUse);\n            } else {\n                result = AutoNumeric.unformat(valueOrStringOrElement, settingsToUse);\n            }\n\n            return result;\n        }\n\n        /**\n         * Use the current AutoNumeric element settings to initialize the DOM element(s) given as a parameter.\n         * Doing so will *link* the AutoNumeric elements together since they will share the same local AutoNumeric element list.\n         * (cf. prototype pattern : https://en.wikipedia.org/wiki/Prototype_pattern)\n         *\n         * You can `init` either a single DOM element (in that case an AutoNumeric object will be returned), or an array of DOM elements or a string that will be used as a CSS selector. In the latter cases, an array of AutoNumeric objects will then be returned (or an empty array if nothing gets selected by the CSS selector).\n         *\n         * Use case : Once you have an AutoNumeric element already setup correctly with the right options, you can use it as many times you want to initialize as many other DOM elements as needed.\n         * Note : this works only on elements that can be managed by autoNumeric.\n         *\n         * @param {HTMLElement|HTMLInputElement|Array<HTMLElement|HTMLInputElement>|string} domElementOrArrayOrString\n         * @param {boolean} attached If set to `false`, then the newly generated AutoNumeric element will not share the same local element list\n         * @returns {AutoNumeric|[AutoNumeric]}\n         */\n\n    }, {\n        key: 'init',\n        value: function init(domElementOrArrayOrString) {\n            var _this4 = this;\n\n            var attached = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            var returnASingleAutoNumericObject = false; // By default, this function returns an array of AutoNumeric objects\n            var domElementsArray = [];\n            if (_AutoNumericHelper2.default.isString(domElementOrArrayOrString)) {\n                domElementsArray = [].concat(_toConsumableArray(document.querySelectorAll(domElementOrArrayOrString))); // Convert a NodeList to an Array\n            } else if (_AutoNumericHelper2.default.isElement(domElementOrArrayOrString)) {\n                domElementsArray.push(domElementOrArrayOrString);\n                returnASingleAutoNumericObject = true; // Special case when only one DOM element is passed as a parameter\n            } else if (_AutoNumericHelper2.default.isArray(domElementOrArrayOrString)) {\n                domElementsArray = domElementOrArrayOrString;\n            } else {\n                _AutoNumericHelper2.default.throwError('The given parameters to the \\'init\\' function are invalid.');\n            }\n\n            if (domElementsArray.length === 0) {\n                _AutoNumericHelper2.default.warning('No valid DOM elements were given hence no AutoNumeric object were instantiated.');\n                return [];\n            }\n\n            var currentLocalList = this._getLocalList();\n            var autoNumericObjectsArray = [];\n\n            // Instantiate (and link depending on `attached`) each AutoNumeric objects\n            domElementsArray.forEach(function (domElement) {\n                // Initialize the new AutoNumeric element\n                var originalCreateLocalListSetting = _this4.settings.createLocalList;\n                if (attached) {\n                    // Temporary variable to know if we should create the local list during the initialization (since we'll remove it afterwards)\n                    _this4.settings.createLocalList = false;\n                }\n\n                var newAutoNumericElement = new AutoNumeric(domElement, _AutoNumericHelper2.default.getElementValue(domElement), _this4.settings);\n\n                // Set the common shared local list if needed\n                // If the user wants to create a detached new AutoNumeric element, then skip the following step that bind the two elements together by default\n                if (attached) {\n                    // 1) Set the local list reference to point to the initializer's one\n                    newAutoNumericElement._setLocalList(currentLocalList);\n\n                    // 2) Add the new element to that existing list\n                    _this4._addToLocalList(domElement, newAutoNumericElement); // Here we use the *new* AutoNumeric object reference to add to the local list, since we'll need the reference to `this` in the methods to points to that new AutoNumeric object.\n                    _this4.settings.createLocalList = originalCreateLocalListSetting;\n                }\n\n                autoNumericObjectsArray.push(newAutoNumericElement);\n            });\n\n            if (returnASingleAutoNumericObject) {\n                // If a single DOM element was used as the parameter, then we return an AutoNumeric object directly\n                return autoNumericObjectsArray[0];\n            }\n\n            // ...otherwise we return an Array of AutoNumeric objects\n            return autoNumericObjectsArray;\n        }\n\n        /**\n         * Reset the element value either to the empty string '', or the currency sign, depending on the `emptyInputBehavior` option value.\n         * If you set the `forceClearAll` argument to `true`, then the `emptyInputBehavior` option is overridden and the whole input is clear, including any currency sign.\n         *\n         * @param {boolean} forceClearAll\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'clear',\n        value: function clear() {\n            var forceClearAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (forceClearAll) {\n                var temporaryForcedOptions = {\n                    emptyInputBehavior: AutoNumeric.options.emptyInputBehavior.focus\n                };\n                this.set('', temporaryForcedOptions);\n            } else {\n                this.set('');\n            }\n\n            return this;\n        }\n\n        /**\n         * Remove the autoNumeric data and event listeners from the element, but keep the element content intact.\n         * This also clears the value from sessionStorage (or cookie, depending on browser supports).\n         * Note: this does not remove the formatting.\n         *\n         * @example anElement.remove()\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove() {\n            this._saveValueToPersistentStorage('remove');\n            this._removeEventListeners();\n\n            // Also remove the element from the local AutoNumeric list\n            this._removeFromLocalList(this.domElement);\n            // Also remove the element from the global AutoNumeric list\n            this.constructor._removeFromGlobalList(this);\n        }\n\n        /**\n         * Remove the autoNumeric data and event listeners from the element, and reset its value to the empty string ''.\n         * This also clears the value from sessionStorage (or cookie, depending on browser supports).\n         *\n         * @example anElement.wipe()\n         */\n\n    }, {\n        key: 'wipe',\n        value: function wipe() {\n            this._setElementValue('');\n            this.remove();\n        }\n\n        /**\n         * Remove the autoNumeric data and event listeners from the element, and delete the DOM element altogether\n         */\n\n    }, {\n        key: 'nuke',\n        value: function nuke() {\n            this.remove();\n            // Remove the element from the DOM\n            this.domElement.parentNode.removeChild(this.domElement);\n        }\n\n        // Special functions that really work on the parent <form> element, instead of the <input> element itself\n\n        /**\n         * Return a reference to the parent <form> element if it exists, otherwise return `null`\n         *\n         * @returns {HTMLFormElement|null}\n         */\n\n    }, {\n        key: 'form',\n        value: function form() {\n            //TODO Store a reference to the parent <form> in `this.form` so we do not have to search it on each call?\n            if (this.domElement.tagName.toLowerCase() === 'body') {\n                return null;\n            }\n\n            var node = this.domElement;\n            var tagName = void 0;\n            do {\n                node = node.parentNode;\n                if (_AutoNumericHelper2.default.isNull(node)) {\n                    // Special case when using templates with frameworks like Vue.js, where the input element can be 'detached' when initializing the DOM structure\n                    return null;\n                }\n\n                tagName = node.tagName.toLowerCase();\n\n                if (tagName === 'body') {\n                    break;\n                }\n            } while (tagName !== 'form');\n\n            if (tagName === 'form') {\n                return node;\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Return a string in standard URL-encoded notation with the form input values being unformatted.\n         * This string can be used as a query for instance.\n         *\n         * @returns {string}\n         */\n\n    }, {\n        key: 'formNumericString',\n        value: function formNumericString() {\n            return this.constructor._serializeNumericString(this.form(), this.settings.serializeSpaces);\n        }\n\n        /**\n         * Return a string in standard URL-encoded notation with the form input values being formatted.\n         *\n         * @returns {string}\n         */\n\n    }, {\n        key: 'formFormatted',\n        value: function formFormatted() {\n            return this.constructor._serializeFormatted(this.form(), this.settings.serializeSpaces);\n        }\n\n        /**\n         * Return a string in standard URL-encoded notation with the form input values, with localized values.\n         * The default output format can be overridden by passing the option as a parameter.\n         *\n         * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n         * @returns {string}\n         */\n\n    }, {\n        key: 'formLocalized',\n        value: function formLocalized() {\n            var forcedOutputFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            var outputFormatToUse = void 0;\n            if (_AutoNumericHelper2.default.isNull(forcedOutputFormat)) {\n                outputFormatToUse = this.settings.outputFormat;\n            } else {\n                outputFormatToUse = forcedOutputFormat;\n            }\n\n            return this.constructor._serializeLocalized(this.form(), this.settings.serializeSpaces, outputFormatToUse);\n        }\n\n        /**\n         * Return an array containing an object for each form <input> element.\n         * Those objects are of the following structure `{ name: foo, value: '42' }`, where the `name` is the DOM element name, and the `value` is an unformatted numeric string.\n         *\n         * @returns {Array}\n         */\n\n    }, {\n        key: 'formArrayNumericString',\n        value: function formArrayNumericString() {\n            return this.constructor._serializeNumericStringArray(this.form(), this.settings.serializeSpaces);\n        }\n\n        /**\n         * Return an array containing an object for each form <input> element.\n         * Those objects are of the following structure `{ name: foo, value: '42' }`, where the `name` is the DOM element name, and the `value` is the formatted string.\n         *\n         * @returns {Array}\n         */\n\n    }, {\n        key: 'formArrayFormatted',\n        value: function formArrayFormatted() {\n            return this.constructor._serializeFormattedArray(this.form(), this.settings.serializeSpaces);\n        }\n\n        /**\n         * Return an array containing an object for each form <input> element.\n         * Those objects are of the following structure `{ name: foo, value: '42' }`, where the `name` is the DOM element name, and the `value` is the localized numeric string.\n         *\n         * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n         * @returns {Array}\n         */\n\n    }, {\n        key: 'formArrayLocalized',\n        value: function formArrayLocalized() {\n            var forcedOutputFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            var outputFormatToUse = void 0;\n            if (_AutoNumericHelper2.default.isNull(forcedOutputFormat)) {\n                outputFormatToUse = this.settings.outputFormat;\n            } else {\n                outputFormatToUse = forcedOutputFormat;\n            }\n\n            return this.constructor._serializeLocalizedArray(this.form(), this.settings.serializeSpaces, outputFormatToUse);\n        }\n\n        /**\n         * Return a JSON string containing an object representing the form input values.\n         * This is based on the result of the `formArrayNumericString()` function.\n         *\n         * @returns {string}\n         */\n\n    }, {\n        key: 'formJsonNumericString',\n        value: function formJsonNumericString() {\n            return JSON.stringify(this.formArrayNumericString());\n        }\n\n        /**\n         * Return a JSON string containing an object representing the form input values.\n         * This is based on the result of the `formArrayFormatted()` function.\n         *\n         * @returns {string}\n         */\n\n    }, {\n        key: 'formJsonFormatted',\n        value: function formJsonFormatted() {\n            return JSON.stringify(this.formArrayFormatted());\n        }\n\n        /**\n         * Return a JSON string containing an object representing the form input values.\n         * This is based on the result of the `formArrayLocalized()` function.\n         *\n         * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n         * @returns {string}\n         */\n\n    }, {\n        key: 'formJsonLocalized',\n        value: function formJsonLocalized() {\n            var forcedOutputFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            return JSON.stringify(this.formArrayLocalized(forcedOutputFormat));\n        }\n\n        /**\n         * Unformat all the autoNumeric-managed elements that are a child of the parent <form> element of this DOM element, to numeric strings\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formUnformat',\n        value: function formUnformat() {\n            //FIXME à tester\n            var inputs = this.constructor._getChildANInputElement(this.form());\n            inputs.forEach(function (input) {\n                AutoNumeric.getAutoNumericElement(input).unformat();\n            });\n\n            return this;\n        }\n\n        /**\n         * Unformat all the autoNumeric-managed elements that are a child of the parent <form> element of this DOM element, to localized strings\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formUnformatLocalized',\n        value: function formUnformatLocalized() {\n            //FIXME à tester\n            var inputs = this.constructor._getChildANInputElement(this.form());\n            inputs.forEach(function (input) {\n                AutoNumeric.getAutoNumericElement(input).unformatLocalized();\n            });\n\n            return this;\n        }\n\n        /**\n         * Reformat all the autoNumeric-managed elements that are a child of the parent <form> element of this DOM element\n         *\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formReformat',\n        value: function formReformat() {\n            //FIXME à tester\n            var inputs = this.constructor._getChildANInputElement(this.form());\n            inputs.forEach(function (input) {\n                AutoNumeric.getAutoNumericElement(input).reformat();\n            });\n\n            return this;\n        }\n\n        /**\n         * Convert the input values to numeric strings, submit the form, then reformat those back.\n         * The function can either take a callback, or not. If it doesn't, the default `form.submit()` function will be called.\n         * Otherwise, it runs `callback(value)` with `value` being equal to the result of `formNumericString()`.\n         *\n         * @param {function|null} callback\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitNumericString',\n        value: function formSubmitNumericString() {\n            var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isNull(callback)) {\n                this.formUnformat();\n                this.form().submit();\n                this.formReformat();\n            } else if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formNumericString());\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Submit the form with the current formatted values.\n         * The function can either take a callback, or not. If it doesn't, the default `form.submit()` function will be called.\n         * Otherwise, it runs `callback(value)` with `value` being equal to the result of `formFormatted()`.\n         *\n         * @param {function|null} callback\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitFormatted',\n        value: function formSubmitFormatted() {\n            var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isNull(callback)) {\n                this.form().submit();\n            } else if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formFormatted());\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Convert the input values to localized strings, submit the form, then reformat those back.\n         * The function can either take a callback, or not. If it doesn't, the default `form.submit()` function will be called.\n         * Otherwise, it runs `callback(value)` with `value` being equal to the result of `formLocalized()`.\n         *\n         * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n         * @param {function|null} callback\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitLocalized',\n        value: function formSubmitLocalized() {\n            var forcedOutputFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isNull(callback)) {\n                this.formUnformatLocalized();\n                this.form().submit();\n                this.formReformat();\n            } else if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formLocalized(forcedOutputFormat));\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Generate an array of numeric strings from the `<input>` elements, and pass it to the given callback.\n         * Under the hood, the array is generated via a call to `formArrayNumericString()`.\n         *\n         * @param {function} callback\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitArrayNumericString',\n        value: function formSubmitArrayNumericString(callback) {\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formArrayNumericString());\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Generate an array of the current formatted values from the `<input>` elements, and pass it to the given callback.\n         * Under the hood, the array is generated via a call to `formArrayFormatted()`.\n         *\n         * @param {function} callback\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitArrayFormatted',\n        value: function formSubmitArrayFormatted(callback) {\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formArrayFormatted());\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Generate an array of localized strings from the `<input>` elements, and pass it to the given callback.\n         * Under the hood, the array is generated via a call to `formArrayLocalized()`.\n         *\n         * @param {function} callback\n         * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitArrayLocalized',\n        value: function formSubmitArrayLocalized(callback) {\n            var forcedOutputFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formArrayLocalized(forcedOutputFormat));\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Generate a JSON string with the numeric strings values from the `<input>` elements, and pass it to the given callback.\n         * Under the hood, the array is generated via a call to `formJsonNumericString()`.\n         *\n         * @param {function} callback\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitJsonNumericString',\n        value: function formSubmitJsonNumericString(callback) {\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formJsonNumericString());\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Generate a JSON string with the current formatted values from the `<input>` elements, and pass it to the given callback.\n         * Under the hood, the array is generated via a call to `formJsonFormatted()`.\n         *\n         * @param {function} callback\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitJsonFormatted',\n        value: function formSubmitJsonFormatted(callback) {\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formJsonFormatted());\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Generate a JSON string with the localized strings values from the `<input>` elements, and pass it to the given callback.\n         * Under the hood, the array is generated via a call to `formJsonLocalized()`.\n         *\n         * @param {function} callback\n         * @param {null|string} forcedOutputFormat If set to something different than `null`, then this is used as an overriding outputFormat option\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'formSubmitJsonLocalized',\n        value: function formSubmitJsonLocalized(callback) {\n            var forcedOutputFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isFunction(callback)) {\n                callback(this.formJsonLocalized(forcedOutputFormat));\n            } else {\n                _AutoNumericHelper2.default.throwError('The given callback is not a function.');\n            }\n\n            return this;\n        }\n\n        /**\n         * Unformat the given AutoNumeric element, and update the `hoveredWithAlt` variable.\n         *\n         * @param {AutoNumeric} anElement\n         * @private\n         */\n\n    }, {\n        key: '_createLocalList',\n\n\n        /**\n         * Create a `Map` that will stores all the autoNumeric elements that are initialized from this current element.\n         * @private\n         */\n        value: function _createLocalList() {\n            this.autoNumericLocalList = new Map();\n            this._addToLocalList(this.domElement);\n        }\n\n        /**\n         * In some rare cases, you could want to delete the local list generated during the element initialization (in order to use another one instead for instance).\n         * @private\n         */\n\n    }, {\n        key: '_deleteLocalList',\n        value: function _deleteLocalList() {\n            delete this.autoNumericLocalList;\n        }\n\n        /**\n         * Set the local list with the given Map object.\n         *\n         * @param {Map} localList\n         * @private\n         */\n\n    }, {\n        key: '_setLocalList',\n        value: function _setLocalList(localList) {\n            this.autoNumericLocalList = localList;\n        }\n\n        /**\n         * Return the local list Map object.\n         *\n         * @returns {*|Map}\n         * @private\n         */\n\n    }, {\n        key: '_getLocalList',\n        value: function _getLocalList() {\n            return this.autoNumericLocalList;\n        }\n\n        /**\n         * Return `true` is the AutoNumeric object has a local list defined already and has at least one element in it (itself usually).\n         *\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_hasLocalList',\n        value: function _hasLocalList() {\n            return this.autoNumericLocalList instanceof Map && this.autoNumericLocalList.size !== 0;\n        }\n\n        /**\n         * Add the given object to the local autoNumeric element list.\n         * Note: in order to keep a coherent list, we only add DOM elements in it, not the autoNumeric object.\n         *\n         * @param {HTMLElement|HTMLInputElement} domElement\n         * @param {AutoNumeric} autoNumericObject A reference to the AutoNumeric object that manage the given DOM element\n         * @throws\n         * @private\n         */\n\n    }, {\n        key: '_addToLocalList',\n        value: function _addToLocalList(domElement) {\n            var autoNumericObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (_AutoNumericHelper2.default.isNull(autoNumericObject)) {\n                autoNumericObject = this;\n            }\n\n            if (!_AutoNumericHelper2.default.isUndefined(this.autoNumericLocalList)) {\n                this.autoNumericLocalList.set(domElement, autoNumericObject); // Use the DOM element as key, and the AutoNumeric object as the value\n            } else {\n                _AutoNumericHelper2.default.throwError('The local list provided does not exists when trying to add an element. [' + this.autoNumericLocalList + '] given.');\n            }\n        }\n\n        /**\n         * Remove the given object from the local autoNumeric element list.\n         *\n         * @param {HTMLElement|HTMLInputElement} domElement\n         * @private\n         */\n\n    }, {\n        key: '_removeFromLocalList',\n        value: function _removeFromLocalList(domElement) {\n            if (!_AutoNumericHelper2.default.isUndefined(this.autoNumericLocalList)) {\n                this.autoNumericLocalList.delete(domElement);\n            } else if (this.settings.createLocalList) {\n                _AutoNumericHelper2.default.throwError('The local list provided does not exists when trying to remove an element. [' + this.autoNumericLocalList + '] given.');\n            }\n        }\n\n        /**\n         * Merge the `newSettings` given as parameters into the current element settings.\n         *\n         * WARNING: Using `Object.assign()` here means the merge is not recursive and only one depth is merged.\n         * cf. http://stackoverflow.com/a/39188108/2834898\n         * cf. tests on http://codepen.io/AnotherLinuxUser/pen/KaJORq?editors=0011\n         *\n         * @param {object} newSettings\n         * @private\n         */\n\n    }, {\n        key: '_mergeSettings',\n        value: function _mergeSettings() {\n            for (var _len3 = arguments.length, newSettings = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                newSettings[_key3] = arguments[_key3];\n            }\n\n            _extends.apply(undefined, [this.settings].concat(newSettings));\n        }\n\n        /**\n         * Return a new object with the current element settings merged with the new settings.\n         *\n         * @param {object} newSettings\n         * @returns {object}\n         * @private\n         */\n\n    }, {\n        key: '_cloneAndMergeSettings',\n        value: function _cloneAndMergeSettings() {\n            var result = {};\n\n            for (var _len4 = arguments.length, newSettings = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                newSettings[_key4] = arguments[_key4];\n            }\n\n            _extends.apply(undefined, [result, this.settings].concat(newSettings));\n\n            return result;\n        }\n\n        /**\n         * Validate the given option object.\n         * If the options are valid, this function returns nothing, otherwise if the options are invalid, this function throws an error.\n         *\n         * This tests if the options are not conflicting and are well formatted.\n         * This function is lenient since it only tests the settings properties ; it ignores any other properties the options object could have.\n         *\n         * @param {*} userOptions\n         * @param {Boolean} shouldExtendDefaultOptions If `true`, then this function will extends the `userOptions` passed by the user, with the default options.\n         * @param {object|null} originalOptions The user can pass the original options (and not the one that are generated from the default settings and the various usability corrections), in order to add compatibility and conflicts checks.\n         * @throws Error This throws if the `userOptions` are not valid\n         */\n\n    }, {\n        key: '_updatePredefinedOptions',\n\n\n        // Pre-defined options can be called to update the current default options with their specificities\n        //XXX A better way would be to not initialize first, but that's not possible since `new` is called first and we do not pass the language options (ie. `French`) to the constructor\n\n        /**\n         * Update the AutoNumeric object with the predefined options, and possibly some option overrides.\n         *\n         * @param {object} predefinedOption\n         * @param {object} optionOverride\n         * @private\n         * @returns {AutoNumeric}\n         */\n        value: function _updatePredefinedOptions(predefinedOption) {\n            var optionOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (!_AutoNumericHelper2.default.isNull(optionOverride)) {\n                this._mergeSettings(predefinedOption, optionOverride);\n                this.update(this.settings);\n            } else {\n                this.update(predefinedOption);\n            }\n\n            return this;\n        }\n\n        /**\n         * Update the settings to use the French pre-defined language options.\n         * Those pre-defined options can be overridden by passing an option object as a parameter.\n         *\n         * @param {object} optionOverride\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'french',\n        value: function french() {\n            var optionOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._updatePredefinedOptions(AutoNumeric.getPredefinedOptions().French, optionOverride);\n\n            return this;\n        }\n\n        /**\n         * Update the settings to use the North American pre-defined language options.\n         * Those pre-defined options can be overridden by passing an option object as a parameter.\n         *\n         * @param {object} optionOverride\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'northAmerican',\n        value: function northAmerican() {\n            var optionOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._updatePredefinedOptions(AutoNumeric.getPredefinedOptions().NorthAmerican, optionOverride);\n\n            return this;\n        }\n\n        /**\n         * Update the settings to use the British pre-defined language options.\n         * Those pre-defined options can be overridden by passing an option object as a parameter.\n         *\n         * @param {object} optionOverride\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'british',\n        value: function british() {\n            var optionOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._updatePredefinedOptions(AutoNumeric.getPredefinedOptions().British, optionOverride);\n\n            return this;\n        }\n\n        /**\n         * Update the settings to use the Swiss pre-defined language options.\n         * Those pre-defined options can be overridden by passing an option object as a parameter.\n         *\n         * @param {object} optionOverride\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'swiss',\n        value: function swiss() {\n            var optionOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._updatePredefinedOptions(AutoNumeric.getPredefinedOptions().Swiss, optionOverride);\n\n            return this;\n        }\n\n        /**\n         * Update the settings to use the Japanese pre-defined language options.\n         * Those pre-defined options can be overridden by passing an option object as a parameter.\n         *\n         * @param {object} optionOverride\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'japanese',\n        value: function japanese() {\n            var optionOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._updatePredefinedOptions(AutoNumeric.getPredefinedOptions().Japanese, optionOverride);\n\n            return this;\n        }\n\n        /**\n         * Update the settings to use the Spanish pre-defined language options.\n         * Those pre-defined options can be overridden by passing an option object as a parameter.\n         *\n         * @param {object} optionOverride\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'spanish',\n        value: function spanish() {\n            var optionOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._updatePredefinedOptions(AutoNumeric.getPredefinedOptions().Spanish, optionOverride);\n\n            return this;\n        }\n\n        /**\n         * Update the settings to use the Chinese pre-defined language options.\n         * Those pre-defined options can be overridden by passing an option object as a parameter.\n         *\n         * @param {object} optionOverride\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'chinese',\n        value: function chinese() {\n            var optionOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._updatePredefinedOptions(AutoNumeric.getPredefinedOptions().Chinese, optionOverride);\n\n            return this;\n        }\n\n        /**\n         * Update the settings to use the Brazilian pre-defined language options.\n         * Those pre-defined options can be overridden by passing an option object as a parameter.\n         *\n         * @param {object} optionOverride\n         * @returns {AutoNumeric}\n         */\n\n    }, {\n        key: 'brazilian',\n        value: function brazilian() {\n            var optionOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            this._updatePredefinedOptions(AutoNumeric.getPredefinedOptions().Brazilian, optionOverride);\n\n            return this;\n        }\n\n        // Internal private functions\n        /**\n         * Run any callbacks found in the settings object in order to set the settings value back.\n         * Any parameter can have a callback defined.\n         * The callback takes the current AutoNumeric element as the first argument, and the key name as the second.\n         * @example callback(this, 'currencySymbol')\n         */\n\n    }, {\n        key: '_runCallbacksFoundInTheSettingsObject',\n        value: function _runCallbacksFoundInTheSettingsObject() {\n            //FIXME à tester\n            // Loops through the this.settings object (option array) to find the following\n            for (var key in this.settings) {\n                if (this.settings.hasOwnProperty(key)) {\n                    var value = this.settings[key];\n\n                    if (typeof value === 'function') {\n                        this.settings[key] = value(this, key);\n                    } else {\n                        // Calls the attached function from the html5 data. For instance: <tag data-currency-symbol=\"functionName\"></tag>\n                        var htmlAttribute = this.domElement.getAttribute(key); //TODO Use `dataset` instead of `getAttribute` when we won't need to support obsolete browsers\n                        htmlAttribute = _AutoNumericHelper2.default.camelize(htmlAttribute);\n                        if (typeof this.settings[htmlAttribute] === 'function') {\n                            this.settings[key] = htmlAttribute(this, key);\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Determine the maximum decimal length from the minimumValue and maximumValue settings\n         *\n         * @param {string} minimumValue\n         * @param {string} maximumValue\n         * @returns {number}\n         */\n\n    }, {\n        key: '_setTrailingNegativeSignInfo',\n\n\n        /**\n         * Keep track if the settings configuration leads to a trailing negative sign (only when the raw value is negative), so we do not have to test the settings values every time we need to know that.\n         * `isTrailingNegative` is set to `true` if the settings result in a trailing negative character, `false` otherwise.\n         * Note: This returns `true` even if the raw value is positive.\n         * @private\n         */\n        value: function _setTrailingNegativeSignInfo() {\n            this.isTrailingNegative = this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.suffix || this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix && (this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.left || this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.right);\n        }\n\n        /**\n         * Strip all unwanted non-number characters.\n         * This keeps the numbers, the negative sign as well as the custom decimal character.\n         *\n         * @param {string} s\n         * @param {object} settings\n         * @param {boolean} stripZeros If set to `false`, then the leading zero(s) are not stripped, otherwise if set to `true`, the `leadingZero` option is followed\n         * @param {boolean} isFocused If the element is focused, then this is `true`\n         * @returns {string|*}\n         */\n\n    }, {\n        key: '_setBrackets',\n\n\n        /**\n         * Analyze the `negativeBracketsTypeOnBlur` options and keep track of the first and last bracket characters to use.\n         * @private\n         */\n        value: function _setBrackets() {\n            if (!_AutoNumericHelper2.default.isNull(this.settings.negativeBracketsTypeOnBlur)) {\n                var _settings$negativeBra = this.settings.negativeBracketsTypeOnBlur.split(',');\n\n                var _settings$negativeBra2 = _slicedToArray(_settings$negativeBra, 2);\n\n                this.settings.firstBracket = _settings$negativeBra2[0];\n                this.settings.lastBracket = _settings$negativeBra2[1];\n            } else {\n                this.settings.firstBracket = '';\n                this.settings.lastBracket = '';\n            }\n        }\n\n        /**\n         * Return a number as a numeric string that can be typecast to a Number that Javascript will understand.\n         *\n         * This function return the given string by stripping the currency sign (currencySymbol), the grouping separators (digitalGroupSpacing) and by replacing the decimal character (decimalCharacter) by a dot.\n         * Lastly, it also put the negative sign back to its normal position if needed.\n         *\n         * @param {string} s\n         * @param {object} settings\n         * @returns {string|void|XML|*}\n         */\n\n    }, {\n        key: '_modifyNegativeSignAndDecimalCharacterForRawValue',\n\n\n        /**\n         * Modify the negative sign and the decimal character of the given string value to an hyphen (-) and a dot (.) in order to make that value 'typecastable' to a real number.\n         *\n         * @param {string} s\n         * @returns {string}\n         */\n        value: function _modifyNegativeSignAndDecimalCharacterForRawValue(s) {\n            if (this.settings.decimalCharacter !== '.') {\n                s = s.replace(this.settings.decimalCharacter, '.');\n            }\n\n            if (this.settings.negativeSignCharacter !== '-' && this.settings.negativeSignCharacter !== '') {\n                s = s.replace(this.settings.negativeSignCharacter, '-');\n            }\n\n            if (!s.match(/\\d/)) {\n                // The default value returned by `get` is not formatted with decimals\n                s += '0';\n            }\n\n            return s;\n        }\n\n        /**\n         * Modify the negative sign and the decimal character to use those defined in the settings.\n         *\n         * @param {string} s\n         * @param {object} settings\n         * @returns {string}\n         */\n\n    }, {\n        key: '_initialCaretPosition',\n\n\n        /**\n         * Calculate where to put the caret position on focus if the element content is not selected.\n         * This calculation is affected by the `caretPositionOnFocus` option which can be either `null`, `'start'`, `'end'`, `'decimalLeft'` or 'decimalRight'`, and will decide where to put the caret (on the left or right of the value or the decimal character, respectively) :\n         * - `null` : the caret position is not forced\n         * - `'start'` : the caret is positioned on the left hand side of the value\n         * - `'end'` : the caret is positioned on the right hand side of the value\n         * - `'decimalLeft'` : the caret is positioned on the left side of the decimal character\n         * - `'decimalRight'` : the caret is positioned on the right side of the decimal character\n         *\n         * @param {string} value The formatted string stripped of the currency symbol and negative/positive sign\n         * @returns {number}\n         * @throws\n         * @private\n         */\n        value: function _initialCaretPosition(value) {\n            if (_AutoNumericHelper2.default.isNull(this.settings.caretPositionOnFocus)) {\n                _AutoNumericHelper2.default.throwError('`_initialCaretPosition()` should never be called when the `caretPositionOnFocus` option is `null`.');\n            }\n\n            var isValueNegative = this.settings.rawValue < 0;\n            var isZeroOrHasNoValue = _AutoNumericHelper2.default.isZeroOrHasNoValue(value);\n            var totalLength = value.length;\n\n            var valueSize = 0;\n            var integerSize = 0;\n            var hasDecimalChar = false;\n            var offsetDecimalChar = 0;\n            if (this.settings.caretPositionOnFocus !== AutoNumeric.options.caretPositionOnFocus.start) {\n                value = value.replace('-', '');\n                value = value.replace('+', '');\n                value = value.replace(this.settings.currencySymbol, '');\n                valueSize = value.length;\n                hasDecimalChar = _AutoNumericHelper2.default.contains(value, this.settings.decimalCharacter);\n\n                if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.decimalLeft || this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.decimalRight) {\n                    if (hasDecimalChar) {\n                        integerSize = value.indexOf(this.settings.decimalCharacter);\n                        offsetDecimalChar = this.settings.decimalCharacter.length;\n                    } else {\n                        integerSize = valueSize;\n                        offsetDecimalChar = 0;\n                    }\n                }\n            }\n\n            var signToUse = '';\n            if (isValueNegative) {\n                signToUse = this.settings.negativeSignCharacter;\n            } else if (this.settings.showPositiveSign && !isZeroOrHasNoValue) {\n                signToUse = this.settings.positiveSignCharacter;\n            }\n\n            var positiveNegativeSignSize = signToUse.length;\n            var currencySymbolSize = this.settings.currencySymbol.length;\n\n            // Calculate the caret position based on `currencySymbolPlacement`, `negativePositiveSignPlacement` and `caretPositionOnFocus`\n            var caretPosition = void 0;\n            if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix) {\n                if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.start) {\n                    if (this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                        switch (this.settings.negativePositiveSignPlacement) {\n                            case AutoNumeric.options.negativePositiveSignPlacement.prefix: // +€|12.34\n                            case AutoNumeric.options.negativePositiveSignPlacement.left: // +€|12.34\n                            case AutoNumeric.options.negativePositiveSignPlacement.right:\n                                // €+|12.34\n                                caretPosition = positiveNegativeSignSize + currencySymbolSize;\n                                break;\n                            case AutoNumeric.options.negativePositiveSignPlacement.suffix:\n                                // €|12.34+\n                                caretPosition = currencySymbolSize;\n                                break;\n                        }\n                    } else {\n                        // €|12.34\n                        caretPosition = currencySymbolSize;\n                    }\n                } else if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.end) {\n                    if (this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                        switch (this.settings.negativePositiveSignPlacement) {\n                            case AutoNumeric.options.negativePositiveSignPlacement.prefix: // +€12.34|\n                            case AutoNumeric.options.negativePositiveSignPlacement.left: // +€12.34|\n                            case AutoNumeric.options.negativePositiveSignPlacement.right:\n                                // €+12.34|\n                                caretPosition = totalLength;\n                                break;\n                            case AutoNumeric.options.negativePositiveSignPlacement.suffix:\n                                // €12.34|+\n                                caretPosition = currencySymbolSize + valueSize;\n                                break;\n                        }\n                    } else {\n                        // €12.34|\n                        caretPosition = totalLength;\n                    }\n                } else if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.decimalLeft) {\n                    if (this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                        switch (this.settings.negativePositiveSignPlacement) {\n                            case AutoNumeric.options.negativePositiveSignPlacement.prefix: // +€12|.34\n                            case AutoNumeric.options.negativePositiveSignPlacement.left: // +€12|.34\n                            case AutoNumeric.options.negativePositiveSignPlacement.right:\n                                // €+12|.34\n                                caretPosition = positiveNegativeSignSize + currencySymbolSize + integerSize;\n                                break;\n                            case AutoNumeric.options.negativePositiveSignPlacement.suffix:\n                                // €12|.34+\n                                caretPosition = currencySymbolSize + integerSize;\n                                break;\n                        }\n                    } else {\n                        // €12|.34\n                        caretPosition = currencySymbolSize + integerSize;\n                    }\n                } else if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.decimalRight) {\n                    if (this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                        switch (this.settings.negativePositiveSignPlacement) {\n                            case AutoNumeric.options.negativePositiveSignPlacement.prefix: // +€12.|34\n                            case AutoNumeric.options.negativePositiveSignPlacement.left: // +€12.|34\n                            case AutoNumeric.options.negativePositiveSignPlacement.right:\n                                // €+12.|34\n                                caretPosition = positiveNegativeSignSize + currencySymbolSize + integerSize + offsetDecimalChar;\n                                break;\n                            case AutoNumeric.options.negativePositiveSignPlacement.suffix:\n                                // €12.|34+\n                                caretPosition = currencySymbolSize + integerSize + offsetDecimalChar;\n                                break;\n                        }\n                    } else {\n                        // €12.|34\n                        caretPosition = currencySymbolSize + integerSize + offsetDecimalChar;\n                    }\n                }\n            } else if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.start) {\n                    if (this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                        switch (this.settings.negativePositiveSignPlacement) {\n                            case AutoNumeric.options.negativePositiveSignPlacement.suffix: // |12.34€+\n                            case AutoNumeric.options.negativePositiveSignPlacement.right: // |12.34€+\n                            case AutoNumeric.options.negativePositiveSignPlacement.left:\n                                // |12.34+€\n                                caretPosition = 0;\n                                break;\n                            case AutoNumeric.options.negativePositiveSignPlacement.prefix:\n                                // +|12.34€\n                                caretPosition = positiveNegativeSignSize;\n                                break;\n                        }\n                    } else {\n                        // |12.34€\n                        caretPosition = 0;\n                    }\n                } else if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.end) {\n                    if (this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                        switch (this.settings.negativePositiveSignPlacement) {\n                            case AutoNumeric.options.negativePositiveSignPlacement.suffix: // 12.34|€+\n                            case AutoNumeric.options.negativePositiveSignPlacement.right: // 12.34|€+\n                            case AutoNumeric.options.negativePositiveSignPlacement.left:\n                                // 12.34|+€\n                                caretPosition = valueSize;\n                                break;\n                            case AutoNumeric.options.negativePositiveSignPlacement.prefix:\n                                // +12.34|€\n                                caretPosition = positiveNegativeSignSize + valueSize;\n                                break;\n                        }\n                    } else {\n                        // 12.34|€\n                        caretPosition = valueSize;\n                    }\n                } else if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.decimalLeft) {\n                    if (this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                        switch (this.settings.negativePositiveSignPlacement) {\n                            case AutoNumeric.options.negativePositiveSignPlacement.suffix: // 12|.34€+\n                            case AutoNumeric.options.negativePositiveSignPlacement.right: // 12|.34€+\n                            case AutoNumeric.options.negativePositiveSignPlacement.left:\n                                // 12|.34+€\n                                caretPosition = integerSize;\n                                break;\n                            case AutoNumeric.options.negativePositiveSignPlacement.prefix:\n                                // +12|.34€\n                                caretPosition = positiveNegativeSignSize + integerSize;\n                                break;\n                        }\n                    } else {\n                        // 12|.34€\n                        caretPosition = integerSize;\n                    }\n                } else if (this.settings.caretPositionOnFocus === AutoNumeric.options.caretPositionOnFocus.decimalRight) {\n                    if (this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                        switch (this.settings.negativePositiveSignPlacement) {\n                            case AutoNumeric.options.negativePositiveSignPlacement.suffix: // 12.|34€+\n                            case AutoNumeric.options.negativePositiveSignPlacement.right: // 12.|34€+\n                            case AutoNumeric.options.negativePositiveSignPlacement.left:\n                                // 12.|34+€\n                                caretPosition = integerSize + offsetDecimalChar;\n                                break;\n                            case AutoNumeric.options.negativePositiveSignPlacement.prefix:\n                                // +12.|34€\n                                caretPosition = positiveNegativeSignSize + integerSize + offsetDecimalChar;\n                                break;\n                        }\n                    } else {\n                        // 12.|34€\n                        caretPosition = integerSize + offsetDecimalChar;\n                    }\n                }\n            }\n\n            return caretPosition;\n        }\n\n        /**\n         * Truncate not needed zeros\n         *\n         * @param {string} roundedInputValue\n         * @param {int} decimalPlacesOverride\n         * @returns {void|XML|string|*}\n         */\n\n    }, {\n        key: '_keepAnOriginalSettingsCopy',\n\n\n        /**\n         * Original settings saved for use when the `decimalPlacesShownOnFocus` and `noSeparatorOnFocus` options are used.\n         * Those original settings are used exclusively in the `focusin` and `focusout` event handlers.\n         */\n        value: function _keepAnOriginalSettingsCopy() {\n            this.originalDecimalPlacesOverride = this.settings.decimalPlacesOverride;\n            this.originalAllowDecimalPadding = this.settings.allowDecimalPadding;\n            this.originalNegativeBracketsTypeOnBlur = this.settings.negativeBracketsTypeOnBlur;\n            this.originalDigitGroupSeparator = this.settings.digitGroupSeparator;\n            this.originalCurrencySymbol = this.settings.currencySymbol;\n            this.originalSuffixText = this.settings.suffixText;\n        }\n\n        /**\n         * Original settings saved for use when `decimalPlacesShownOnFocus` & `noSeparatorOnFocus` options are being used.\n         * This is taken from Quirksmode.\n         *\n         * @param {string} name\n         * @returns {*}\n         */\n\n    }, {\n        key: '_trimLeadingAndTrailingZeros',\n\n\n        /**\n         * Removes any zeros in excess in the front and back of the given `value`, according to the `settings`.\n         * This also manages the cases where the decimal point is on the far left or far right of the `value`.\n         *\n         * @param {string} value\n         * @returns {string}\n         */\n        value: function _trimLeadingAndTrailingZeros(value) {\n            // Return the empty string is the value is already empty. This prevent converting that value to '0'.\n            if (value === '') {\n                return '';\n            }\n\n            if (this.settings.leadingZero !== AutoNumeric.options.leadingZero.keep) {\n                if (Number(value) === 0) {\n                    // Return '0' if the value is zero\n                    return '0';\n                }\n\n                // Trim the leading zeros, while leaving one zero to the left of the decimal point if needed\n                value = value.replace(/^(-)?0+(?=\\d)/g, '$1');\n            }\n\n            //TODO remove this from that function and use `trimPaddedZerosFromDecimalPlaces()` instead\n            // Trim the trailing zeros after the last decimal place not being a zero (ie. 1.2300 -> 1.23)\n            if (_AutoNumericHelper2.default.contains(value, '.')) {\n                value = value.replace(/(\\.[0-9]*?)0+$/, '$1');\n            }\n\n            // Remove any trailing decimal point\n            value = value.replace(/\\.$/, '');\n\n            return value;\n        }\n\n        /**\n         * Creates or removes sessionStorage or cookie depending on what the browser is supporting.\n         *\n         * @param {string} action\n         * @returns {*}\n         * @private\n         */\n\n    }, {\n        key: '_saveValueToPersistentStorage',\n        value: function _saveValueToPersistentStorage(action) {\n            if (this.settings.saveValueToSessionStorage) {\n                var storedName = this.domElement.name !== '' && !_AutoNumericHelper2.default.isUndefined(this.domElement.name) ? 'AUTO_' + decodeURIComponent(this.domElement.name) : 'AUTO_' + this.domElement.id;\n                var date = void 0;\n                var expires = void 0;\n\n                // Sets cookie for browser that do not support sessionStorage IE 6 & IE 7\n                if (this._storageTest() === false) {\n                    switch (action) {\n                        case 'set':\n                            document.cookie = storedName + '=' + this.settings.rawValue + '; expires= ; path=/';\n                            break;\n                        case 'remove':\n                            date = new Date();\n                            date.setTime(date.getTime() + -1 * 24 * 60 * 60 * 1000);\n                            expires = '; expires=' + date.toUTCString(); // Note : `toGMTString()` has been deprecated (cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString)\n                            document.cookie = storedName + '=\\'\\' ;' + expires + '; path=/';\n                            break;\n                        case 'get':\n                            return this._readCookie(storedName);\n                    }\n                } else {\n                    switch (action) {\n                        case 'set':\n                            sessionStorage.setItem(storedName, this.settings.rawValue);\n                            break;\n                        case 'remove':\n                            sessionStorage.removeItem(storedName);\n                            break;\n                        case 'get':\n                            return sessionStorage.getItem(storedName);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Handler for 'focusin' and 'mouseenter' events\n         *\n         * @param {Event} e\n         * @private\n         */\n\n    }, {\n        key: '_onFocusInAndMouseEnter',\n        value: function _onFocusInAndMouseEnter(e) {\n            //TODO `AutoNumericHelper.setElementValue` is called 3 times sequentially here, fix that\n            var initialElementValue = _AutoNumericHelper2.default.getElementValue(this.domElement);\n\n            if (this.settings.unformatOnHover && e.type === 'mouseenter' && e.altKey) {\n                this.constructor._unformatAltHovered(this);\n\n                return;\n            }\n\n            if (e.type === 'focus' && this.settings.unformatOnHover && this.hoveredWithAlt) {\n                this.constructor._reformatAltHovered(this);\n            }\n\n            if (e.type === 'focus' || e.type === 'mouseenter' && !this.isFocused) {\n                if (this.settings.emptyInputBehavior === AutoNumeric.options.emptyInputBehavior.focus && this.settings.rawValue < 0 && this.settings.negativeBracketsTypeOnBlur !== null && this.settings.negativeSignCharacter !== '') {\n                    //FIXME this is called a second time in _addGroupSeparators too. Prevent this\n                    // Only remove the brackets if the value is negative\n                    _AutoNumericHelper2.default.setElementValue(this.domElement, this.constructor._removeBrackets(_AutoNumericHelper2.default.getElementValue(this.domElement), this.settings));\n                }\n\n                // Check if the element value needs to be changed by the number of decimal places to show on focus, the scaleDecimal* options or no separator on focus option\n                var updateElementValue = false;\n                if (this.settings.decimalPlacesShownOnFocus) {\n                    this.settings.decimalPlacesOverride = this.settings.decimalPlacesShownOnFocus;\n                    updateElementValue = true;\n                } else if (this.settings.scaleDivisor && this.settings.rawValue !== '') {\n                    // Prevent changing the element value if it's empty (so we don't end up having a '0.000scaleSymbol' value after a mouseenter/mouseleave cycle)\n                    this.settings.decimalPlacesOverride = Number(this.originalDecimalPlacesOverride);\n                    updateElementValue = true;\n                } else if (this.settings.noSeparatorOnFocus) {\n                    //TODO Use a `this.settingsOverride` object instead of modifying the `this.settings` object\n                    this.settings.digitGroupSeparator = '';\n                    this.settings.currencySymbol = '';\n                    this.settings.suffixText = '';\n                    updateElementValue = true;\n                }\n\n                if (updateElementValue) {\n                    var roundedValue = this.constructor._roundValue(this.settings.rawValue, this.settings);\n                    if (this.settings.noSeparatorOnFocus) {\n                        _AutoNumericHelper2.default.setElementValue(this.domElement, roundedValue.replace('.', this.settings.decimalCharacter));\n                    } else {\n                        _AutoNumericHelper2.default.setElementValue(this.domElement, this.constructor._addGroupSeparators(roundedValue, this.settings, this.isFocused));\n                    }\n                }\n\n                // In order to send a 'native' change event when blurring the input, we need to first store the initial input value on focus.\n                this.valueOnFocus = _AutoNumericHelper2.default.getElementValue(e.target);\n                this.lastVal = this.valueOnFocus;\n                var isEmptyValue = this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(this.valueOnFocus, this.settings);\n                var orderedValue = this.constructor._orderValueCurrencySymbolAndSuffixText(this.valueOnFocus, this.settings, true);\n                if (isEmptyValue && orderedValue !== '' && this.settings.emptyInputBehavior === AutoNumeric.options.emptyInputBehavior.focus) {\n                    _AutoNumericHelper2.default.setElementValue(this.domElement, orderedValue);\n\n                    // If there is a currency symbol and its on the right hand side, then we place the caret accordingly on the far left side\n                    if (orderedValue === this.settings.currencySymbol && this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                        _AutoNumericHelper2.default.setElementSelection(e.target, 0);\n                    }\n                }\n            }\n\n            if (_AutoNumericHelper2.default.getElementValue(this.domElement) !== initialElementValue) {\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.formatted, this.domElement, { oldValue: initialElementValue, newValue: _AutoNumericHelper2.default.getElementValue(this.domElement) });\n            }\n        }\n\n        /**\n         * Handler for the 'focus' event.\n         * We update the info of the focused state in the `this.isFocused` variable when the element gets focused.\n         * @private\n         */\n\n    }, {\n        key: '_onFocus',\n        value: function _onFocus() {\n            if (this.settings.isCancellable) {\n                // Save the current unformatted value for later use by the 'cancellable' feature\n                this._saveCancellableValue();\n            }\n\n            // We keep track if the element is currently focused\n            this.isFocused = true;\n        }\n\n        /**\n         * Handler for the 'focusin' event.\n         * This is called before the 'focus' event, and is necessary to change the selection on focus under Firefox for instance.\n         *\n         * @param {Event} e\n         * @private\n         */\n\n    }, {\n        key: '_onFocusIn',\n        value: function _onFocusIn(e) {\n            if (this.settings.selectOnFocus) {\n                // The whole input content is selected on focus (following the `selectOnFocus` and `selectNumberOnly` options)\n                //XXX Firefox <47 does not respect this selection...Oh well.\n                this.select();\n            } else {\n                // Or we decide where to put the caret using the `caretPositionOnFocus` option\n                _AutoNumericHelper2.default.setElementSelection(e.target, this._initialCaretPosition(_AutoNumericHelper2.default.getElementValue(this.domElement)));\n            }\n        }\n\n        /**\n         * Handler for 'keydown' events.\n         * The user just started pushing any key, hence one event is sent.\n         *\n         * Note :\n         * By default a 'normal' input output those events in the right order when inputting a character key (ie. 'a') :\n         * - keydown\n         * - keypress\n         * - input\n         * - keyup\n         *\n         * ...when inputting a modifier key (ie. 'ctrl') :\n         * - keydown\n         * - keyup\n         *\n         * If 'delete' or 'backspace' is entered, the following events are sent :\n         * - keydown\n         * - input\n         * - keyup\n         *\n         * If 'enter' is entered and the value has not changed, the following events are sent :\n         * - keydown\n         * - keypress\n         * - keyup\n         *\n         * If 'enter' is entered and the value has been changed, the following events are sent :\n         * - keydown\n         * - keypress\n         * - change\n         * - keyup\n         *\n         * When a paste is done, the following events are sent :\n         * - input (if paste is done with the mouse)\n         *\n         * - keydown (if paste is done with ctrl+v)\n         * - keydown\n         * - input\n         * - keyup\n         * - keyup\n         *\n         * @param {KeyboardEvent} e\n         */\n\n    }, {\n        key: '_onKeydown',\n        value: function _onKeydown(e) {\n            if (!this.isFocused && this.settings.unformatOnHover && e.altKey && this.domElement === _AutoNumericHelper2.default.getHoveredElement()) {\n                // Here I prevent calling _unformatAltHovered if the element is already focused, since the global 'keydown' listener will pick it up as well\n                this.constructor._unformatAltHovered(this);\n\n                return;\n            }\n\n            this._updateEventKeyInfo(e);\n            this.initialValueOnKeydown = _AutoNumericHelper2.default.getElementValue(e.target); // This is needed in `onKeyup()` to check if the value as changed during the key press\n\n            if (this.domElement.readOnly) {\n                this.processed = true;\n\n                return;\n            }\n\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.Esc) {\n                //XXX The default 'Escape' key behavior differs between Firefox and Chrome, Firefox already having a built-in 'cancellable-like' feature. This is why we call `e.preventDefault()` here instead of just when `isCancellable` is set to `true`. This allow us to keep the same behavior across browsers.\n                e.preventDefault();\n\n                if (this.settings.isCancellable) {\n                    // If the user wants to cancel its modifications :\n                    // We set back the saved value\n                    if (this.settings.rawValue !== this.savedCancellableValue) {\n                        // Do not set the value again if it has not changed\n                        this.set(this.savedCancellableValue);\n                        // And we need to send an 'input' event when setting back the initial value in order to make other scripts aware of the value change...\n                        _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.native.input, e.target);\n                    }\n                }\n\n                // ..and lastly we update the caret selection, even if the option `isCancellable` is false\n                this.select();\n                //TODO Add an option to select either the integer or decimal part with `Esc`\n            }\n\n            // The \"enter\" key throws a `change` event if the value has changed since the `focus` event\n            var targetValue = _AutoNumericHelper2.default.getElementValue(e.target);\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.Enter && this.valueOnFocus !== targetValue) {\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.native.change, e.target);\n                this.valueOnFocus = targetValue;\n\n                if (this.settings.isCancellable) {\n                    // If the user activated the 'cancellable' feature, we save the validated value when 'Enter' is hit\n                    this._saveCancellableValue();\n                }\n            }\n\n            this._updateInternalProperties(e);\n\n            if (this._processNonPrintableKeysAndShortcuts(e)) {\n                this.processed = true;\n\n                return;\n            }\n\n            // Check if the key is a delete/backspace key\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.Backspace || this.eventKey === _AutoNumericEnum2.default.keyName.Delete) {\n                this._processCharacterDeletion(); // Because backspace and delete only triggers keydown and keyup events, not keypress\n                this.processed = true;\n                this._formatValue(e);\n\n                // If and only if the resulting value has changed after that backspace/delete, then we have to send an 'input' event like browsers normally do.\n                targetValue = _AutoNumericHelper2.default.getElementValue(e.target); // Update the value since it could have been changed during the deletion\n                if (targetValue !== this.lastVal && this.throwInput) {\n                    // Throw an input event when a character deletion is detected\n                    _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.native.input, e.target);\n                    e.preventDefault(); // ...and immediately prevent the browser to delete a second character\n                }\n\n                this.lastVal = targetValue;\n                this.throwInput = true;\n\n                return;\n            }\n\n            this.formatted = false; //TODO Is this line needed? (I mean, _formatValue always set it to `true`, and this overwrite that info)\n        }\n\n        /**\n         * Handler for 'keypress' events.\n         * The user is still pressing the key, which will output a character (ie. '2') continuously until it releases the key.\n         * Note: 'keypress' events are not sent for delete keys like Backspace/Delete.\n         *\n         * @param {KeyboardEvent} e\n         */\n\n    }, {\n        key: '_onKeypress',\n        value: function _onKeypress(e) {\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.Insert) {\n                return;\n            }\n\n            var processed = this.processed;\n            this._updateInternalProperties(e);\n\n            if (this._processNonPrintableKeysAndShortcuts(e)) {\n                return;\n            }\n\n            if (processed) {\n                e.preventDefault();\n\n                return;\n            }\n\n            var isCharacterInsertionAllowed = this._processCharacterInsertion();\n            if (isCharacterInsertionAllowed) {\n                this._formatValue(e);\n                var targetValue = _AutoNumericHelper2.default.getElementValue(e.target);\n                if (targetValue !== this.lastVal && this.throwInput) {\n                    // Throws input event on adding a character\n                    _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.native.input, e.target);\n                    e.preventDefault(); // ...and immediately prevent the browser to add a second character\n                } else {\n                    if ((this.eventKey === this.settings.decimalCharacter || this.eventKey === this.settings.decimalCharacterAlternative) && _AutoNumericHelper2.default.getElementSelection(e.target).start === _AutoNumericHelper2.default.getElementSelection(e.target).end && _AutoNumericHelper2.default.getElementSelection(e.target).start === targetValue.indexOf(this.settings.decimalCharacter)) {\n                        var position = _AutoNumericHelper2.default.getElementSelection(e.target).start + 1;\n                        _AutoNumericHelper2.default.setElementSelection(e.target, position);\n                    }\n\n                    e.preventDefault();\n                }\n\n                this.lastVal = _AutoNumericHelper2.default.getElementValue(e.target);\n                this.throwInput = true;\n\n                return;\n            }\n\n            e.preventDefault();\n\n            this.formatted = false; //TODO Is this line needed? (I mean, _formatValue always set it to `true`, and this overwrite that info)\n        }\n\n        /**\n         * Handler for 'input' events.\n         * Handling this event instead of `keypress` is needed in order to support android devices.\n         *\n         * @param {Event} e\n         */\n\n    }, {\n        key: '_onInput',\n        value: function _onInput(e) {\n            //FIXME à tester\n            var value = _AutoNumericHelper2.default.getElementValue(this.domElement);\n\n            // Fix the caret position on keyup in the `_formatValue()` function\n            this.androidSelectionStart = null;\n\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.AndroidDefault) {\n                var selection = _AutoNumericHelper2.default.getElementSelection(this.domElement);\n                // The keyCode is equal to the default Android Chrome one (which is always equal to `keyCode.AndroidDefault`)\n                if (value.length > this.lastVal.length || value.length >= this.lastVal.length - selection.length) {\n                    // Determine the keycode of the character that was entered, and overwrite the faulty `eventKeyCode` info with it\n                    this.eventKey = value.charCodeAt(selection.start);\n\n                    // Capture the actual character entered, and update the `eventKey` with it (instead of the Android default one)\n                    this.eventKey = value.charAt(selection.start);\n\n                    // Check if the given character should be inserted, and if so, do insert it into the current element value\n                    var isCharacterInsertionAllowed = this._processCharacterInsertion();\n\n                    if (isCharacterInsertionAllowed) {\n                        // Allowed character entered (number, decimal or plus/minus sign)\n                        this._formatValue(e);\n\n                        selection = _AutoNumericHelper2.default.getElementSelection(this.domElement); //TODO is this needed a second time?\n                        // Capture the new caret position. This is required because on keyup, `_updateAutoNumericHolderEventKeycode()` captures the old caret position\n                        //TODO Check if this is an Android bug or an autoNumeric one\n                        this.androidSelectionStart = selection.start;\n\n                        var decimalCharacterPosition = _AutoNumericHelper2.default.getElementValue(this.domElement).indexOf(this.settings.decimalCharacter);\n                        var hasDecimalCharacter = decimalCharacterPosition === -1;\n\n                        // Move the caret to the right if the `androidCharEntered` is the decimal character or if it's on the left of the caret position\n                        if (this.eventKey === this.settings.decimalCharacter || !hasDecimalCharacter && decimalCharacterPosition < this.androidSelectionStart) {\n                            this.androidSelectionStart = selection.start + 1;\n                        }\n\n                        if (selection.length > value.length) {\n                            // Position the caret right now before the 'keyup' event in order to prevent the caret from jumping around\n                            this._setCaretPosition(this.androidSelectionStart);\n                        }\n\n                        this.lastVal = _AutoNumericHelper2.default.getElementValue(this.domElement);\n\n                        return;\n                    } else {\n                        // The entered character is not allowed ; overwrite the new invalid value with the previous valid one, and set back the caret/selection\n                        _AutoNumericHelper2.default.setElementValue(this.lastVal); //TODO Update the rawValue here too via _setValue()?\n                        _AutoNumericHelper2.default.setElementSelection(this.domElement, selection.start, selection.end);\n                        this.androidSelectionStart = selection.start;\n                    }\n\n                    e.preventDefault(); //TODO Check how that is affecting the normal trigger of the input event\n\n                    this.formatted = false;\n                } else {\n                    // Character deleted\n                    //XXX The change in length could also be the result of the `Delete` key, but there usually are no such key in the Android virtual keyboards\n                    this.eventKey = _AutoNumericEnum2.default.keyName.Backspace;\n                }\n            }\n        }\n\n        /**\n         * Handler for 'keyup' events.\n         * The user just released any key, hence one event is sent.\n         *\n         * @param {KeyboardEvent} e\n         */\n\n    }, {\n        key: '_onKeyup',\n        value: function _onKeyup(e) {\n            if (this.settings.isCancellable && this.eventKey === _AutoNumericEnum2.default.keyName.Esc) {\n                // If the user wants to cancel its modifications, we drop the 'keyup' event for the Esc key\n                e.preventDefault();\n\n                return;\n            }\n\n            // Manage the undo/redo events\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.Z || this.eventKey === _AutoNumericEnum2.default.keyName.z) {\n                if (e.ctrlKey && e.shiftKey) {\n                    // Redo\n                    e.preventDefault();\n                    this._historyTableRedo();\n                    this.onGoingRedo = true;\n\n                    return;\n                } else if (e.ctrlKey && !e.shiftKey) {\n                    if (this.onGoingRedo) {\n                        // Prevent an 'undo' to be launch when releasing the shift key before the ctrl key after a 'redo' shortcut\n                        this.onGoingRedo = false;\n                    } else {\n                        e.preventDefault();\n                        // Undo\n                        this._historyTableUndo();\n\n                        return;\n                    }\n                }\n            }\n\n            if (this.onGoingRedo && (e.ctrlKey || e.shiftKey)) {\n                // Special case where if the user has entered `Control+Shift+z`, then release `z`, keeping `Control` or `Shift` pressed, then `this.onGoingRedo` is never changed back to `false` when the user release `Control` or `Shift`\n                this.onGoingRedo = false;\n            }\n\n            // Manage the reformat when hovered with the Alt key pressed\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.Alt && this.hoveredWithAlt) {\n                this.constructor._reformatAltHovered(this);\n\n                return;\n            }\n\n            this._updateInternalProperties(e);\n\n            var skip = this._processNonPrintableKeysAndShortcuts(e);\n            delete this.valuePartsBeforePaste;\n            var isOnAndroid = this.androidSelectionStart !== null;\n            var targetValue = _AutoNumericHelper2.default.getElementValue(e.target);\n            if (skip && !isOnAndroid || targetValue === '') {\n                return;\n            }\n\n            // Added to properly place the caret when only the currency sign is present\n            if (targetValue === this.settings.currencySymbol) {\n                if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                    _AutoNumericHelper2.default.setElementSelection(e.target, 0);\n                } else {\n                    _AutoNumericHelper2.default.setElementSelection(e.target, this.settings.currencySymbol.length);\n                }\n            } else if (this.eventKey === _AutoNumericEnum2.default.keyName.Tab) {\n                _AutoNumericHelper2.default.setElementSelection(e.target, 0, targetValue.length);\n            }\n\n            if (targetValue === this.settings.suffixText || this.settings.rawValue === '' && this.settings.currencySymbol !== '' && this.settings.suffixText !== '') {\n                _AutoNumericHelper2.default.setElementSelection(e.target, 0);\n            }\n\n            // Saves the extended decimal to preserve the data when navigating away from the page\n            if (this.settings.decimalPlacesShownOnFocus !== null && this.settings.saveValueToSessionStorage) {\n                this._saveValueToPersistentStorage('set');\n            }\n\n            if (!this.formatted) {\n                //TODO Is this line needed? Considering that onKeydown and onKeypress both finish by setting it to false...\n                this._formatValue(e);\n            }\n\n            // If the input value has changed during the key press event chain, an event is sent to alert that a formatting has been done (cf. Issue #187)\n            if (targetValue !== this.initialValueOnKeydown) {\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.formatted, e.target, { oldValue: this.initialValueOnKeydown, newValue: targetValue }); //TODO Do I need to remove this since we now send this event on `set()`?\n            }\n\n            // Update the selection of the current element of the history table\n            if (this.historyTable.length > 1) {\n                var selection = _AutoNumericHelper2.default.getElementSelection(this.domElement);\n                this.selectionStart = selection.start;\n                this.selectionEnd = selection.end;\n                this.historyTable[this.historyTableIndex].start = this.selectionStart;\n                this.historyTable[this.historyTableIndex].end = this.selectionEnd;\n            }\n        }\n\n        /**\n         * Handler for 'focusout' events\n         *\n         * @param {Event} e\n         */\n\n    }, {\n        key: '_onFocusOutAndMouseLeave',\n        value: function _onFocusOutAndMouseLeave(e) {\n            //TODO Create separate handlers for blur and mouseleave\n            //FIXME Do not call `set()` if the current raw value is the same as the one we are trying to set (currently, on focus out, `set()` is always called, even if the value has not changed\n            if (this.settings.unformatOnHover && e.type === 'mouseleave' && this.hoveredWithAlt) {\n                this.constructor._reformatAltHovered(this);\n\n                return;\n            }\n\n            if (e.type === 'mouseleave' && !this.isFocused || e.type === 'blur') {\n                var origValue = this.settings.rawValue;\n\n                if (this.settings.saveValueToSessionStorage) {\n                    this._saveValueToPersistentStorage('set');\n                }\n\n                if (this.settings.noSeparatorOnFocus === true) {\n                    this.settings.digitGroupSeparator = this.originalDigitGroupSeparator;\n                    this.settings.currencySymbol = this.originalCurrencySymbol;\n                    this.settings.suffixText = this.originalSuffixText;\n                }\n\n                if (this.settings.decimalPlacesShownOnFocus !== null) {\n                    this.settings.decimalPlacesOverride = this.originalDecimalPlacesOverride;\n                    this.settings.allowDecimalPadding = this.originalAllowDecimalPadding;\n                    this.settings.negativeBracketsTypeOnBlur = this.originalNegativeBracketsTypeOnBlur;\n                }\n\n                var value = this.settings.rawValue;\n                if (this.settings.rawValue !== '') {\n                    var _constructor$_checkIf5 = this.constructor._checkIfInRangeWithOverrideOption(this.settings.rawValue, this.settings),\n                        _constructor$_checkIf6 = _slicedToArray(_constructor$_checkIf5, 2),\n                        minTest = _constructor$_checkIf6[0],\n                        maxTest = _constructor$_checkIf6[1];\n\n                    if (minTest && maxTest && !this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(this.settings.rawValue, this.settings)) {\n                        value = this._modifyNegativeSignAndDecimalCharacterForRawValue(value);\n                        this._setRawValue(this._trimLeadingAndTrailingZeros(value));\n\n                        if (this.settings.scaleDivisor) {\n                            value = value / this.settings.scaleDivisor;\n                            value = value.toString();\n                        }\n\n                        this.settings.decimalPlacesOverride = this.settings.scaleDivisor && this.settings.scaleDecimalPlaces ? Number(this.settings.scaleDecimalPlaces) : this.settings.decimalPlacesOverride;\n                        value = this.constructor._roundValue(value, this.settings);\n                        value = this.constructor._modifyNegativeSignAndDecimalCharacterForFormattedValue(value, this.settings);\n                    } else {\n                        if (!minTest) {\n                            _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.minRangeExceeded, this.domElement);\n                        }\n                        if (!maxTest) {\n                            _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.maxRangeExceeded, this.domElement);\n                        }\n                    }\n                } else {\n                    if (this.settings.emptyInputBehavior === AutoNumeric.options.emptyInputBehavior.zero) {\n                        this._setRawValue('0');\n                        value = this.constructor._roundValue('0', this.settings);\n                    } else {\n                        this._setRawValue('');\n                    }\n                }\n\n                var groupedValue = this.constructor._orderValueCurrencySymbolAndSuffixText(value, this.settings, false);\n                if (!this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(value, this.settings)) {\n                    groupedValue = this.constructor._addGroupSeparators(value, this.settings, this.isFocused);\n                }\n\n                // Testing for `allowDecimalPadding.never` is needed to make sure we do not keep a trailing decimalCharacter (like '500.') in the element, since the raw value would still be a rightly formatted integer ('500')\n                if (groupedValue !== origValue || this.settings.allowDecimalPadding === AutoNumeric.options.allowDecimalPadding.never || this.settings.allowDecimalPadding === AutoNumeric.options.allowDecimalPadding.floats) {\n                    if (this.settings.scaleSymbol) {\n                        groupedValue = '' + groupedValue + this.settings.scaleSymbol;\n                    }\n\n                    this._setElementValue(groupedValue);\n                }\n\n                if (groupedValue !== this.valueOnFocus) {\n                    _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.native.change, this.domElement);\n                    delete this.valueOnFocus;\n                }\n            }\n        }\n\n        /**\n         * Handler for 'paste' event\n         *\n         * @param {Event|ClipboardEvent} e\n         */\n\n    }, {\n        key: '_onPaste',\n        value: function _onPaste(e) {\n            //TODO Using ctrl+z after a paste should cancel it -> How would that affect other frameworks/component built with that feature in mind though?\n            //FIXME When pasting '000' on a thousand group selection, the whole selection gets deleted, and only one '0' is pasted (cf. issue #302)\n            // The event is prevented by default, since otherwise the user would be able to paste invalid characters into the input\n            e.preventDefault();\n\n            var rawPastedText = e.clipboardData.getData('text/plain');\n\n            // 0. Special case if the user has selected all the input text before pasting\n            var initialFormattedValue = _AutoNumericHelper2.default.getElementValue(e.target);\n            var selectionStart = e.target.selectionStart || 0;\n            var selectionEnd = e.target.selectionEnd || 0;\n            var selectionSize = selectionEnd - selectionStart;\n            var isAllInputTextSelected = false;\n\n            if (selectionSize === initialFormattedValue.length) {\n                isAllInputTextSelected = true;\n            }\n\n            // 1. Check if the paste has a negative sign (only if it's the first character), and store that information for later use\n            var isPasteNegative = _AutoNumericHelper2.default.isNegativeStrict(rawPastedText);\n            if (isPasteNegative) {\n                // 1a. Remove the negative sign from the pasted text\n                rawPastedText = rawPastedText.slice(1, rawPastedText.length);\n            }\n\n            // 2. Strip all thousand separators, brackets and currency sign, and convert the decimal character to a dot\n            var untranslatedPastedText = this._preparePastedText(rawPastedText);\n\n            var pastedText = void 0;\n            if (untranslatedPastedText === '.') {\n                // Special case : If the user tries to paste a single decimal character (that has been translated to '.' already)\n                pastedText = '.';\n            } else {\n                // Normal case\n                // Allow pasting arabic numbers\n                pastedText = _AutoNumericHelper2.default.arabicToLatinNumbers(untranslatedPastedText, false, false, false);\n            }\n\n            // 3. Test if the paste is valid (only has numbers and eventually a decimal character). If it's not valid, stop here.\n            if (pastedText !== '.' && (!_AutoNumericHelper2.default.isNumber(pastedText) || pastedText === '')) {\n                if (this.settings.onInvalidPaste === AutoNumeric.options.onInvalidPaste.error) {\n                    //TODO Should we send a warning instead of throwing an error?\n                    _AutoNumericHelper2.default.throwError('The pasted value \\'' + rawPastedText + '\\' is not a valid paste content.');\n                }\n\n                return;\n            }\n\n            // 4. Calculate the paste result\n            var caretPositionOnInitialTextAfterPasting = void 0;\n            var initialUnformattedNumber = this.getNumericString();\n            var isInitialValueNegative = _AutoNumericHelper2.default.isNegativeStrict(initialUnformattedNumber);\n            var isPasteNegativeAndInitialValueIsPositive = void 0;\n            var result = void 0;\n\n            // If the pasted content is negative, then the result will be negative too\n            if (isPasteNegative && !isInitialValueNegative) {\n                initialUnformattedNumber = '-' + initialUnformattedNumber;\n                isInitialValueNegative = true;\n                isPasteNegativeAndInitialValueIsPositive = true;\n            } else {\n                isPasteNegativeAndInitialValueIsPositive = false;\n            }\n\n            var leftPartContainedADot = false;\n            var leftPart = void 0;\n            var rightPart = void 0;\n            switch (this.settings.onInvalidPaste) {\n                /* 4a. Truncate paste behavior:\n                 * Insert as many numbers as possible on the right hand side of the caret from the pasted text content, until the input reach its range limit.\n                 * If there is more characters in the clipboard once a limit is reached, drop the extraneous characters.\n                 * Otherwise paste all the numbers in the clipboard.\n                 * While doing so, we check if the result is within the minimum and maximum values allowed, and stop as soon as we encounter one of those.\n                 *\n                 * 4b. Replace paste behavior:\n                 * Idem than the 'truncate' paste behavior, except that when a range limit is hit, we try to replace the subsequent initial numbers with the pasted ones, until we hit the range limit a second (and last) time, or we run out of numbers to paste\n                 */\n                /* eslint no-case-declarations: 0 */\n                case AutoNumeric.options.onInvalidPaste.truncate:\n                case AutoNumeric.options.onInvalidPaste.replace:\n                    var leftFormattedPart = initialFormattedValue.slice(0, selectionStart);\n                    var rightFormattedPart = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);\n\n                    if (selectionStart !== selectionEnd) {\n                        // a. If there is a selection, remove the selected part, and return the left and right part\n                        result = this._preparePastedText(leftFormattedPart + rightFormattedPart);\n                    } else {\n                        // b. Else if this is only one caret (and therefore no selection), then return the left and right part\n                        result = this._preparePastedText(initialFormattedValue);\n                    }\n\n                    // Add back the negative sign if needed\n                    if (isInitialValueNegative) {\n                        result = _AutoNumericHelper2.default.setRawNegativeSign(result);\n                    }\n\n                    // Build the unformatted result string\n                    caretPositionOnInitialTextAfterPasting = _AutoNumericHelper2.default.convertCharacterCountToIndexPosition(_AutoNumericHelper2.default.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, this.settings.decimalCharacter));\n                    if (isPasteNegativeAndInitialValueIsPositive) {\n                        // If the initial paste is negative and the initial value is not, then I must offset the caret position by one place to the right to take the additional hyphen into account\n                        caretPositionOnInitialTextAfterPasting++;\n                        //TODO Quid if the negative sign is not on the left (negativePositiveSignPlacement and currencySymbolPlacement)?\n                    }\n\n                    leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);\n                    rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);\n                    if (pastedText === '.') {\n                        if (_AutoNumericHelper2.default.contains(leftPart, '.')) {\n                            // If I remove a dot here, then I need to update the caret position (decrement it by 1) when positioning it\n                            // To do so, we keep that info in order to modify the caret position later\n                            leftPartContainedADot = true;\n                            leftPart = leftPart.replace('.', '');\n                        }\n\n                        rightPart = rightPart.replace('.', '');\n                    }\n                    // -- Here, we are good to go to continue on the same basis\n\n                    // c. Add numbers one by one at the caret position, while testing if the result is valid and within the range of the minimum and maximum value\n                    //    Continue until you either run out of numbers to paste, or that you get out of the range limits\n                    var minParse = _AutoNumericHelper2.default.parseStr(this.settings.minimumValue);\n                    var maxParse = _AutoNumericHelper2.default.parseStr(this.settings.maximumValue);\n                    var lastGoodKnownResult = result; // This is set as the default, in case we do not add even one number\n                    var pastedTextIndex = 0;\n                    var modifiedLeftPart = leftPart;\n\n                    while (pastedTextIndex < pastedText.length) {\n                        // Modify the result with another pasted character\n                        modifiedLeftPart += pastedText[pastedTextIndex];\n                        result = modifiedLeftPart + rightPart;\n\n                        // Check the range limits\n                        if (!this.constructor._checkIfInRange(result, minParse, maxParse)) {\n                            // The result is out of the range limits, stop the loop here\n                            break;\n                        }\n\n                        // Save the last good known result\n                        lastGoodKnownResult = result;\n\n                        // Update the local variables for the next loop\n                        pastedTextIndex++;\n                    }\n\n                    // Update the last caret position where to insert a new number\n                    caretPositionOnInitialTextAfterPasting += pastedTextIndex;\n\n                    //XXX Here we have the result for the `truncate` option\n                    if (this.settings.onInvalidPaste === AutoNumeric.options.onInvalidPaste.truncate) {\n                        //TODO If the user as defined a truncate callback and there are still some numbers (that will be dropped), then call this callback with the initial paste as well as the remaining numbers\n                        result = lastGoodKnownResult;\n\n                        if (leftPartContainedADot) {\n                            // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\n                            caretPositionOnInitialTextAfterPasting--;\n                        }\n                        break;\n                    }\n                    //XXX ...else we need to continue modifying the result for the 'replace' option\n\n                    // d. Until there are numbers to paste, replace the initial numbers one by one, and still do the range test.\n                    //    Stop when you have no more numbers to paste, or if you are out of the range limits.\n                    //    If you do get to the range limits, use the previous known good value within those limits.\n                    //    Note: The numbers are replaced one by one, in the integer then decimal part, while ignoring the decimal character\n                    //TODO What should happen if the user try to paste a decimal number? Should we override the current initial decimal character in favor of this new one? If we do, then we have to recalculate the vMin/vMax from the start in order to take into account this new decimal character position..\n                    var lastGoodKnownResultIndex = caretPositionOnInitialTextAfterPasting;\n                    var lastGoodKnownResultSize = lastGoodKnownResult.length;\n\n                    while (pastedTextIndex < pastedText.length && lastGoodKnownResultIndex < lastGoodKnownResultSize) {\n                        if (lastGoodKnownResult[lastGoodKnownResultIndex] === '.') {\n                            // We skip the decimal character 'replacement'. That way, we do not change the decimal character position regarding the remaining numbers.\n                            lastGoodKnownResultIndex++;\n                            continue;\n                        }\n\n                        // This replace one character at a time\n                        result = _AutoNumericHelper2.default.replaceCharAt(lastGoodKnownResult, lastGoodKnownResultIndex, pastedText[pastedTextIndex]);\n\n                        // Check the range limits\n                        if (!this.constructor._checkIfInRange(result, minParse, maxParse)) {\n                            // The result is out of the range limits, stop the loop here\n                            break;\n                        }\n\n                        // Save the last good known result\n                        lastGoodKnownResult = result;\n\n                        // Update the local variables for the next loop\n                        pastedTextIndex++;\n                        lastGoodKnownResultIndex++;\n                    }\n\n                    // Update the last caret position where to insert a new number\n                    caretPositionOnInitialTextAfterPasting = lastGoodKnownResultIndex;\n\n                    if (leftPartContainedADot) {\n                        // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\n                        caretPositionOnInitialTextAfterPasting--;\n                    }\n\n                    result = lastGoodKnownResult;\n\n                    break;\n                /* 4c. Normal paste behavior:\n                 * Insert the pasted number inside the current unformatted text, at the right caret position or selection\n                 */\n                case AutoNumeric.options.onInvalidPaste.error:\n                case AutoNumeric.options.onInvalidPaste.ignore:\n                case AutoNumeric.options.onInvalidPaste.clamp:\n                default:\n                    // 1. Generate the unformatted result\n                    var leftFormattedPart2 = initialFormattedValue.slice(0, selectionStart);\n                    var rightFormattedPart2 = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);\n\n                    if (selectionStart !== selectionEnd) {\n                        // a. If there is a selection, remove the selected part, and return the left and right part\n                        result = this._preparePastedText(leftFormattedPart2 + rightFormattedPart2);\n                    } else {\n                        // b. Else if this is only one caret (and therefore no selection), then return the left and right part\n                        result = this._preparePastedText(initialFormattedValue);\n                    }\n\n                    // Add back the negative sign if needed\n                    if (isInitialValueNegative) {\n                        result = _AutoNumericHelper2.default.setRawNegativeSign(result);\n                    }\n\n                    // Build the unformatted result string\n                    caretPositionOnInitialTextAfterPasting = _AutoNumericHelper2.default.convertCharacterCountToIndexPosition(_AutoNumericHelper2.default.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, this.settings.decimalCharacter));\n                    if (isPasteNegativeAndInitialValueIsPositive) {\n                        // If the initial paste is negative and the initial value is not, then I must offset the caret position by one place to the right to take the additional hyphen into account\n                        caretPositionOnInitialTextAfterPasting++;\n                        //TODO Quid if the negative sign is not on the left (negativePositiveSignPlacement and currencySymbolPlacement)?\n                    }\n\n                    leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);\n                    rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);\n                    if (pastedText === '.') {\n                        // If the user only paste a single decimal character, then we remove the previously existing one (if any)\n                        if (_AutoNumericHelper2.default.contains(leftPart, '.')) {\n                            // If I remove a dot here, then I need to update the caret position (decrement it by 1) when positioning it\n                            // To do so, we keep that info in order to modify the caret position later\n                            leftPartContainedADot = true;\n                            leftPart = leftPart.replace('.', '');\n                        }\n                        rightPart = rightPart.replace('.', '');\n                    }\n                    // -- Here, we are good to go to continue on the same basis\n\n                    // Generate the unformatted result\n                    result = '' + leftPart + pastedText + rightPart;\n\n                    // 2. Calculate the caret position in the unformatted value, for later use\n                    if (selectionStart === selectionEnd) {\n                        // There is no selection, then the caret position is set after the pasted text\n                        var indexWherePastedTextHasBeenInserted = _AutoNumericHelper2.default.convertCharacterCountToIndexPosition(_AutoNumericHelper2.default.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, this.settings.decimalCharacter));\n                        caretPositionOnInitialTextAfterPasting = indexWherePastedTextHasBeenInserted + pastedText.length; // I must not count the characters that have been removed from the pasted text (ie. '.')\n                    } else {\n                        if (isAllInputTextSelected) {\n                            // Special case when all the input text is selected before pasting, which means we'll completely erase its content and paste only the clipboard content\n                            caretPositionOnInitialTextAfterPasting = result.length;\n                        } else if (rightPart === '') {\n                            // If the user selected from the caret position to the end of the input (on the far right)\n                            caretPositionOnInitialTextAfterPasting = _AutoNumericHelper2.default.convertCharacterCountToIndexPosition(_AutoNumericHelper2.default.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, this.settings.decimalCharacter)) + pastedText.length;\n                        } else {\n                            // Normal case\n                            var indexSelectionEndInRawValue = _AutoNumericHelper2.default.convertCharacterCountToIndexPosition(_AutoNumericHelper2.default.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionEnd, this.settings.decimalCharacter));\n\n                            // Here I must not count the characters that have been removed from the pasted text (ie. '.'), or the thousand separators in the initial selected text\n                            var selectedText = _AutoNumericHelper2.default.getElementValue(e.target).slice(selectionStart, selectionEnd);\n                            caretPositionOnInitialTextAfterPasting = indexSelectionEndInRawValue - selectionSize + _AutoNumericHelper2.default.countCharInText(this.settings.digitGroupSeparator, selectedText) + pastedText.length;\n                        }\n                    }\n\n                    // Modify the caret position for special cases, only if the whole input has not been selected\n                    if (!isAllInputTextSelected) {\n                        if (isPasteNegativeAndInitialValueIsPositive) {\n                            // If the pasted value has a '-' sign, but the initial value does not, offset the index by one\n                            caretPositionOnInitialTextAfterPasting++;\n                        }\n\n                        if (leftPartContainedADot) {\n                            // If a dot has been removed for the part on the left of the caret, we decrement the caret index position\n                            caretPositionOnInitialTextAfterPasting--;\n                        }\n                    }\n            }\n\n            // 5. Check if the result is a valid number, if not, drop the paste and do nothing.\n            if (!_AutoNumericHelper2.default.isNumber(result) || result === '') {\n                if (this.settings.onInvalidPaste === AutoNumeric.options.onInvalidPaste.error) {\n                    _AutoNumericHelper2.default.throwError('The pasted value \\'' + rawPastedText + '\\' would result into an invalid content \\'' + result + '\\'.'); //TODO Should we send a warning instead of throwing an error?\n                    //TODO This is not DRY ; refactor with above\n                }\n                return;\n            }\n\n            // 6. If it's a valid number, check if it falls inside the minimum and maximum value. If this fails, modify the value following this procedure :\n            /*\n             * If 'error' (this is the default) :\n             *      - Normal paste behavior.\n             *      - Try to set the new value, if it fails, then throw an error in the console.\n             *      - Do not change the input value, do not change the current selection.\n             * If 'ignore' :\n             *      - Normal paste behavior.\n             *      - Try to set the new value, if it fails, do nothing more.\n             *      - Do not change the input value, do not change the current selection.\n             * If 'clamp' :\n             *      - Normal paste behavior.\n             *      - Try to set the new value, if it fails, set the value to the minimum or maximum limit, whichever is closest to the\n             *        paste result.\n             *      - Change the caret position to be positioned on the left hand side of the decimal character.\n             * If 'truncate' :\n             *      - Truncate paste behavior.\n             *      - Try to set the new value, until it fails (if the result is out of the min and max value limits).\n             *      - Drop the remaining non-pasted numbers, and keep the last known non-failing result.\n             *      - Change the caret position to be positioned after the last pasted character.\n             * If 'replace' :\n             *      - Replace paste behavior.\n             *      - Try to set the new value, until it fails (if the result is out of the min and max value limits).\n             *     - Then try to replace as many numbers as possible with the pasted ones. Once it fails, keep the last known non-failing result.\n             *      - Change the caret position to be positioned after the last pasted character.\n             */\n            var valueHasBeenSet = false;\n            var valueHasBeenClamped = false;\n            try {\n                this.set(result);\n                valueHasBeenSet = true;\n            } catch (error) {\n                var clampedValue = void 0;\n                switch (this.settings.onInvalidPaste) {\n                    case AutoNumeric.options.onInvalidPaste.clamp:\n                        clampedValue = _AutoNumericHelper2.default.clampToRangeLimits(result, this.settings);\n                        try {\n                            this.set(clampedValue);\n                        } catch (error) {\n                            _AutoNumericHelper2.default.throwError('Fatal error: Unable to set the clamped value \\'' + clampedValue + '\\'.');\n                        }\n\n                        valueHasBeenClamped = true;\n                        valueHasBeenSet = true;\n                        result = clampedValue; // This is used only for setting the caret position later\n                        break;\n                    case AutoNumeric.options.onInvalidPaste.error:\n                    case AutoNumeric.options.onInvalidPaste.truncate:\n                    case AutoNumeric.options.onInvalidPaste.replace:\n                        // Throw an error message\n                        _AutoNumericHelper2.default.throwError('The pasted value \\'' + rawPastedText + '\\' results in a value \\'' + result + '\\' that is outside of the minimum [' + this.settings.minimumValue + '] and maximum [' + this.settings.maximumValue + '] value range.');\n                    // falls through\n                    case AutoNumeric.options.onInvalidPaste.ignore:\n                    // Do nothing\n                    // falls through\n                    default:\n                        return; // ...and nothing else should be changed\n                }\n            }\n\n            // 7. Then lastly, set the caret position at the right logical place\n            var targetValue = _AutoNumericHelper2.default.getElementValue(e.target);\n            var caretPositionInFormattedNumber = void 0;\n            if (valueHasBeenSet) {\n                switch (this.settings.onInvalidPaste) {\n                    case AutoNumeric.options.onInvalidPaste.clamp:\n                        if (valueHasBeenClamped) {\n                            if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                                _AutoNumericHelper2.default.setElementSelection(e.target, targetValue.length - this.settings.currencySymbol.length); // This puts the caret on the right of the last decimal place\n                            } else {\n                                _AutoNumericHelper2.default.setElementSelection(e.target, targetValue.length); // ..and this on the far right\n                            }\n\n                            break;\n                        } // else if the value has not been clamped, the default behavior is used...\n                    // falls through\n                    case AutoNumeric.options.onInvalidPaste.error:\n                    case AutoNumeric.options.onInvalidPaste.ignore:\n                    case AutoNumeric.options.onInvalidPaste.truncate:\n                    case AutoNumeric.options.onInvalidPaste.replace:\n                    default:\n                        // Whenever one or multiple characters are pasted, this means we have to manage the potential thousand separators that could be added by the formatting\n                        caretPositionInFormattedNumber = _AutoNumericHelper2.default.findCaretPositionInFormattedNumber(result, caretPositionOnInitialTextAfterPasting, targetValue, this.settings.decimalCharacter);\n                        _AutoNumericHelper2.default.setElementSelection(e.target, caretPositionInFormattedNumber);\n                }\n            }\n\n            // 8. We make sure we send an input event only if the result is different than the initial value before the paste\n            if (valueHasBeenSet && initialFormattedValue !== targetValue) {\n                // On a 'normal' non-autoNumeric input, an `input` event is sent when a paste is done. We mimic that.\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.native.input, e.target);\n            }\n        }\n\n        /**\n         * When focusing out of the input, we check if the value has changed, and if it has, then we send a `change` event (since the native one would have been prevented by `e.preventDefault()` called in the other event listeners).\n         * We also update the info of the focused state in the `this.isFocused` variable.\n         *\n         * @param {Event} e\n         */\n\n    }, {\n        key: '_onBlur',\n        value: function _onBlur(e) {\n            if (_AutoNumericHelper2.default.getElementValue(e.target) !== this.valueOnFocus) {\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.native.change, e.target);\n            }\n\n            // Keep track if the element is currently focused\n            this.isFocused = false;\n        }\n\n        /**\n         * Handler for 'wheel' event\n         *\n         * @param {WheelEvent} e\n         */\n\n    }, {\n        key: '_onWheel',\n        value: function _onWheel(e) {\n            // If the user is using the 'Shift' key modifier, then we ignore the wheel event\n            // This special behavior is applied in order to avoid preventing the user to scroll the page if the inputs are covering the whole available space.\n            // If that's the case, then he can use the 'Shift' modifier key while using the mouse wheel in order to bypass the increment/decrement feature\n            // This is useful on small screen where some badly configured inputs could use all the available space.\n            if (!e.shiftKey && this.settings.modifyValueOnWheel) {\n                // 0) First, save the caret position so we can set it back once the value has been changed\n                var selectionStart = e.target.selectionStart || 0;\n                var selectionEnd = e.target.selectionEnd || 0;\n\n                // 1) Get the unformatted value\n                var currentUnformattedValue = this.settings.rawValue;\n                var result = void 0;\n                if (_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(currentUnformattedValue)) {\n                    // If by default the input is empty, start at '0'\n                    if (this.settings.minimumValue > 0 || this.settings.maximumValue < 0) {\n                        // or if '0' is not between min and max value, 'minimumValue' if the user does a wheelup, 'maximumValue' if the user does a wheeldown\n                        if (_AutoNumericHelper2.default.isWheelUpEvent(e)) {\n                            result = this.settings.minimumValue;\n                        } else if (_AutoNumericHelper2.default.isWheelDownEvent(e)) {\n                            result = this.settings.maximumValue;\n                        } else {\n                            _AutoNumericHelper2.default.throwError('The event is not a \\'wheel\\' event.');\n                        }\n                    } else {\n                        result = 0;\n                    }\n                } else {\n                    result = currentUnformattedValue;\n                }\n\n                result = +result; // Typecast to a number needed for the following addition/subtraction\n\n                // 2) Increment/Decrement the value\n                // But first, choose the increment/decrement method ; fixed or progressive\n                if (_AutoNumericHelper2.default.isNumber(this.settings.wheelStep)) {\n                    var step = +this.settings.wheelStep; // Typecast to a number needed for the following addition/subtraction\n                    // Fixed method\n                    // This is the simplest method, where a fixed offset in added/subtracted from the current value\n                    if (_AutoNumericHelper2.default.isWheelUpEvent(e)) {\n                        // Increment\n                        result = result + step;\n                    } else if (_AutoNumericHelper2.default.isWheelDownEvent(e)) {\n                        // Decrement\n                        result = result - step;\n                    }\n                } else {\n                    // Progressive method\n                    // For this method, we calculate an offset that is in relation to the size of the current number (using only the integer part size).\n                    // The bigger the number, the bigger the offset (usually the number count in the integer part minus 3, except for small numbers where a different behavior is better for the user experience).\n                    if (_AutoNumericHelper2.default.isWheelUpEvent(e)) {\n                        // Increment\n                        result = _AutoNumericHelper2.default.addAndRoundToNearestAuto(result);\n                    } else if (_AutoNumericHelper2.default.isWheelDownEvent(e)) {\n                        // Decrement\n                        result = _AutoNumericHelper2.default.subtractAndRoundToNearestAuto(result);\n                    }\n                }\n\n                // 3) Set the new value so it gets formatted\n                // First clamp the result if needed\n                result = _AutoNumericHelper2.default.clampToRangeLimits(result, this.settings);\n                if (result !== +currentUnformattedValue) {\n                    // Only 'set' the value if it has changed. For instance 'set' should not happen if the user hits a limit and continue to try to go past it since we clamp the value.\n                    this.set(result);\n                }\n\n                //XXX Do not prevent if the value is not modified? From a UX point of view, preventing the wheel event when the user use it on top of an autoNumeric element should always be done, even if the value does not change. Perhaps that could affect other scripts relying on this event to be sent though.\n                e.preventDefault(); // We prevent the page to scroll while we increment/decrement the value\n\n                // 4) Finally, we set back the caret position/selection\n                // There is no need to take into account the fact that the number count could be different at the end of the wheel event ; it would be too complex and most of the time unreliable\n                this._setSelection(selectionStart, selectionEnd);\n            }\n        }\n\n        /**\n         * Handler for 'drop' event\n         *\n         * @param {DragEvent} e\n         */\n\n    }, {\n        key: '_onDrop',\n        value: function _onDrop(e) {\n            e.preventDefault();\n            var droppedText = e.dataTransfer.getData('text/plain');\n            var cleanedValue = this.unformatOther(droppedText);\n            this.set(cleanedValue);\n        }\n\n        /**\n         * Handler for 'submit' events happening on the parent <form> element\n         */\n\n    }, {\n        key: '_onFormSubmit',\n        value: function _onFormSubmit() {\n            if (this.settings.unformatOnSubmit) {\n                this._setElementValue(this.settings.rawValue);\n            }\n        }\n\n        /**\n         * Listen for the `alt` key keydown event globally, and if the event is caught, unformat the AutoNumeric element that is hovered by the mouse.\n         *\n         * @param {KeyboardEvent} e\n         * @private\n         */\n\n    }, {\n        key: '_onKeydownGlobal',\n        value: function _onKeydownGlobal(e) {\n            //TODO Find a way to keep the caret position between the alt keyup/keydown states\n            if (_AutoNumericHelper2.default.character(e) === _AutoNumericEnum2.default.keyName.Alt) {\n                var hoveredElement = _AutoNumericHelper2.default.getHoveredElement();\n                if (AutoNumeric.isManagedByAutoNumeric(hoveredElement)) {\n                    var anElement = AutoNumeric.getAutoNumericElement(hoveredElement);\n                    this.constructor._unformatAltHovered(anElement);\n                }\n            }\n        }\n\n        /**\n         * Listen for the `alt` key keyup event globally, and if the event is caught, reformat the AutoNumeric element that is hovered by the mouse.\n         *\n         * @param {KeyboardEvent} e\n         * @private\n         */\n\n    }, {\n        key: '_onKeyupGlobal',\n        value: function _onKeyupGlobal(e) {\n            if (_AutoNumericHelper2.default.character(e) === _AutoNumericEnum2.default.keyName.Alt) {\n                var hoveredElement = _AutoNumericHelper2.default.getHoveredElement();\n                if (AutoNumeric.isManagedByAutoNumeric(hoveredElement)) {\n                    var anElement = AutoNumeric.getAutoNumericElement(hoveredElement);\n                    this.constructor._reformatAltHovered(anElement);\n                }\n            }\n        }\n\n        /**\n         * Return `true` if the DOM element is supported by autoNumeric.\n         * A supported element is an element whitelisted in the `allowedTagList`.\n         *\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isElementTagSupported',\n        value: function _isElementTagSupported() {\n            if (!_AutoNumericHelper2.default.isElement(this.domElement)) {\n                _AutoNumericHelper2.default.throwError('The DOM element is not valid, ' + this.domElement + ' given.');\n            }\n\n            return _AutoNumericHelper2.default.isInArray(this.domElement.tagName.toLowerCase(), this.allowedTagList);\n        }\n\n        /**\n         * Return `true` in the DOM element is an <input>.\n         *\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isInputElement',\n        value: function _isInputElement() {\n            return this.domElement.tagName.toLowerCase() === 'input';\n        }\n\n        /**\n         * Return `true` if the input type is supported by AutoNumeric\n         *\n         * @returns {boolean}\n         * @throws\n         */\n\n    }, {\n        key: '_isInputTypeSupported',\n        value: function _isInputTypeSupported() {\n            return this.domElement.type === 'text' || this.domElement.type === 'hidden' || this.domElement.type === 'tel' || _AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.domElement.type);\n        }\n\n        /**\n         * Check if the DOM element is supported by autoNumeric.\n         * A supported element is either an <input> element with the right 'type' attribute, or a tag whitelisted in the `allowedTagList`.\n         * If the check fails, this method throws.\n         * This function also set the info `this.isInputElement` which keep tracks if the DOM element is an <input> or not, and the `this.isContentEditable` if the element has the `contenteditable` attribute set to `true`.\n         *\n         * @throws\n         * @private\n         */\n\n    }, {\n        key: '_checkElement',\n        value: function _checkElement() {\n            var currentElementTag = this.domElement.tagName.toLowerCase();\n\n            if (!this._isElementTagSupported()) {\n                _AutoNumericHelper2.default.throwError('The <' + currentElementTag + '> tag is not supported by autoNumeric');\n            }\n\n            if (this._isInputElement()) {\n                if (!this._isInputTypeSupported()) {\n                    _AutoNumericHelper2.default.throwError('The input type \"' + this.domElement.type + '\" is not supported by autoNumeric');\n                }\n\n                this.isInputElement = true;\n            } else {\n                this.isInputElement = false;\n                this.isContentEditable = this.domElement.hasAttribute('contenteditable') && this.domElement.getAttribute('contenteditable') === 'true';\n            }\n        }\n\n        /**\n         * Formats the default value on page load.\n         * This is called only if the `formatOnPageLoad` option is set to `true`.\n         *\n         * @param {number|string|null} forcedInitialValue The value that should be used for initialization, in place on the eventual html one\n         */\n\n    }, {\n        key: '_formatDefaultValueOnPageLoad',\n        value: function _formatDefaultValueOnPageLoad() {\n            var forcedInitialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            var setValue = true;\n            var currentValue = void 0;\n            if (!_AutoNumericHelper2.default.isNull(forcedInitialValue)) {\n                currentValue = forcedInitialValue;\n            } else {\n                currentValue = _AutoNumericHelper2.default.getElementValue(this.domElement);\n            }\n\n            if (this.isInputElement || this.isContentEditable) {\n                /*\n                 * If the input value has been set by the dev, but not directly as an attribute in the html, then it takes\n                 * precedence and should get formatted during the initialization (if this input value is a valid number and that the\n                 * developer wants it formatted on init (cf. the `settings.formatOnPageLoad` option)).\n                 * Note; this is true whatever the developer has set for `data-default-value-override` in the html (asp.net users).\n                 *\n                 * In other words : if `defaultValueOverride` is not null, it means the developer is trying to prevent postback problems.\n                 * But if `input.value` is set to a number, and the html `value` attribute is not set, then it means the dev has\n                 * changed the input value, and then it means we should not overwrite his own decision to do so.\n                 * Hence, if `defaultValueOverride` is not null, but `input.value` is a number and `this.domElement.hasAttribute('value')`\n                 * is false, we should ignore `defaultValueOverride` altogether.\n                 */\n                var unLocalizedCurrentValue = this.constructor._toNumericValue(currentValue, this.settings); // This allows to use a localized value on startup\n                if (!this.domElement.hasAttribute('value') || this.domElement.getAttribute('value') === '') {\n                    // Check if the `value` is valid or not\n                    if (!isNaN(Number(unLocalizedCurrentValue)) && Infinity !== unLocalizedCurrentValue) {\n                        this.set(unLocalizedCurrentValue);\n                        setValue = false;\n                    } else {\n                        // If not, inform the developer that nothing usable has been provided\n                        _AutoNumericHelper2.default.throwError('The value [' + currentValue + '] used in the input is not a valid value autoNumeric can work with.');\n                    }\n                } else {\n                    /* Checks for :\n                     * - page reload from back button, and\n                     * - ASP.net form post back\n                     *      The following HTML data attribute is REQUIRED (data-an-default=\"same value as the value attribute\")\n                     *      example: <asp:TextBox runat=\"server\" id=\"someID\" text=\"1234.56\" data-an-default=\"1234.56\">\n                     */\n                    if (this.settings.defaultValueOverride !== null && this.settings.defaultValueOverride.toString() !== currentValue || this.settings.defaultValueOverride === null && currentValue !== '' && currentValue !== this.domElement.getAttribute('value') || currentValue !== '' && this.domElement.getAttribute('type') === 'hidden' && !_AutoNumericHelper2.default.isNumber(unLocalizedCurrentValue)) {\n                        if (this.settings.decimalPlacesShownOnFocus !== null && this.settings.saveValueToSessionStorage || this.settings.scaleDivisor && this.settings.saveValueToSessionStorage) {\n                            this._setRawValue(this._saveValueToPersistentStorage('get'));\n                        }\n\n                        // If the decimalPlacesShownOnFocus value should NOT be saved in sessionStorage\n                        if (!this.settings.saveValueToSessionStorage) {\n                            var toStrip = void 0;\n\n                            if (this.settings.negativeBracketsTypeOnBlur !== null && this.settings.negativeSignCharacter !== '') {\n                                toStrip = this.constructor._removeBrackets(currentValue, this.settings);\n                            } else {\n                                toStrip = currentValue;\n                            }\n\n                            if ((this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.suffix || this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.prefix && this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) && this.settings.negativeSignCharacter !== '' && _AutoNumericHelper2.default.isNegative(currentValue)) {\n                                this._setRawValue(this.settings.negativeSignCharacter + this.constructor._stripAllNonNumberCharacters(toStrip, this.settings, true, this.isFocused));\n                            } else {\n                                this._setRawValue(this.constructor._stripAllNonNumberCharacters(toStrip, this.settings, true, this.isFocused));\n                            }\n                        }\n\n                        setValue = false;\n                    }\n                }\n\n                if (currentValue === '') {\n                    switch (this.settings.emptyInputBehavior) {\n                        case AutoNumeric.options.emptyInputBehavior.focus:\n                            setValue = false;\n                            break;\n                        //TODO What about the `AutoNumeric.options.emptyInputBehavior.press` value?\n                        case AutoNumeric.options.emptyInputBehavior.always:\n                            this._setElementValue(this.settings.currencySymbol);\n                            setValue = false;\n                            break;\n                        case AutoNumeric.options.emptyInputBehavior.zero:\n                            this.set('0');\n                            setValue = false;\n                            break;\n                        default:\n                        //\n                    }\n                } else if (setValue && currentValue === this.domElement.getAttribute('value')) {\n                    this.set(currentValue);\n                }\n            } else {\n                if (this.settings.defaultValueOverride === null) {\n                    this.set(currentValue);\n                } else {\n                    if (this.settings.defaultValueOverride === currentValue) {\n                        this.set(currentValue);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Enhance the user experience by modifying the default `negativePositiveSignPlacement` option depending on `currencySymbol` and `currencySymbolPlacement`.\n         *\n         * If the user has not set the placement of the negative sign (`negativePositiveSignPlacement`), but has set a currency symbol (`currencySymbol`),\n         * then we modify the default value of `negativePositiveSignPlacement` in order to keep the resulting output logical by default :\n         * - \"$-1,234.56\" instead of \"-$1,234.56\" ({currencySymbol: \"$\", negativePositiveSignPlacement: \"r\"})\n         * - \"-1,234.56$\" instead of \"1,234.56-$\" ({currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"p\"})\n         */\n\n    }, {\n        key: '_correctNegativePositiveSignPlacementOption',\n        value: function _correctNegativePositiveSignPlacementOption() {\n            // If negativePositiveSignPlacement is already set, we do not overwrite it\n            if (!_AutoNumericHelper2.default.isNull(this.settings.negativePositiveSignPlacement)) {\n                return;\n            }\n\n            if (!_AutoNumericHelper2.default.isUndefined(this.settings) && _AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.settings.negativePositiveSignPlacement) && !_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(this.settings.currencySymbol)) {\n                switch (this.settings.currencySymbolPlacement) {\n                    case AutoNumeric.options.currencySymbolPlacement.suffix:\n                        this.settings.negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.prefix; // Default -1,234.56 €\n                        break;\n                    case AutoNumeric.options.currencySymbolPlacement.prefix:\n                        this.settings.negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.left; // Default -$1,234.56\n                        break;\n                    default:\n                    //\n                }\n            } else {\n                // Sets the default value if `negativePositiveSignPlacement` is `null`\n                this.settings.negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.left;\n            }\n        }\n\n        /**\n         * Correct the `caretPositionOnFocus` and `selectOnFocus` options, since setting both leads to a conflict.\n         *\n         * @param {object} options The options passed as an argument by the user\n         * @returns {object}\n         * @private\n         */\n\n    }, {\n        key: '_calculateVMinAndVMaxIntegerSizes',\n\n\n        /**\n         * Analyze and save the minimumValue and maximumValue integer size for later uses\n         */\n        value: function _calculateVMinAndVMaxIntegerSizes() {\n            var _settings$maximumValu = this.settings.maximumValue.toString().split('.'),\n                _settings$maximumValu2 = _slicedToArray(_settings$maximumValu, 1),\n                maximumValueIntegerPart = _settings$maximumValu2[0];\n\n            var _ref = !this.settings.minimumValue && this.settings.minimumValue !== 0 ? [] : this.settings.minimumValue.toString().split('.'),\n                _ref2 = _slicedToArray(_ref, 1),\n                minimumValueIntegerPart = _ref2[0];\n\n            maximumValueIntegerPart = maximumValueIntegerPart.replace('-', '');\n            minimumValueIntegerPart = minimumValueIntegerPart.replace('-', '');\n\n            this.settings.mIntPos = Math.max(maximumValueIntegerPart.length, 1);\n            this.settings.mIntNeg = Math.max(minimumValueIntegerPart.length, 1);\n        }\n\n        /**\n         * Modify `decimalPlacesOverride` as needed\n         */\n\n    }, {\n        key: '_correctDecimalPlacesOverrideOption',\n        value: function _correctDecimalPlacesOverrideOption() {\n            if (_AutoNumericHelper2.default.isNull(this.settings.decimalPlacesOverride)) {\n                this.settings.decimalPlacesOverride = this.constructor._maximumVMinAndVMaxDecimalLength(this.settings.minimumValue, this.settings.maximumValue);\n            }\n\n            this.originalDecimalPlacesOverride = String(this.settings.decimalPlacesOverride);\n\n            // Most calculus assume `decimalPlacesOverride` is an integer, the following statement makes it clear (otherwise having it as a string leads to problems in rounding for instance)\n            this.settings.decimalPlacesOverride = Number(this.settings.decimalPlacesOverride);\n        }\n\n        /**\n         * Sets the alternative decimal separator key.\n         */\n\n    }, {\n        key: '_setAlternativeDecimalSeparatorCharacter',\n        value: function _setAlternativeDecimalSeparatorCharacter() {\n            if (_AutoNumericHelper2.default.isNull(this.settings.decimalCharacterAlternative) && Number(this.settings.decimalPlacesOverride) > 0) {\n                if (this.settings.decimalCharacter === '.' && this.settings.digitGroupSeparator !== ',') {\n                    this.settings.decimalCharacterAlternative = ',';\n                } else if (this.settings.decimalCharacter === ',' && this.settings.digitGroupSeparator !== '.') {\n                    this.settings.decimalCharacterAlternative = '.';\n                }\n            }\n        }\n\n        /**\n         * Caches regular expressions for _stripAllNonNumberCharacters\n         *\n         * @param {object} settings\n         * @param {object} regex\n         */\n\n    }, {\n        key: '_transformOptionsValuesToDefaultTypes',\n\n\n        /**\n         * Modify the user settings to make them 'exploitable' later.\n         */\n        value: function _transformOptionsValuesToDefaultTypes() {\n            for (var key in this.settings) {\n                if (this.settings.hasOwnProperty(key)) {\n                    var value = this.settings[key];\n\n                    // Convert the strings 'true' and 'false' to booleans\n                    if (value === 'true' || value === 'false') {\n                        this.settings[key] = value === 'true';\n                    }\n\n                    // Convert numbers in options to strings\n                    //TODO Only transform the values of type 'Number' to 'String' if it's a currency number (so that we can have big numbers). Do not convert other numbers (ie. `historySize`)\n                    if (typeof value === 'number') {\n                        this.settings[key] = value.toString();\n                    }\n                }\n            }\n        }\n\n        /**\n         * Convert the old settings options name to new ones.\n         *\n         * @param {object} options\n         */\n\n    }, {\n        key: '_setSettings',\n\n\n        /**\n         * Analyse the settings/options passed by the user, validate and clean them, then set them into `this.settings`.\n         * Note: This sets the settings to `null` if somehow the settings objet is undefined or empty\n         *\n         * @param {object} options\n         * @param {boolean} update - If set to `true`, then the settings already exists and this function only updates them instead of recreating them from scratch\n         * @throws\n         */\n        value: function _setSettings(options) {\n            var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n            // If the user used old options, we convert them to new ones\n            if (update || !_AutoNumericHelper2.default.isNull(options)) {\n                this.constructor._convertOldOptionsToNewOnes(options);\n            }\n\n            if (update) {\n                // The settings are updated\n                this._mergeSettings(options);\n            } else {\n                // The settings are generated for the first time\n                this.settings = {};\n                // If we couldn't grab any settings, create them from the default ones and combine them with the options passed as a parameter as well as with the HTML5 `data-*` info (via `this.domElement.dataset`), if any.\n                this._mergeSettings(this.constructor.getDefaultConfig(), this.domElement.dataset, options, { rawValue: '' });\n                this.caretFix = false;\n                this.throwInput = true; // Throw input event\n                this.allowedTagList = _AutoNumericEnum2.default.allowedTagList;\n                this.runOnce = false;\n                this.hoveredWithAlt = false; // Keep tracks if the current AutoNumeric element is hovered by the mouse cursor while `Alt` is pressed\n                this.androidSelectionStart = null; // If `null`, then we are not on an Android device (the keyCode is not always equal to 229)\n            }\n\n            // Modify the user settings to make them 'exploitable'\n            this._transformOptionsValuesToDefaultTypes();\n\n            // Improve the `negativePositiveSignPlacement` option if needed\n            this._correctNegativePositiveSignPlacementOption();\n\n            // Set the `caretPositionOnFocus` and `selectOnFocus` options so that they do not conflict, if one of those have been set manually by the user.\n            // If order to check that, we take a look at the original options the user passed as an argument, not `this.settings` that have been merged with the default settings.\n            this.settings = this.constructor._correctCaretPositionOnFocusAndSelectOnFocusOptions(this.settings);\n\n            // Set the negative and positive signs, as needed\n            this.settings.negativeSignCharacter = this.settings.minimumValue < 0 ? '-' : '';\n            this.settings.positiveSignCharacter = this.settings.maximumValue >= 0 ? '+' : '';\n\n            // Additional changes to the settings object\n            this._runCallbacksFoundInTheSettingsObject();\n            this._calculateVMinAndVMaxIntegerSizes();\n            this._correctDecimalPlacesOverrideOption();\n            this._setAlternativeDecimalSeparatorCharacter();\n            this._setTrailingNegativeSignInfo();\n            this.regex = {}; // Create the object that will store the regular expressions\n            this.constructor._cachesUsualRegularExpressions(this.settings, this.regex);\n            this._setBrackets();\n\n            // Validate the settings. Both tests throws if necessary.\n            this.constructor.validate(this.settings, false, options);\n            if (_AutoNumericHelper2.default.isEmptyObj(this.settings)) {\n                _AutoNumericHelper2.default.throwError('Unable to set the settings, those are invalid ; an empty object was given.');\n            }\n\n            // Original settings saved for use when decimalPlacesShownOnFocus, scaleDivisor & noSeparatorOnFocus options are being used\n            this._keepAnOriginalSettingsCopy();\n        }\n\n        /**\n         * Convert the `value` parameter that can either be :\n         * - a real number,\n         * - a string representing a real number, or\n         * - a string representing a localized number (with specific group separators and decimal character),\n         * ...to a string representing a real 'javascript' number (ie. '1234' or '1234.567').\n         *\n         * This function returns `NaN` if such conversion fails.\n         *\n         * @param {int|float|string} value\n         * @param {object} settings\n         * @returns {string|NaN}\n         */\n\n    }, {\n        key: '_preparePastedText',\n\n\n        /**\n         * Return the pasted text that will be used.\n         *\n         * @param {string} text\n         * @returns {string|void|XML|*}\n         */\n        value: function _preparePastedText(text) {\n            return this.constructor._stripAllNonNumberCharacters(text, this.settings, true, this.isFocused).replace(this.settings.decimalCharacter, '.');\n        }\n\n        /**\n         * Return TRUE if the given value (a number as a string) is within the range set in the settings `minimumValue` and `maximumValue`, FALSE otherwise.\n         *\n         * @param {string} value\n         * @param {object} parsedMinValue Parsed via the `parseStr()` function\n         * @param {object} parsedMaxValue Parsed via the `parseStr()` function\n         * @returns {boolean}\n         */\n\n    }, {\n        key: '_updateInternalProperties',\n\n\n        /**\n         * Update the selection values as well as resets the internal state of the current AutoNumeric object.\n         * This keeps tracks of the current selection and resets the 'processed' and 'formatted' state.\n         *\n         * Note : Those two can change between the keydown, keypress and keyup events, that's why\n         *        this function is called on each event handler.\n         *\n         * @private\n         */\n        value: function _updateInternalProperties() {\n            this.selection = _AutoNumericHelper2.default.getElementSelection(this.domElement);\n            this.processed = false;\n            this.formatted = false;\n        }\n\n        /**\n         * Update the `event.key` attribute that triggered the given event.\n         *\n         * `event.key` describes:\n         * - the key name (if a non-printable character),\n         * - or directly the character that result from the key press used to trigger the event.\n         *\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n         * The key list is described here:\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n         *\n         * @param {Event|KeyboardEvent} e\n         * @private\n         */\n\n    }, {\n        key: '_updateEventKeyInfo',\n        value: function _updateEventKeyInfo(e) {\n            this.eventKey = _AutoNumericHelper2.default.character(e);\n        }\n\n        /**\n         * Save the unformatted element value.\n         * This is used in the 'cancellable' feature where the element value is saved on focus and input validation, to be used if the user wants to cancel his modifications by hitting the 'Escape' key.\n         *\n         * @private\n         */\n\n    }, {\n        key: '_saveCancellableValue',\n        value: function _saveCancellableValue() {\n            this.savedCancellableValue = this.settings.rawValue;\n        }\n\n        /**\n         * Set the text selection inside the input with the given start and end position.\n         *\n         * @param {int} start\n         * @param {int} end\n         * @private\n         */\n\n    }, {\n        key: '_setSelection',\n        value: function _setSelection(start, end) {\n            //TODO use this function to replace the direct calls to `setElementSelection()`, wherever possible\n            start = Math.max(start, 0);\n            end = Math.min(end, _AutoNumericHelper2.default.getElementValue(this.domElement).length);\n            this.selection = {\n                start: start,\n                end: end,\n                length: end - start\n            };\n\n            _AutoNumericHelper2.default.setElementSelection(this.domElement, start, end);\n        }\n\n        /**\n         * Set the caret position inside the input at the given position.\n         *\n         * @param {int} position\n         * @private\n         */\n\n    }, {\n        key: '_setCaretPosition',\n        value: function _setCaretPosition(position) {\n            this._setSelection(position, position);\n        }\n\n        /**\n         * Return an array containing the string parts located on the left and right side of the caret or selection.\n         * Those parts are left 'untouched', ie. formatted by autoNumeric.\n         *\n         * @returns {[string, string]} The parts on the left and right of the caret or selection\n         * @private\n         */\n\n    }, {\n        key: '_getLeftAndRightPartAroundTheSelection',\n        value: function _getLeftAndRightPartAroundTheSelection() {\n            var value = _AutoNumericHelper2.default.getElementValue(this.domElement);\n            var left = value.substring(0, this.selection.start);\n            var right = value.substring(this.selection.end, value.length);\n\n            return [left, right];\n        }\n\n        /**\n         * Return an array containing the string parts located on the left and right side of the caret or selection.\n         * Those parts are unformatted (stripped) of any non-numbers characters.\n         *\n         * @returns {[string, string]} The parts on the left and right of the caret or selection, unformatted.\n         * @private\n         */\n\n    }, {\n        key: '_getUnformattedLeftAndRightPartAroundTheSelection',\n        value: function _getUnformattedLeftAndRightPartAroundTheSelection() {\n            var _getLeftAndRightPartA = this._getLeftAndRightPartAroundTheSelection(),\n                _getLeftAndRightPartA2 = _slicedToArray(_getLeftAndRightPartA, 2),\n                left = _getLeftAndRightPartA2[0],\n                right = _getLeftAndRightPartA2[1];\n\n            if (left === '' && right === '') {\n                return ['', ''];\n            }\n\n            // If changing the sign and `left` is equal to the number zero, prevent stripping the leading zero(s)\n            var stripZeros = true;\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.Hyphen && Number(left) === 0) {\n                stripZeros = false;\n            }\n\n            if (this.isTrailingNegative && _AutoNumericHelper2.default.isNegative(right) && !_AutoNumericHelper2.default.isNegative(left)) {\n                // Only set the negative sign if the value is negative\n                left = '-' + left;\n                right = right.replace(this.settings.negativeSignCharacter, '');\n            }\n\n            left = AutoNumeric._stripAllNonNumberCharacters(left, this.settings, stripZeros, this.isFocused);\n            right = AutoNumeric._stripAllNonNumberCharacters(right, this.settings, false, this.isFocused);\n\n            return [left, right];\n        }\n\n        /**\n         * Strip parts from excess characters and leading zeros.\n         *\n         * @param {string} left\n         * @param {string} right\n         * @returns {[*,*,*]}\n         * @private\n         */\n\n    }, {\n        key: '_normalizeParts',\n        value: function _normalizeParts(left, right) {\n            //TODO Refactor with `_getUnformattedLeftAndRightPartAroundTheSelection` which share a lot of similar code\n            // if changing the sign and left is equal to the number zero - prevents stripping the leading zeros\n            var stripZeros = true;\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.Hyphen && Number(left) === 0) {\n                stripZeros = false;\n            }\n\n            if (this.isTrailingNegative && _AutoNumericHelper2.default.isNegative(right) && !_AutoNumericHelper2.default.isNegative(left)) {\n                // Only set the negative sign if the value is negative\n                left = '-' + left;\n                right = right.replace(this.settings.negativeSignCharacter, '');\n            }\n\n            left = AutoNumeric._stripAllNonNumberCharacters(left, this.settings, stripZeros, this.isFocused);\n            right = AutoNumeric._stripAllNonNumberCharacters(right, this.settings, false, this.isFocused);\n\n            // Prevents multiple leading zeros from being entered\n            if (this.settings.leadingZero === AutoNumeric.options.leadingZero.deny && (this.eventKey === _AutoNumericEnum2.default.keyName.num0 || this.eventKey === _AutoNumericEnum2.default.keyName.numpad0) && Number(left) === 0 &&\n            // If `right` is not empty and the first character is not `decimalCharacter`\n            !_AutoNumericHelper2.default.contains(left, this.settings.decimalCharacter) && right !== '') {\n                left = left.substring(0, left.length - 1);\n            }\n\n            // Insert zero there is a leading dot\n            var newValue = left + right;\n            if (this.settings.decimalCharacter) {\n                var m = newValue.match(new RegExp('^' + this.regex.aNegRegAutoStrip + '\\\\' + this.settings.decimalCharacter));\n                if (m) {\n                    left = left.replace(m[1], m[1] + '0');\n                    newValue = left + right;\n                }\n            }\n\n            return [left, right, newValue];\n        }\n\n        /**\n         * Set part of number to value while keeping the cursor position. //TODO What about the cursor selection?\n         * This function also sets the raw value.\n         *\n         * @param {string} left\n         * @param {string} right\n         * @param {boolean} isPaste\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_setValueParts',\n        value: function _setValueParts(left, right) {\n            var isPaste = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            var _normalizeParts2 = this._normalizeParts(left, right),\n                _normalizeParts3 = _slicedToArray(_normalizeParts2, 3),\n                normalizedLeft = _normalizeParts3[0],\n                normalizedRight = _normalizeParts3[1],\n                normalizedNewValue = _normalizeParts3[2];\n\n            var _AutoNumeric$_checkIf = AutoNumeric._checkIfInRangeWithOverrideOption(normalizedNewValue, this.settings),\n                _AutoNumeric$_checkIf2 = _slicedToArray(_AutoNumeric$_checkIf, 2),\n                minTest = _AutoNumeric$_checkIf2[0],\n                maxTest = _AutoNumeric$_checkIf2[1];\n\n            var position = normalizedLeft.length;\n            var newValue = normalizedNewValue;\n\n            if (minTest && maxTest) {\n                newValue = AutoNumeric._truncateDecimalPlaces(newValue, this.settings, isPaste);\n                //TODO Check if we need to replace the hard-coded ',' with settings.decimalCharacter\n                var testValue = _AutoNumericHelper2.default.contains(newValue, ',') ? newValue.replace(',', '.') : newValue;\n                if (testValue === '' || testValue === this.settings.negativeSignCharacter) {\n                    this._setRawValue(this.settings.emptyInputBehavior === AutoNumeric.options.emptyInputBehavior.zero ? '0' : '');\n                } else {\n                    this._setRawValue(this._trimLeadingAndTrailingZeros(testValue));\n                }\n\n                if (position > newValue.length) {\n                    position = newValue.length;\n                }\n\n                // Make sure when the user enter a '0' on the far left with a leading zero option set to 'deny', that the caret does not moves since the input is dropped (fix issue #283)\n                if (position === 1 && normalizedLeft === '0' && this.settings.leadingZero === AutoNumeric.options.leadingZero.deny) {\n                    // If the user enter `0`, then the caret is put on the right side of it (Fix issue #299)\n                    if (normalizedRight === '' || normalizedLeft === '0' && normalizedRight !== '') {\n                        position = 1;\n                    } else {\n                        position = 0;\n                    }\n                }\n\n                _AutoNumericHelper2.default.setElementValue(this.domElement, newValue);\n                this._setCaretPosition(position);\n\n                return true;\n            }\n\n            if (!minTest) {\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.minRangeExceeded, this.domElement);\n            } else if (!maxTest) {\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.maxRangeExceeded, this.domElement);\n            }\n\n            return false;\n        }\n\n        /**\n         * Helper function for `_expandSelectionOnSign()`.\n         *\n         * @returns {Array} Array containing [signPosition, currencySymbolPosition] of a formatted value\n         * @private\n         */\n\n    }, {\n        key: '_getSignPosition',\n        value: function _getSignPosition() {\n            var result = void 0;\n            if (this.settings.currencySymbol) {\n                var currencySymbolLen = this.settings.currencySymbol.length;\n                var value = _AutoNumericHelper2.default.getElementValue(this.domElement);\n                if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix) {\n                    var hasNeg = this.settings.negativeSignCharacter && value && value.charAt(0) === this.settings.negativeSignCharacter;\n                    if (hasNeg) {\n                        result = [1, currencySymbolLen + 1];\n                    } else {\n                        result = [0, currencySymbolLen];\n                    }\n                } else {\n                    var valueLen = value.length;\n                    result = [valueLen - currencySymbolLen, valueLen];\n                }\n            } else {\n                result = [1000, -1];\n            }\n\n            return result;\n        }\n\n        /**\n         * Expands selection to cover whole sign\n         * Prevents partial deletion/copying/overwriting of a sign\n         * @private\n         */\n\n    }, {\n        key: '_expandSelectionOnSign',\n        value: function _expandSelectionOnSign() {\n            var _getSignPosition2 = this._getSignPosition(),\n                _getSignPosition3 = _slicedToArray(_getSignPosition2, 2),\n                signPosition = _getSignPosition3[0],\n                currencySymbolPosition = _getSignPosition3[1];\n\n            var selection = this.selection;\n\n            // If selection catches something except sign and catches only space from sign\n            if (selection.start < currencySymbolPosition && selection.end > signPosition) {\n                // Then select without empty space\n                if ((selection.start < signPosition || selection.end > currencySymbolPosition) && _AutoNumericHelper2.default.getElementValue(this.domElement).substring(Math.max(selection.start, signPosition), Math.min(selection.end, currencySymbolPosition)).match(/^\\s*$/)) {\n                    if (selection.start < signPosition) {\n                        this._setSelection(selection.start, signPosition);\n                    } else {\n                        this._setSelection(currencySymbolPosition, selection.end);\n                    }\n                } else {\n                    // Else select with whole sign\n                    this._setSelection(Math.min(selection.start, signPosition), Math.max(selection.end, currencySymbolPosition));\n                }\n            }\n        }\n\n        /**\n         * Try to strip pasted value to digits\n         */\n\n    }, {\n        key: '_checkPaste',\n        value: function _checkPaste() {\n            if (!_AutoNumericHelper2.default.isUndefined(this.valuePartsBeforePaste)) {\n                var oldParts = this.valuePartsBeforePaste;\n\n                var _getLeftAndRightPartA3 = this._getLeftAndRightPartAroundTheSelection(),\n                    _getLeftAndRightPartA4 = _slicedToArray(_getLeftAndRightPartA3, 2),\n                    left = _getLeftAndRightPartA4[0],\n                    right = _getLeftAndRightPartA4[1];\n\n                // Try to strip the pasted value first\n\n\n                delete this.valuePartsBeforePaste;\n\n                var modifiedLeftPart = left.substr(0, oldParts[0].length) + AutoNumeric._stripAllNonNumberCharacters(left.substr(oldParts[0].length), this.settings, true, this.isFocused);\n                if (!this._setValueParts(modifiedLeftPart, right, true)) {\n                    _AutoNumericHelper2.default.setElementValue(this.domElement, oldParts.join(''));\n                    this._setCaretPosition(oldParts[0].length);\n                }\n            }\n        }\n\n        /**\n         * Return `true` is the given key should be ignored or not.\n         *\n         * @param {string} eventKeyName\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_processNonPrintableKeysAndShortcuts',\n\n\n        /**\n         * Process copying, cutting and pasting, as well as undo/redoing and cursor moving.\n         * Return `true` if further processing should not be performed.\n         *\n         * @param {KeyboardEvent} e\n         * @returns {boolean}\n         * @private\n         */\n        value: function _processNonPrintableKeysAndShortcuts(e) {\n            // Catch the ctrl up on ctrl-v\n            if ((e.ctrlKey || e.metaKey) && e.type === 'keyup' && !_AutoNumericHelper2.default.isUndefined(this.valuePartsBeforePaste) || e.shiftKey && this.eventKey === _AutoNumericEnum2.default.keyName.Insert) {\n                //TODO Move this test inside the `onKeyup` handler\n                this._checkPaste();\n\n                return false;\n            }\n\n            // Skip all function keys (F1-F12), Windows keys, tab and other special keys\n            if (this.constructor._shouldSkipEventKey(this.eventKey)) {\n                return true;\n            }\n\n            // If a \"Select all\" keyboard shortcut is detected (ctrl + a)\n            if ((e.ctrlKey || e.metaKey) && this.eventKey === _AutoNumericEnum2.default.keyName.a) {\n                if (this.settings.selectNumberOnly) {\n                    // `preventDefault()` is used here to prevent the browser to first select all the input text (including the currency sign), otherwise we would see that whole selection first in a flash, then the selection with only the number part without the currency sign.\n                    e.preventDefault();\n                    //TODO replace `selectNumber` by `select`?\n                    this.selectNumber();\n                }\n\n                return true;\n            }\n\n            // If a \"Copy\", \"Paste\" or \"Cut\" keyboard shortcut is detected (respectively 'ctrl + c', 'ctrl + v' or 'ctrl + x')\n            if ((e.ctrlKey || e.metaKey) && (this.eventKey === _AutoNumericEnum2.default.keyName.c || this.eventKey === _AutoNumericEnum2.default.keyName.v || this.eventKey === _AutoNumericEnum2.default.keyName.x)) {\n                if (e.type === 'keydown') {\n                    this._expandSelectionOnSign();\n                }\n\n                // Try to prevent wrong paste\n                if (this.eventKey === _AutoNumericEnum2.default.keyName.v || this.eventKey === _AutoNumericEnum2.default.keyName.Insert) {\n                    if (e.type === 'keydown' || e.type === 'keypress') {\n                        if (_AutoNumericHelper2.default.isUndefined(this.valuePartsBeforePaste)) {\n                            this.valuePartsBeforePaste = this._getLeftAndRightPartAroundTheSelection();\n                        }\n                    } else {\n                        this._checkPaste();\n                    }\n                }\n\n                return e.type === 'keydown' || e.type === 'keypress' || this.eventKey === _AutoNumericEnum2.default.keyName.c;\n            }\n\n            if (e.ctrlKey || e.metaKey) {\n                if (this.eventKey === _AutoNumericEnum2.default.keyName.Z || this.eventKey === _AutoNumericEnum2.default.keyName.z) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n\n            // Jump over the thousand separator\n            //TODO Move this test inside the `onKeydown` handler\n            if (this.eventKey === _AutoNumericEnum2.default.keyName.LeftArrow || this.eventKey === _AutoNumericEnum2.default.keyName.RightArrow) {\n                if (e.type === 'keydown' && !e.shiftKey) {\n                    var value = _AutoNumericHelper2.default.getElementValue(this.domElement);\n                    if (this.eventKey === _AutoNumericEnum2.default.keyName.LeftArrow && (value.charAt(this.selection.start - 2) === this.settings.digitGroupSeparator || value.charAt(this.selection.start - 2) === this.settings.decimalCharacter)) {\n                        this._setCaretPosition(this.selection.start - 1);\n                    } else if (this.eventKey === _AutoNumericEnum2.default.keyName.RightArrow && (value.charAt(this.selection.start + 1) === this.settings.digitGroupSeparator || value.charAt(this.selection.start + 1) === this.settings.decimalCharacter)) {\n                        this._setCaretPosition(this.selection.start + 1);\n                    }\n                }\n\n                return true;\n            }\n\n            return _AutoNumericHelper2.default.isInArray(this.eventKey, _AutoNumericEnum2.default.keyName._directionKeys);\n        }\n\n        /**\n         * Process deletion of characters when the minus sign is to the right of the numeric characters.\n         *\n         * @param {string} left The part on the left of the caret or selection\n         * @param {string} right The part on the right of the caret or selection\n         * @returns {[string, string]}\n         * @private\n         */\n\n    }, {\n        key: '_processCharacterDeletionIfTrailingNegativeSign',\n        value: function _processCharacterDeletionIfTrailingNegativeSign(_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                left = _ref4[0],\n                right = _ref4[1];\n\n            var value = _AutoNumericHelper2.default.getElementValue(this.domElement);\n\n            if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.suffix) {\n                if (this.eventKey === _AutoNumericEnum2.default.keyName.Backspace) {\n                    this.caretFix = this.selection.start >= value.indexOf(this.settings.suffixText) && this.settings.suffixText !== '';\n                    if (value.charAt(this.selection.start - 1) === '-') {\n                        left = left.substring(1);\n                    } else if (this.selection.start <= value.length - this.settings.suffixText.length) {\n                        left = left.substring(0, left.length - 1);\n                    }\n                } else {\n                    this.caretFix = this.selection.start >= value.indexOf(this.settings.suffixText) && this.settings.suffixText !== '';\n                    if (this.selection.start >= value.indexOf(this.settings.currencySymbol) + this.settings.currencySymbol.length) {\n                        right = right.substring(1, right.length);\n                    }\n                    if (_AutoNumericHelper2.default.isNegative(left) && value.charAt(this.selection.start) === '-') {\n                        left = left.substring(1);\n                    }\n                }\n            }\n\n            if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                switch (this.settings.negativePositiveSignPlacement) {\n                    case AutoNumeric.options.negativePositiveSignPlacement.left:\n                        this.caretFix = this.selection.start >= value.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length;\n                        if (this.eventKey === _AutoNumericEnum2.default.keyName.Backspace) {\n                            if (this.selection.start === value.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length && _AutoNumericHelper2.default.contains(value, this.settings.negativeSignCharacter)) {\n                                left = left.substring(1);\n                            } else if (left !== '-' && (this.selection.start <= value.indexOf(this.settings.negativeSignCharacter) || !_AutoNumericHelper2.default.contains(value, this.settings.negativeSignCharacter))) {\n                                left = left.substring(0, left.length - 1);\n                            }\n                        } else {\n                            if (left[0] === '-') {\n                                right = right.substring(1);\n                            }\n                            if (this.selection.start === value.indexOf(this.settings.negativeSignCharacter) && _AutoNumericHelper2.default.contains(value, this.settings.negativeSignCharacter)) {\n                                left = left.substring(1);\n                            }\n                        }\n                        break;\n                    case AutoNumeric.options.negativePositiveSignPlacement.right:\n                        this.caretFix = this.selection.start >= value.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length;\n                        if (this.eventKey === _AutoNumericEnum2.default.keyName.Backspace) {\n                            if (this.selection.start === value.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length) {\n                                left = left.substring(1);\n                            } else if (left !== '-' && this.selection.start <= value.indexOf(this.settings.negativeSignCharacter) - this.settings.currencySymbol.length) {\n                                left = left.substring(0, left.length - 1);\n                            } else if (left !== '' && !_AutoNumericHelper2.default.contains(value, this.settings.negativeSignCharacter)) {\n                                left = left.substring(0, left.length - 1);\n                            }\n                        } else {\n                            this.caretFix = this.selection.start >= value.indexOf(this.settings.currencySymbol) && this.settings.currencySymbol !== '';\n                            if (this.selection.start === value.indexOf(this.settings.negativeSignCharacter)) {\n                                left = left.substring(1);\n                            }\n\n                            right = right.substring(1);\n                        }\n                        break;\n                }\n            }\n\n            return [left, right];\n        }\n\n        /**\n         * Process the deletion of characters.\n         */\n\n    }, {\n        key: '_processCharacterDeletion',\n        value: function _processCharacterDeletion() {\n            var left = void 0;\n            var right = void 0;\n\n            if (!this.selection.length) {\n                var _getUnformattedLeftAn = this._getUnformattedLeftAndRightPartAroundTheSelection();\n\n                var _getUnformattedLeftAn2 = _slicedToArray(_getUnformattedLeftAn, 2);\n\n                left = _getUnformattedLeftAn2[0];\n                right = _getUnformattedLeftAn2[1];\n\n                if (left === '' && right === '') {\n                    this.throwInput = false;\n                }\n\n                if (this.isTrailingNegative && _AutoNumericHelper2.default.isNegative(_AutoNumericHelper2.default.getElementValue(this.domElement))) {\n                    var _processCharacterDele = this._processCharacterDeletionIfTrailingNegativeSign([left, right]);\n\n                    var _processCharacterDele2 = _slicedToArray(_processCharacterDele, 2);\n\n                    left = _processCharacterDele2[0];\n                    right = _processCharacterDele2[1];\n                } else {\n                    if (this.eventKey === _AutoNumericEnum2.default.keyName.Backspace) {\n                        left = left.substring(0, left.length - 1);\n                    } else {\n                        right = right.substring(1, right.length);\n                    }\n                }\n            } else {\n                this._expandSelectionOnSign();\n\n                var _getUnformattedLeftAn3 = this._getUnformattedLeftAndRightPartAroundTheSelection();\n\n                var _getUnformattedLeftAn4 = _slicedToArray(_getUnformattedLeftAn3, 2);\n\n                left = _getUnformattedLeftAn4[0];\n                right = _getUnformattedLeftAn4[1];\n            }\n\n            this._setValueParts(left, right);\n        }\n\n        /**\n         * Return `true` if the key is allowed.\n         * This function decides if the key pressed should be dropped or accepted, and modify the value 'on-the-fly' accordingly.\n         * //TODO This should use another function in order to separate the test and the modification\n         *\n         * @returns {boolean}\n         */\n\n    }, {\n        key: '_processCharacterInsertion',\n        value: function _processCharacterInsertion() {\n            var _getUnformattedLeftAn5 = this._getUnformattedLeftAndRightPartAroundTheSelection(),\n                _getUnformattedLeftAn6 = _slicedToArray(_getUnformattedLeftAn5, 2),\n                left = _getUnformattedLeftAn6[0],\n                right = _getUnformattedLeftAn6[1];\n\n            if (this.eventKey !== _AutoNumericEnum2.default.keyName.AndroidDefault) {\n                this.throwInput = true;\n            }\n\n            // Start rules when the decimal character key is pressed always use numeric pad dot to insert decimal separator\n            // Do not allow decimal character if no decimal part allowed\n            if (this.eventKey === this.settings.decimalCharacter || this.settings.decimalCharacterAlternative && this.eventKey === this.settings.decimalCharacterAlternative || this.eventKey === '.' || this.eventKey === ',' || this.eventKey === _AutoNumericEnum2.default.keyName.NumpadDot) {\n                if (!this.settings.decimalPlacesOverride || !this.settings.decimalCharacter) {\n                    return true;\n                }\n\n                // Do not allow decimal character before negativeSignCharacter character\n                if (this.settings.negativeSignCharacter && _AutoNumericHelper2.default.contains(right, this.settings.negativeSignCharacter)) {\n                    return true;\n                }\n\n                // Do not allow a decimal character if another decimal character is already present\n                if (_AutoNumericHelper2.default.contains(left, this.settings.decimalCharacter)) {\n                    return true;\n                }\n\n                if (right.indexOf(this.settings.decimalCharacter) > 0) {\n                    return true;\n                }\n\n                if (right.indexOf(this.settings.decimalCharacter) === 0) {\n                    right = right.substr(1);\n                }\n\n                this._setValueParts(left + this.settings.decimalCharacter, right);\n\n                return true;\n            }\n\n            // Prevent entering the minus sign if it's not allowed (Note: `this.settings.negativeSignCharacter` is only set if the minimumValue or maximumValue is lower than zero, allowing negative numbers to be entered)\n            if ((this.eventKey === '-' || this.eventKey === '+') && this.settings.negativeSignCharacter === '-') {\n                if (left === '' && _AutoNumericHelper2.default.contains(right, this.settings.negativeSignCharacter)) {\n                    // The value is originally negative (with a trailing negative sign)\n                    right = right.replace(this.settings.negativeSignCharacter, '');\n                } else if (_AutoNumericHelper2.default.isNegative(left)) {\n                    // The value is originally negative (with a leading negative sign)\n                    // Remove the negative sign, effectively converting the value to a positive one\n                    left = left.replace('-', ''); //TODO replace with '+' if `showPositiveSign`?\n                } else {\n                    // The value is originally positive\n                    left = this.settings.negativeSignCharacter + left;\n                }\n\n                this._setValueParts(left, right);\n\n                return true;\n            }\n\n            // If the user tries to insert a digit before the minus sign\n            var eventNumber = Number(this.eventKey);\n            if (eventNumber >= 0 && eventNumber <= 9) {\n                if (this.settings.negativeSignCharacter && left === '' && _AutoNumericHelper2.default.contains(right, this.settings.negativeSignCharacter)) {\n                    left = this.settings.negativeSignCharacter;\n                    right = right.substring(1, right.length);\n                }\n\n                if (this.settings.maximumValue <= 0 && this.settings.minimumValue < this.settings.maximumValue && !_AutoNumericHelper2.default.contains(_AutoNumericHelper2.default.getElementValue(this.domElement), this.settings.negativeSignCharacter) && this.eventKey !== '0') {\n                    left = this.settings.negativeSignCharacter + left;\n                }\n\n                this._setValueParts(left + this.eventKey, right);\n\n                return true;\n            }\n\n            // Prevent any other characters\n            this.throwInput = false;\n\n            return false;\n        }\n\n        /**\n         * Formatting of just processed value while keeping the cursor position\n         *\n         * @param {Event} e\n         * @private\n         */\n\n    }, {\n        key: '_formatValue',\n        value: function _formatValue(e) {\n            var _this5 = this;\n\n            var elementValue = _AutoNumericHelper2.default.getElementValue(this.domElement);\n\n            var _getUnformattedLeftAn7 = this._getUnformattedLeftAndRightPartAroundTheSelection(),\n                _getUnformattedLeftAn8 = _slicedToArray(_getUnformattedLeftAn7, 1),\n                left = _getUnformattedLeftAn8[0];\n\n            // No grouping separator and no currency sign\n\n\n            if ((this.settings.digitGroupSeparator === '' || this.settings.digitGroupSeparator !== '' && !_AutoNumericHelper2.default.contains(elementValue, this.settings.digitGroupSeparator)) && (this.settings.currencySymbol === '' || this.settings.currencySymbol !== '' && !_AutoNumericHelper2.default.contains(elementValue, this.settings.currencySymbol))) {\n                var _elementValue$split = elementValue.split(this.settings.decimalCharacter),\n                    _elementValue$split2 = _slicedToArray(_elementValue$split, 1),\n                    subParts = _elementValue$split2[0];\n\n                var negativeSign = '';\n                if (_AutoNumericHelper2.default.isNegative(subParts)) {\n                    negativeSign = '-';\n                    subParts = subParts.replace('-', '');\n                    left = left.replace('-', '');\n                }\n\n                // Strip leading zero on positive value if needed\n                if (negativeSign === '' && subParts.length > this.settings.mIntPos && left.charAt(0) === '0') {\n                    left = left.slice(1);\n                }\n\n                // Strip leading zero on negative value if needed\n                if (negativeSign === '-' && subParts.length > this.settings.mIntNeg && left.charAt(0) === '0') {\n                    left = left.slice(1);\n                }\n\n                left = negativeSign + left;\n            }\n\n            var value = this.constructor._addGroupSeparators(elementValue, this.settings, this.isFocused);\n            var position = value.length;\n            if (value) {\n                // Prepare regexp which searches for cursor position from unformatted left part\n                var leftAr = left.split('');\n\n                // Fixes caret position with trailing minus sign\n                if ((this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.suffix || this.settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.prefix && this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) && leftAr[0] === '-' && this.settings.negativeSignCharacter !== '') {\n                    leftAr.shift();\n\n                    if ((this.eventKey === _AutoNumericEnum2.default.keyName.Backspace || this.eventKey === _AutoNumericEnum2.default.keyName.Delete) && this.caretFix) {\n                        if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix && this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.left || this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.suffix) {\n                            leftAr.push('-');\n                            this.caretFix = e.type === 'keydown';\n                        }\n\n                        if (this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix && this.settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.right) {\n                            (function () {\n                                var signParts = _this5.settings.currencySymbol.split('');\n                                var escapeChr = ['\\\\', '^', '$', '.', '|', '?', '*', '+', '(', ')', '['];\n                                var escapedParts = [];\n                                signParts.forEach(function (i, miniParts) {\n                                    miniParts = signParts[i];\n                                    if (_AutoNumericHelper2.default.isInArray(miniParts, escapeChr)) {\n                                        escapedParts.push('\\\\' + miniParts);\n                                    } else {\n                                        escapedParts.push(miniParts);\n                                    }\n                                });\n\n                                if (_this5.eventKey === _AutoNumericEnum2.default.keyName.Backspace) {\n                                    escapedParts.push('-');\n                                }\n\n                                // Pushing the escaped sign\n                                leftAr.push(escapedParts.join(''));\n                                _this5.caretFix = e.type === 'keydown';\n                            })();\n                        }\n                    }\n                }\n\n                for (var i = 0; i < leftAr.length; i++) {\n                    if (!leftAr[i].match('\\\\d')) {\n                        leftAr[i] = '\\\\' + leftAr[i];\n                    }\n                }\n\n                var leftReg = new RegExp('^.*?' + leftAr.join('.*?'));\n\n                // Search cursor position in formatted value\n                var newLeft = value.match(leftReg);\n                if (newLeft) {\n                    position = newLeft[0].length;\n\n                    // If the positive sign is shown, calculate the caret position accordingly\n                    if (this.settings.showPositiveSign) {\n                        if (position === 0 && newLeft.input.charAt(0) === this.settings.positiveSignCharacter) {\n                            position = newLeft.input.indexOf(this.settings.currencySymbol) === 1 ? this.settings.currencySymbol.length + 1 : 1;\n                        }\n\n                        if (position === 0 && newLeft.input.charAt(this.settings.currencySymbol.length) === this.settings.positiveSignCharacter) {\n                            position = this.settings.currencySymbol.length + 1;\n                        }\n                    }\n\n                    // If we are just before the sign which is in prefix position\n                    if ((position === 0 && value.charAt(0) !== this.settings.negativeSignCharacter || position === 1 && value.charAt(0) === this.settings.negativeSignCharacter) && this.settings.currencySymbol && this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix) {\n                        // Place caret after prefix sign\n                        //TODO Should the test be 'isNegative' instead of 'isNegativeStrict' in order to search for '-' everywhere in the string?\n                        position = this.settings.currencySymbol.length + (_AutoNumericHelper2.default.isNegativeStrict(value) ? 1 : 0);\n                    }\n                } else {\n                    if (this.settings.currencySymbol && this.settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                        // If we could not find a place for cursor and have a sign as a suffix\n                        // Place caret before suffix currency sign\n                        position -= this.settings.currencySymbol.length;\n                    }\n\n                    if (this.settings.suffixText) {\n                        // If we could not find a place for cursor and have a suffix\n                        // Place caret before suffix\n                        position -= this.settings.suffixText.length;\n                    }\n                }\n            }\n\n            // Only update the value if it has changed. This prevents modifying the selection, if any.\n            if (value !== elementValue || value === elementValue && (this.eventKey === _AutoNumericEnum2.default.keyName.num0 || this.eventKey === _AutoNumericEnum2.default.keyName.numpad0)) {\n                this._setElementValue(value);\n                this._setCaretPosition(position);\n            }\n\n            if (this.androidSelectionStart !== null) {\n                // If an Android browser is detected, fix the caret position\n                // Unfortunately this does not fix all android browsers, only Android Chrome currently.\n                // This is due to the fact those provide different order of events and/or keycodes thrown (this is a real mess :|).\n                this._setCaretPosition(this.androidSelectionStart);\n            }\n\n            this.formatted = true; //TODO Rename `this.formatted` to `this._formatExecuted`, since it's possible this function does not need to format anything (in the case where the keycode is dropped for instance)\n        }\n\n        /**\n         * Serialize the form child <input> element values to a string, or an Array.\n         * The output format is defined with the `formatType` argument.\n         * This is loosely based upon http://stackoverflow.com/a/40705993/2834898.\n         *\n         * @param {HTMLFormElement} form\n         * @param {boolean} intoAnArray If `true`, instead of generating a string, it generates an Array.\n         * @param {string} formatType If `'unformatted'`, then the AutoNumeric elements values are unformatted, if `'localized'`, then the AutoNumeric elements values are localized, and if `'formatted'`, then the AutoNumeric elements values are kept formatted. In either way, this function does not modify the value of each DOM element, but only affect the value that is returned by that serialize function.\n         * @param {string} serializedSpaceCharacter Can either be the '+' character, or the '%20' string.\n         * @param {string|null} forcedOutputFormat If set, then this is the format that is used for the localization, instead of the default `outputFormat` option.\n         * @returns {string|Array}\n         * @private\n         */\n\n    }], [{\n        key: 'version',\n        value: function version() {\n            return '4.0.0-beta.16';\n        }\n\n        /**\n         * Take the parameters given to the AutoNumeric object, and output the three variables that are needed to finish initializing it :\n         * - domElement : The target DOM element\n         * - initialValue : The initial value, or `null` if none is given\n         * - userOptions : The option object\n         *\n         * @param {object|Array|number|string} arg1\n         * @param {object|Array|number|string|null} arg2\n         * @param {object|Array|number|string|null} arg3\n         * @returns {{domElement: *, initialValue: *, userOptions: *}}\n         * @throws\n         * @private\n         */\n\n    }, {\n        key: '_setArgumentsValues',\n        value: function _setArgumentsValues(arg1, arg2, arg3) {\n            // Basic check on the argument count\n            if (_AutoNumericHelper2.default.isNull(arg1)) {\n                _AutoNumericHelper2.default.throwError('At least one valid parameter is needed in order to initialize an AutoNumeric object');\n            }\n\n            // Prepare the arguments in order to create the AutoNumeric object with the right values\n            // Test the argument types\n            var isArg1Element = _AutoNumericHelper2.default.isElement(arg1);\n            var isArg1String = _AutoNumericHelper2.default.isString(arg1);\n\n            var isArg2Object = _AutoNumericHelper2.default.isObject(arg2);\n            var isArg2Number = _AutoNumericHelper2.default.isNumberOrArabic(arg2) || arg2 === '';\n            var isArg2Null = _AutoNumericHelper2.default.isNull(arg2);\n            var isArg2EmptyString = _AutoNumericHelper2.default.isEmptyString(arg2);\n\n            var isArg3Object = _AutoNumericHelper2.default.isObject(arg3);\n            var isArg3Null = _AutoNumericHelper2.default.isNull(arg3);\n\n            // Given the parameters passed, sort the data and return a stable state before the initialization\n            var domElement = void 0;\n            var userOptions = void 0;\n            var initialValue = void 0;\n\n            if (isArg1Element && isArg2Null && isArg3Null) {\n                // new AutoNumeric(domElement); // With the default options\n                domElement = arg1;\n                initialValue = null;\n                userOptions = null;\n            } else if (isArg1Element && isArg2Number && isArg3Null) {\n                // new AutoNumeric(domElement, 12345.789); // With the default options, and an initial value\n                // new AutoNumeric(domElement, '12345.789');\n                domElement = arg1;\n                initialValue = arg2;\n                userOptions = null;\n            } else if (isArg1Element && isArg2Object && isArg3Null) {\n                // new AutoNumeric(domElement, { options }); // With one option object\n                domElement = arg1;\n                initialValue = null;\n                userOptions = arg2;\n            } else if (isArg1Element && (isArg2Null || isArg2EmptyString) && isArg3Object) {\n                // new AutoNumeric(domElement, null, { options }); // With one option object\n                domElement = arg1;\n                initialValue = null;\n                userOptions = arg3;\n            } else if (isArg1String && isArg2Null && isArg3Null) {\n                // new AutoNumeric('.myCssClass > input');\n                domElement = document.querySelector(arg1);\n                initialValue = null;\n                userOptions = null;\n            } else if (isArg1String && isArg2Object && isArg3Null) {\n                // new AutoNumeric('.myCssClass > input', { options });\n                domElement = document.querySelector(arg1);\n                initialValue = null;\n                userOptions = arg2;\n            } else if (isArg1String && (isArg2Null || isArg2EmptyString) && isArg3Object) {\n                // new AutoNumeric('.myCssClass > input', null, { options });\n                domElement = document.querySelector(arg1);\n                initialValue = null;\n                userOptions = arg3;\n            } else if (isArg1String && isArg2Number && isArg3Null) {\n                // new AutoNumeric('.myCssClass > input', 12345.789);\n                // new AutoNumeric('.myCssClass > input', '12345.789');\n                // new AutoNumeric('.myCssClass > input', '');\n                domElement = document.querySelector(arg1);\n                initialValue = arg2;\n                userOptions = null;\n            } else if (isArg1String && isArg2Number && isArg3Object) {\n                // new AutoNumeric('.myCssClass > input', 12345.789, { options });\n                // new AutoNumeric('.myCssClass > input', '12345.789', { options });\n                // new AutoNumeric('.myCssClass > input', '', { options });\n                domElement = document.querySelector(arg1);\n                initialValue = arg2;\n                userOptions = arg3;\n            } else if (isArg1Element && isArg2Number && isArg3Object) {\n                // new AutoNumeric(domElement, 12345.789, { options });\n                // new AutoNumeric(domElement, '12345.789', { options });\n                // new AutoNumeric(domElement, '', { options });\n                domElement = arg1;\n                initialValue = arg2;\n                userOptions = arg3;\n            } else {\n                _AutoNumericHelper2.default.throwError('The parameters given to the AutoNumeric object are not valid, \\'' + arg1 + '\\', \\'' + arg2 + '\\' and \\'' + arg3 + '\\' given.');\n            }\n\n            if (_AutoNumericHelper2.default.isNull(domElement)) {\n                _AutoNumericHelper2.default.throwError('The selector \\'' + arg1 + '\\' did not select any valid DOM element. Please check on which element you called AutoNumeric.');\n            }\n\n            return { domElement: domElement, initialValue: initialValue, userOptions: userOptions };\n        }\n    }, {\n        key: '_unformatAltHovered',\n        value: function _unformatAltHovered(anElement) {\n            anElement.hoveredWithAlt = true;\n            anElement.unformat();\n        }\n\n        /**\n         * Reformat the given AutoNumeric element, and update the `hoveredWithAlt` variable.\n         *\n         * @param {AutoNumeric} anElement\n         * @private\n         */\n\n    }, {\n        key: '_reformatAltHovered',\n        value: function _reformatAltHovered(anElement) {\n            anElement.hoveredWithAlt = false;\n            anElement.reformat();\n        }\n\n        /**\n         * Return an array of autoNumeric elements, child of the <form> element passed as a parameter.\n         *\n         * @param {HTMLElement} formNode\n         * @returns {Array}\n         * @private\n         */\n\n    }, {\n        key: '_getChildANInputElement',\n        value: function _getChildANInputElement(formNode) {\n            var _this6 = this;\n\n            //FIXME à tester\n            var inputList = formNode.getElementsByTagName('input');\n\n            // Loop this list and keep only the inputs that are managed by AutoNumeric\n            var autoNumericInputs = [];\n            var inputElements = Array.prototype.slice.call(inputList, 0);\n            inputElements.forEach(function (input) {\n                if (_this6.test(input)) {\n                    autoNumericInputs.push(input);\n                }\n            });\n\n            return autoNumericInputs;\n        }\n\n        // Static methods\n        /**\n         * Test if the given domElement is already managed by AutoNumeric (if it has been initialized on the current page).\n         *\n         * @param {HTMLElement} domElement\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'test',\n        value: function test(domElement) {\n            return this._isInGlobalList(domElement);\n        }\n\n        /**\n         * Create a WeakMap with the given name.\n         *\n         * @param {string} weakMapName\n         * @private\n         */\n\n    }, {\n        key: '_createWeakMap',\n        value: function _createWeakMap(weakMapName) {\n            window[weakMapName] = new WeakMap();\n        }\n\n        /**\n         * Create a list of all the AutoNumeric elements that are initialized on the current page.\n         * This is needed in order to determine if a given dom element is already managed by autoNumeric.\n         * This uses a WeakMap in order to limit potential garbage collection problems.\n         * (cf. my tests on http://codepen.io/AnotherLinuxUser/pen/pRQGaM?editors=1011)\n         * @private\n         */\n\n    }, {\n        key: '_createGlobalList',\n        value: function _createGlobalList() {\n            // The check that this global list does not exists already is done in the add and remove functions already\n            this.autoNumericGlobalListName = 'autoNumericGlobalList'; //XXX This looks weird to set a variable on `this.` in a static method, but that really declare that variable like a static property\n            // Note: I should not get any memory leaks for referencing the DOM element in the `value`, this DOM element also being the `key`, according to the spec : http://www.ecma-international.org/ecma-262/6.0/#sec-weakmap-objects\n            this._createWeakMap(this.autoNumericGlobalListName);\n        }\n\n        /**\n         * Return `true` if the global AutoNumeric element list exists.\n         *\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_doesGlobalListExists',\n        value: function _doesGlobalListExists() {\n            var type = _typeof(window[this.autoNumericGlobalListName]);\n            return type !== 'undefined' && type === 'object';\n        }\n\n        /**\n         * Add the given object to the global AutoNumeric element list.\n         *\n         * @param {AutoNumeric} autoNumericObject\n         * @private\n         */\n\n    }, {\n        key: '_addToGlobalList',\n        value: function _addToGlobalList(autoNumericObject) {\n            if (!this._doesGlobalListExists()) {\n                this._createGlobalList();\n            }\n\n            var domElement = autoNumericObject.node();\n            // This checks if the object is not already in the global list before adding it.\n            // This could happen if an AutoNumeric element is initialized, then the DOM element is removed directly via `removeChild` (hence the reference does not get removed from the global list), then it get recreated and initialized again\n            if (this._isInGlobalList(domElement)) {\n                if (this._getFromGlobalList(domElement) === this) {\n                    // Do not add this AutoNumeric object again since it's already in that global list\n                    return;\n                } else {\n                    // Print a warning to warn that the domElement already has a reference in the global map (but we cannot for sure starts deleting those old references since they could still be used by another AutoNumeric object)\n                    _AutoNumericHelper2.default.warning('A reference to the DOM element you just initialized already exists in the global AutoNumeric element list. Please make sure to not initialize the same DOM element multiple times.');\n                }\n            }\n\n            window[this.autoNumericGlobalListName].set(domElement, autoNumericObject);\n        }\n\n        /**\n         * Remove the given object from the global AutoNumeric element list.\n         *\n         * @param {AutoNumeric} autoNumericObject\n         * @private\n         */\n\n    }, {\n        key: '_removeFromGlobalList',\n        value: function _removeFromGlobalList(autoNumericObject) {\n            //FIXME à tester\n            if (this._doesGlobalListExists()) {\n                window[this.autoNumericGlobalListName].delete(autoNumericObject.node());\n            }\n        }\n\n        /**\n         * Return the value associated to the key `domElement` passed as a parameter.\n         * The value is the AutoNumeric object that manages the DOM element `domElement`.\n         *\n         * @param {HTMLElement|HTMLInputElement} domElement\n         * @returns {null|AutoNumeric}\n         * @private\n         */\n\n    }, {\n        key: '_getFromGlobalList',\n        value: function _getFromGlobalList(domElement) {\n            //FIXME à tester\n            if (this._doesGlobalListExists()) {\n                return window[this.autoNumericGlobalListName].get(domElement);\n            }\n\n            return null;\n        }\n\n        /**\n         * Check if the given DOM element is in the global AutoNumeric element list.\n         *\n         * @param {HTMLElement|HTMLInputElement} domElement\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isInGlobalList',\n        value: function _isInGlobalList(domElement) {\n            //FIXME à tester\n            if (!this._doesGlobalListExists()) {\n                return false;\n            }\n\n            return window[this.autoNumericGlobalListName].has(domElement);\n        }\n    }, {\n        key: 'validate',\n        value: function validate(userOptions) {\n            var shouldExtendDefaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var originalOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n            if (_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(userOptions) || !_AutoNumericHelper2.default.isObject(userOptions)) {\n                _AutoNumericHelper2.default.throwError('The userOptions are invalid ; it should be a valid object, [' + userOptions + '] given.');\n            }\n\n            var isOriginalOptionAnObject = _AutoNumericHelper2.default.isObject(originalOptions);\n            if (!isOriginalOptionAnObject && !_AutoNumericHelper2.default.isNull(originalOptions)) {\n                _AutoNumericHelper2.default.throwError('The \\'originalOptions\\' parameter is invalid ; it should either be a valid option object or `null`, [' + userOptions + '] given.');\n            }\n\n            // If the user used old options, we convert them to new ones\n            if (!_AutoNumericHelper2.default.isNull(userOptions)) {\n                this._convertOldOptionsToNewOnes(userOptions);\n            }\n\n            // The user can choose if the `userOptions` has already been extended with the default options, or not\n            var options = void 0;\n            if (shouldExtendDefaultOptions) {\n                options = _extends({}, this.getDefaultConfig(), userOptions);\n            } else {\n                options = userOptions;\n            }\n\n            // First things first, we test that the `showWarnings` option is valid\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.showWarnings) && !_AutoNumericHelper2.default.isBoolean(options.showWarnings)) {\n                _AutoNumericHelper2.default.throwError('The debug option \\'showWarnings\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.showWarnings + '] given.');\n            }\n\n            // Define the regular expressions needed for the following tests\n            var testPositiveInteger = /^[0-9]+$/;\n            var testNumericalCharacters = /[0-9]+/;\n            // const testFloatAndPossibleNegativeSign = /^-?[0-9]+(\\.?[0-9]+)$/;\n            var testFloatOrIntegerAndPossibleNegativeSign = /^-?[0-9]+(\\.?[0-9]+)?$/;\n            var testPositiveFloatOrInteger = /^[0-9]+(\\.?[0-9]+)?$/;\n\n            // Then tests the options individually\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.allowDecimalPadding) && !_AutoNumericHelper2.default.isBoolean(options.allowDecimalPadding) && options.allowDecimalPadding !== AutoNumeric.options.allowDecimalPadding.floats) {\n                _AutoNumericHelper2.default.throwError('The control decimal padding option \\'allowDecimalPadding\\' is invalid ; it should be either \\'false\\', \\'true\\' or \\'floats\\', [' + options.allowDecimalPadding + '] given.');\n            }\n\n            if (!options.allowDecimalPadding && !_AutoNumericHelper2.default.isNull(options.decimalPlacesOverride)) {\n                _AutoNumericHelper2.default.warning('Setting \\'allowDecimalPadding\\' to [false] will override the current \\'decimalPlacesOverride\\' setting [' + options.decimalPlacesOverride + '].', options.showWarnings);\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.caretPositionOnFocus) && !_AutoNumericHelper2.default.isInArray(options.caretPositionOnFocus, [AutoNumeric.options.caretPositionOnFocus.start, AutoNumeric.options.caretPositionOnFocus.end, AutoNumeric.options.caretPositionOnFocus.decimalLeft, AutoNumeric.options.caretPositionOnFocus.decimalRight])) {\n                _AutoNumericHelper2.default.throwError('The display on empty string option \\'caretPositionOnFocus\\' is invalid ; it should either be `null`, \\'focus\\', \\'press\\', \\'always\\' or \\'zero\\', [' + options.caretPositionOnFocus + '] given.');\n            }\n\n            // Special case here for `caretPositionOnFocus` and `selectOnFocus` where we need to check the original non-tempered version of the options in order to check for conflicts, since using the default settings remove those and would prevent us warning the user that his option object is not correct.\n            var optionsToUse = void 0;\n            if (isOriginalOptionAnObject) {\n                optionsToUse = originalOptions;\n            } else {\n                optionsToUse = this._correctCaretPositionOnFocusAndSelectOnFocusOptions(userOptions);\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(optionsToUse) && optionsToUse.caretPositionOnFocus !== AutoNumeric.options.caretPositionOnFocus.doNoForceCaretPosition && optionsToUse.selectOnFocus === AutoNumeric.options.selectOnFocus.select) {\n                _AutoNumericHelper2.default.warning('The \\'selectOnFocus\\' option is set to \\'select\\', which is in conflict with the \\'caretPositionOnFocus\\' which is set to \\'' + optionsToUse.caretPositionOnFocus + '\\'. As a result, if this has been called when instantiating an AutoNumeric object, the \\'selectOnFocus\\' option is forced to \\'doNotSelect\\'.');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.digitGroupSeparator, [AutoNumeric.options.digitGroupSeparator.comma, AutoNumeric.options.digitGroupSeparator.dot, AutoNumeric.options.digitGroupSeparator.normalSpace, AutoNumeric.options.digitGroupSeparator.thinSpace, AutoNumeric.options.digitGroupSeparator.narrowNoBreakSpace, AutoNumeric.options.digitGroupSeparator.noBreakSpace, AutoNumeric.options.digitGroupSeparator.noSeparator, AutoNumeric.options.digitGroupSeparator.apostrophe, AutoNumeric.options.digitGroupSeparator.arabicThousandsSeparator, AutoNumeric.options.digitGroupSeparator.dotAbove])) {\n                _AutoNumericHelper2.default.throwError('The thousand separator character option \\'digitGroupSeparator\\' is invalid ; it should be \\',\\', \\'.\\', \\'\\u066C\\', \\'\\u02D9\\', \"\\'\", \\' \\', \\'\\u2009\\', \\'\\u202F\\', \\'\\xA0\\' or empty (\\'\\'), [' + options.digitGroupSeparator + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.noSeparatorOnFocus) && !_AutoNumericHelper2.default.isBoolean(options.noSeparatorOnFocus)) {\n                _AutoNumericHelper2.default.throwError('The \\'noSeparatorOnFocus\\' option is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.noSeparatorOnFocus + '] given.');\n            }\n\n            if (!testPositiveInteger.test(options.digitalGroupSpacing)) {\n                _AutoNumericHelper2.default.throwError('The digital grouping for thousand separator option \\'digitalGroupSpacing\\' is invalid ; it should be a positive integer, [' + options.digitalGroupSpacing + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.decimalCharacter, [AutoNumeric.options.decimalCharacter.comma, AutoNumeric.options.decimalCharacter.dot, AutoNumeric.options.decimalCharacter.middleDot, AutoNumeric.options.decimalCharacter.arabicDecimalSeparator, AutoNumeric.options.decimalCharacter.decimalSeparatorKeySymbol])) {\n                _AutoNumericHelper2.default.throwError('The decimal separator character option \\'decimalCharacter\\' is invalid ; it should be \\'.\\', \\',\\', \\'\\xB7\\', \\'\\u2396\\' or \\'\\u066B\\', [' + options.decimalCharacter + '] given.');\n            }\n\n            // Checks if the decimal and thousand characters are the same\n            if (options.decimalCharacter === options.digitGroupSeparator) {\n                _AutoNumericHelper2.default.throwError('autoNumeric will not function properly when the decimal character \\'decimalCharacter\\' [' + options.decimalCharacter + '] and the thousand separator \\'digitGroupSeparator\\' [' + options.digitGroupSeparator + '] are the same character.');\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.decimalCharacterAlternative) && !_AutoNumericHelper2.default.isString(options.decimalCharacterAlternative)) {\n                _AutoNumericHelper2.default.throwError('The alternate decimal separator character option \\'decimalCharacterAlternative\\' is invalid ; it should be a string, [' + options.decimalCharacterAlternative + '] given.');\n            }\n\n            if (options.currencySymbol !== '' && !_AutoNumericHelper2.default.isString(options.currencySymbol)) {\n                _AutoNumericHelper2.default.throwError('The currency symbol option \\'currencySymbol\\' is invalid ; it should be a string, [' + options.currencySymbol + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.currencySymbolPlacement, [AutoNumeric.options.currencySymbolPlacement.prefix, AutoNumeric.options.currencySymbolPlacement.suffix])) {\n                _AutoNumericHelper2.default.throwError('The placement of the currency sign option \\'currencySymbolPlacement\\' is invalid ; it should either be \\'p\\' (prefix) or \\'s\\' (suffix), [' + options.currencySymbolPlacement + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.negativePositiveSignPlacement, [AutoNumeric.options.negativePositiveSignPlacement.prefix, AutoNumeric.options.negativePositiveSignPlacement.suffix, AutoNumeric.options.negativePositiveSignPlacement.left, AutoNumeric.options.negativePositiveSignPlacement.right, AutoNumeric.options.negativePositiveSignPlacement.none])) {\n                _AutoNumericHelper2.default.throwError('The placement of the negative sign option \\'negativePositiveSignPlacement\\' is invalid ; it should either be \\'p\\' (prefix), \\'s\\' (suffix), \\'l\\' (left), \\'r\\' (right) or \\'null\\', [' + options.negativePositiveSignPlacement + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.showPositiveSign) && !_AutoNumericHelper2.default.isBoolean(options.showPositiveSign)) {\n                _AutoNumericHelper2.default.throwError('The show positive sign option \\'showPositiveSign\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.showPositiveSign + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isString(options.suffixText) || options.suffixText !== '' && (_AutoNumericHelper2.default.isNegative(options.suffixText) || testNumericalCharacters.test(options.suffixText))) {\n                _AutoNumericHelper2.default.throwError('The additional suffix option \\'suffixText\\' is invalid ; it should not contains the negative sign \\'-\\' nor any numerical characters, [' + options.suffixText + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.overrideMinMaxLimits) && !_AutoNumericHelper2.default.isInArray(options.overrideMinMaxLimits, [AutoNumeric.options.overrideMinMaxLimits.ceiling, AutoNumeric.options.overrideMinMaxLimits.floor, AutoNumeric.options.overrideMinMaxLimits.ignore])) {\n                _AutoNumericHelper2.default.throwError('The override min & max limits option \\'overrideMinMaxLimits\\' is invalid ; it should either be \\'ceiling\\', \\'floor\\' or \\'ignore\\', [' + options.overrideMinMaxLimits + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isString(options.maximumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.maximumValue)) {\n                _AutoNumericHelper2.default.throwError('The maximum possible value option \\'maximumValue\\' is invalid ; it should be a string that represents a positive or negative number, [' + options.maximumValue + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isString(options.minimumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.minimumValue)) {\n                _AutoNumericHelper2.default.throwError('The minimum possible value option \\'minimumValue\\' is invalid ; it should be a string that represents a positive or negative number, [' + options.minimumValue + '] given.');\n            }\n\n            if (parseFloat(options.minimumValue) > parseFloat(options.maximumValue)) {\n                _AutoNumericHelper2.default.throwError('The minimum possible value option is greater than the maximum possible value option ; \\'minimumValue\\' [' + options.minimumValue + '] should be smaller than \\'maximumValue\\' [' + options.maximumValue + '].');\n            }\n\n            if (!(_AutoNumericHelper2.default.isNull(options.decimalPlacesOverride) || _AutoNumericHelper2.default.isInt(options.decimalPlacesOverride) && options.decimalPlacesOverride >= 0 || // If integer option\n            _AutoNumericHelper2.default.isString(options.decimalPlacesOverride) && testPositiveInteger.test(options.decimalPlacesOverride)) // If string option\n            ) {\n                    _AutoNumericHelper2.default.throwError('The maximum number of decimal places option \\'decimalPlacesOverride\\' is invalid ; it should be a positive integer, [' + options.decimalPlacesOverride + '] given.');\n                }\n\n            // Write a warning message in the console if the number of decimal in minimumValue/maximumValue is overridden by decimalPlacesOverride (and not if decimalPlacesOverride is equal to the number of decimal used in minimumValue/maximumValue)\n            var vMinAndVMaxMaximumDecimalPlaces = this._maximumVMinAndVMaxDecimalLength(options.minimumValue, options.maximumValue);\n            if (!_AutoNumericHelper2.default.isNull(options.decimalPlacesOverride) && vMinAndVMaxMaximumDecimalPlaces !== Number(options.decimalPlacesOverride)) {\n                _AutoNumericHelper2.default.warning('Setting \\'decimalPlacesOverride\\' to [' + options.decimalPlacesOverride + '] will override the decimals declared in \\'minimumValue\\' [' + options.minimumValue + '] and \\'maximumValue\\' [' + options.maximumValue + '].', options.showWarnings);\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.decimalPlacesShownOnFocus) && (!_AutoNumericHelper2.default.isString(options.decimalPlacesShownOnFocus) || !testPositiveInteger.test(options.decimalPlacesShownOnFocus))) {\n                _AutoNumericHelper2.default.throwError('The number of expanded decimal places option \\'decimalPlacesShownOnFocus\\' is invalid ; it should be a positive integer, [' + options.decimalPlacesShownOnFocus + '] given.');\n            }\n\n            // Checks if the extended decimal places \"decimalPlacesShownOnFocus\" is greater than the normal decimal places \"decimalPlacesOverride\"\n            if (!_AutoNumericHelper2.default.isNull(options.decimalPlacesShownOnFocus) && !_AutoNumericHelper2.default.isNull(options.decimalPlacesOverride) && Number(options.decimalPlacesOverride) > Number(options.decimalPlacesShownOnFocus)) {\n                _AutoNumericHelper2.default.warning('The extended decimal places \\'decimalPlacesShownOnFocus\\' [' + options.decimalPlacesShownOnFocus + '] should be greater than the \\'decimalPlacesOverride\\' [' + options.decimalPlacesOverride + '] value. Currently, this will limit the ability of your client to manually change some of the decimal places. Do you really want to do that?', options.showWarnings);\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.scaleDivisor) && !testPositiveFloatOrInteger.test(options.scaleDivisor)) {\n                _AutoNumericHelper2.default.throwError('The scale divisor option \\'scaleDivisor\\' is invalid ; it should be a positive number, preferably an integer, [' + options.scaleDivisor + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.scaleDecimalPlaces) && !testPositiveInteger.test(options.scaleDecimalPlaces)) {\n                _AutoNumericHelper2.default.throwError('The scale number of decimals option \\'scaleDecimalPlaces\\' is invalid ; it should be a positive integer, [' + options.scaleDecimalPlaces + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.scaleSymbol) && !_AutoNumericHelper2.default.isString(options.scaleSymbol)) {\n                _AutoNumericHelper2.default.throwError('The scale symbol option \\'scaleSymbol\\' is invalid ; it should be a string, [' + options.scaleSymbol + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.saveValueToSessionStorage) && !_AutoNumericHelper2.default.isBoolean(options.saveValueToSessionStorage)) {\n                _AutoNumericHelper2.default.throwError('The save to session storage option \\'saveValueToSessionStorage\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.saveValueToSessionStorage + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.onInvalidPaste, [AutoNumeric.options.onInvalidPaste.error, AutoNumeric.options.onInvalidPaste.ignore, AutoNumeric.options.onInvalidPaste.clamp, AutoNumeric.options.onInvalidPaste.truncate, AutoNumeric.options.onInvalidPaste.replace])) {\n                _AutoNumericHelper2.default.throwError('The paste behavior option \\'onInvalidPaste\\' is invalid ; it should either be \\'error\\', \\'ignore\\', \\'clamp\\', \\'truncate\\' or \\'replace\\' (cf. documentation), [' + options.onInvalidPaste + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.roundingMethod, [AutoNumeric.options.roundingMethod.halfUpSymmetric, AutoNumeric.options.roundingMethod.halfUpAsymmetric, AutoNumeric.options.roundingMethod.halfDownSymmetric, AutoNumeric.options.roundingMethod.halfDownAsymmetric, AutoNumeric.options.roundingMethod.halfEvenBankersRounding, AutoNumeric.options.roundingMethod.upRoundAwayFromZero, AutoNumeric.options.roundingMethod.downRoundTowardZero, AutoNumeric.options.roundingMethod.toCeilingTowardPositiveInfinity, AutoNumeric.options.roundingMethod.toFloorTowardNegativeInfinity, AutoNumeric.options.roundingMethod.toNearest05, AutoNumeric.options.roundingMethod.toNearest05Alt, AutoNumeric.options.roundingMethod.upToNext05, AutoNumeric.options.roundingMethod.downToNext05])) {\n                _AutoNumericHelper2.default.throwError('The rounding method option \\'roundingMethod\\' is invalid ; it should either be \\'S\\', \\'A\\', \\'s\\', \\'a\\', \\'B\\', \\'U\\', \\'D\\', \\'C\\', \\'F\\', \\'N05\\', \\'CHF\\', \\'U05\\' or \\'D05\\' (cf. documentation), [' + options.roundingMethod + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.negativeBracketsTypeOnBlur) && !_AutoNumericHelper2.default.isInArray(options.negativeBracketsTypeOnBlur, [AutoNumeric.options.negativeBracketsTypeOnBlur.parentheses, AutoNumeric.options.negativeBracketsTypeOnBlur.brackets, AutoNumeric.options.negativeBracketsTypeOnBlur.chevrons, AutoNumeric.options.negativeBracketsTypeOnBlur.curlyBraces, AutoNumeric.options.negativeBracketsTypeOnBlur.angleBrackets, AutoNumeric.options.negativeBracketsTypeOnBlur.japaneseQuotationMarks, AutoNumeric.options.negativeBracketsTypeOnBlur.halfBrackets, AutoNumeric.options.negativeBracketsTypeOnBlur.whiteSquareBrackets, AutoNumeric.options.negativeBracketsTypeOnBlur.quotationMarks, AutoNumeric.options.negativeBracketsTypeOnBlur.guillemets])) {\n                _AutoNumericHelper2.default.throwError('The brackets for negative values option \\'negativeBracketsTypeOnBlur\\' is invalid ; it should either be \\'(,)\\', \\'[,]\\', \\'<,>\\', \\'{,}\\', \\'\\u3008,\\u3009\\', \\'\\uFF62,\\uFF63\\', \\'\\u2E24,\\u2E25\\', \\'\\u27E6,\\u27E7\\', \\'\\u2039,\\u203A\\' or \\'\\xAB,\\xBB\\', [' + options.negativeBracketsTypeOnBlur + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.emptyInputBehavior, [AutoNumeric.options.emptyInputBehavior.focus, AutoNumeric.options.emptyInputBehavior.press, AutoNumeric.options.emptyInputBehavior.always, AutoNumeric.options.emptyInputBehavior.zero])) {\n                _AutoNumericHelper2.default.throwError('The display on empty string option \\'emptyInputBehavior\\' is invalid ; it should either be \\'focus\\', \\'press\\', \\'always\\' or \\'zero\\', [' + options.emptyInputBehavior + '] given.');\n            }\n\n            if (options.emptyInputBehavior === AutoNumeric.options.emptyInputBehavior.zero && (options.minimumValue > 0 || options.maximumValue < 0)) {\n                _AutoNumericHelper2.default.throwError('The \\'emptyInputBehavior\\' option is set to \\'zero\\', but this value is outside of the range defined by \\'minimumValue\\' and \\'maximumValue\\' [' + options.minimumValue + ', ' + options.maximumValue + '].');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.leadingZero, [AutoNumeric.options.leadingZero.allow, AutoNumeric.options.leadingZero.deny, AutoNumeric.options.leadingZero.keep])) {\n                _AutoNumericHelper2.default.throwError('The leading zero behavior option \\'leadingZero\\' is invalid ; it should either be \\'allow\\', \\'deny\\' or \\'keep\\', [' + options.leadingZero + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.formatOnPageLoad) && !_AutoNumericHelper2.default.isBoolean(options.formatOnPageLoad)) {\n                _AutoNumericHelper2.default.throwError('The format on initialization option \\'formatOnPageLoad\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.formatOnPageLoad + '] given.');\n            }\n\n            if (!testPositiveInteger.test(options.historySize) || options.historySize === 0) {\n                _AutoNumericHelper2.default.throwError('The history size option \\'historySize\\' is invalid ; it should be a positive integer, [' + options.historySize + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.selectNumberOnly) && !_AutoNumericHelper2.default.isBoolean(options.selectNumberOnly)) {\n                _AutoNumericHelper2.default.throwError('The select number only option \\'selectNumberOnly\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.selectNumberOnly + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.selectOnFocus) && !_AutoNumericHelper2.default.isBoolean(options.selectOnFocus)) {\n                _AutoNumericHelper2.default.throwError('The select on focus option \\'selectOnFocus\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.selectOnFocus + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.defaultValueOverride) && options.defaultValueOverride !== '' && !testFloatOrIntegerAndPossibleNegativeSign.test(options.defaultValueOverride)) {\n                _AutoNumericHelper2.default.throwError('The unformatted default value option \\'defaultValueOverride\\' is invalid ; it should be a string that represents a positive or negative number, [' + options.defaultValueOverride + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.unformatOnSubmit) && !_AutoNumericHelper2.default.isBoolean(options.unformatOnSubmit)) {\n                _AutoNumericHelper2.default.throwError('The remove formatting on submit option \\'unformatOnSubmit\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.unformatOnSubmit + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.outputFormat) && !_AutoNumericHelper2.default.isInArray(options.outputFormat, [AutoNumeric.options.outputFormat.string, AutoNumeric.options.outputFormat.number, AutoNumeric.options.outputFormat.dot, AutoNumeric.options.outputFormat.negativeDot, AutoNumeric.options.outputFormat.comma, AutoNumeric.options.outputFormat.negativeComma, AutoNumeric.options.outputFormat.dotNegative, AutoNumeric.options.outputFormat.commaNegative])) {\n                _AutoNumericHelper2.default.throwError('The custom locale format option \\'outputFormat\\' is invalid ; it should either be null, \\'string\\', \\'number\\', \\'.\\', \\'-.\\', \\',\\', \\'-,\\', \\'.-\\' or \\',-\\', [' + options.outputFormat + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.isCancellable) && !_AutoNumericHelper2.default.isBoolean(options.isCancellable)) {\n                _AutoNumericHelper2.default.throwError('The cancellable behavior option \\'isCancellable\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.isCancellable + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.modifyValueOnWheel) && !_AutoNumericHelper2.default.isBoolean(options.modifyValueOnWheel)) {\n                _AutoNumericHelper2.default.throwError('The increment/decrement on mouse wheel option \\'modifyValueOnWheel\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.modifyValueOnWheel + '] given.');\n            }\n\n            if (!(_AutoNumericHelper2.default.isString(options.wheelStep) || _AutoNumericHelper2.default.isNumber(options.wheelStep)) || options.wheelStep !== 'progressive' && !testPositiveFloatOrInteger.test(options.wheelStep) || Number(options.wheelStep) === 0) {\n                // A step equal to '0' is rejected\n                _AutoNumericHelper2.default.throwError('The wheel step value option \\'wheelStep\\' is invalid ; it should either be the string \\'progressive\\', or a number or a string that represents a positive number (excluding zero), [' + options.wheelStep + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isInArray(options.serializeSpaces, [AutoNumeric.options.serializeSpaces.plus, AutoNumeric.options.serializeSpaces.percent])) {\n                _AutoNumericHelper2.default.throwError('The space replacement character option \\'serializeSpaces\\' is invalid ; it should either be \\'+\\' or \\'%20\\', [' + options.serializeSpaces + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.noEventListeners) && !_AutoNumericHelper2.default.isBoolean(options.noEventListeners)) {\n                _AutoNumericHelper2.default.throwError('The option \\'noEventListeners\\' that prevent the creation of event listeners is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.noEventListeners + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isNull(options.styleRules) && !(_AutoNumericHelper2.default.isObject(options.styleRules) && (options.styleRules.hasOwnProperty('positive') || options.styleRules.hasOwnProperty('negative') || options.styleRules.hasOwnProperty('ranges') || options.styleRules.hasOwnProperty('userDefined')))) {\n                _AutoNumericHelper2.default.throwError('The option \\'styleRules\\' is invalid ; it should be a correctly structured object, with one or more \\'positive\\', \\'negative\\', \\'ranges\\' or \\'userDefined\\' attributes, [' + options.styleRules + '] given.');\n            }\n\n            // Deeper tests of the `styleRules` object : Check that the callback, if defined, is a function\n            if (!_AutoNumericHelper2.default.isNull(options.styleRules) && options.styleRules.hasOwnProperty('userDefined') && !_AutoNumericHelper2.default.isNull(options.styleRules.userDefined)) {\n                options.styleRules.userDefined.forEach(function (rule) {\n                    if (rule.hasOwnProperty('callback') && !_AutoNumericHelper2.default.isFunction(rule.callback)) {\n                        _AutoNumericHelper2.default.throwError('The callback defined in the `userDefined` attribute is not a function, ' + _typeof(rule.callback) + ' given.');\n                    }\n                });\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.readOnly) && !_AutoNumericHelper2.default.isBoolean(options.readOnly)) {\n                _AutoNumericHelper2.default.throwError('The option \\'readOnly\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.readOnly + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.unformatOnHover) && !_AutoNumericHelper2.default.isBoolean(options.unformatOnHover)) {\n                _AutoNumericHelper2.default.throwError('The option \\'unformatOnHover\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.unformatOnHover + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.failOnUnknownOption) && !_AutoNumericHelper2.default.isBoolean(options.failOnUnknownOption)) {\n                _AutoNumericHelper2.default.throwError('The debug option \\'failOnUnknownOption\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.failOnUnknownOption + '] given.');\n            }\n\n            if (!_AutoNumericHelper2.default.isTrueOrFalseString(options.createLocalList) && !_AutoNumericHelper2.default.isBoolean(options.createLocalList)) {\n                _AutoNumericHelper2.default.throwError('The debug option \\'createLocalList\\' is invalid ; it should be either \\'false\\' or \\'true\\', [' + options.createLocalList + '] given.');\n            }\n        }\n\n        /**\n         * Return `true` is the settings/options are valid, `false` otherwise.\n         *\n         * @param {object} options\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'areSettingsValid',\n        value: function areSettingsValid(options) {\n            //FIXME à tester\n            var isValid = true;\n            try {\n                this.validate(options, true);\n            } catch (error) {\n                isValid = false;\n            }\n\n            return isValid;\n        }\n\n        /**\n         * Return the default autoNumeric settings.\n         *\n         * @returns {object}\n         */\n\n    }, {\n        key: 'getDefaultConfig',\n        value: function getDefaultConfig() {\n            return AutoNumeric.defaultSettings;\n        }\n\n        /**\n         * Return all the predefined language options in one object.\n         * You can also access a specific language object directly by using `AutoNumeric.getPredefinedOptions().French` for instance.\n         *\n         * @returns {object}\n         */\n\n    }, {\n        key: 'getPredefinedOptions',\n        value: function getPredefinedOptions() {\n            return AutoNumeric.predefinedOptions;\n        }\n\n        /**\n         * Format the given number (or numeric string) with the given options. This returns the formatted value as a string.\n         * This can also format the give DOM element value with the given options and returns the formatted value as a string.\n         * Note : This function does update that element value with the newly formatted value in the process.\n         *\n         * @param {number|string|HTMLElement|HTMLInputElement} valueOrDomElement A number, or a string that represent a javascript number, or a DOM element\n         * @param {object|null} options\n         * @returns {string|null}\n         */\n\n    }, {\n        key: 'format',\n        value: function format(valueOrDomElement) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            if (_AutoNumericHelper2.default.isUndefined(valueOrDomElement) || valueOrDomElement === null) {\n                return null;\n            }\n\n            if (!_AutoNumericHelper2.default.isString(valueOrDomElement) && !_AutoNumericHelper2.default.isNumber(valueOrDomElement)) {\n                _AutoNumericHelper2.default.throwError('The value \"' + valueOrDomElement + '\" being \"set\" is not numeric and therefore cannot be used appropriately.');\n            }\n\n            // Initiate a very basic settings object\n            var settings = _extends({}, this.getDefaultConfig(), options);\n            if (valueOrDomElement < 0) {\n                settings.negativeSignCharacter = '-';\n            }\n\n            var regex = {};\n            this._cachesUsualRegularExpressions(settings, regex); // This is needed by `_stripAllNonNumberCharacters` that uses those regex\n\n            if (_AutoNumericHelper2.default.isNull(settings.decimalPlacesOverride)) {\n                settings.decimalPlacesOverride = this._maximumVMinAndVMaxDecimalLength(settings.minimumValue, settings.maximumValue);\n            }\n\n            // Check the validity of the `valueOrDomElement` parameter\n            // Convert the valueOrDomElement to a numeric string, stripping unnecessary characters in the process\n            var valueString = this._toNumericValue(valueOrDomElement, settings);\n            if (isNaN(Number(valueString))) {\n                _AutoNumericHelper2.default.throwError('The value [' + valueString + '] that you are trying to format is not a recognized number.');\n            }\n\n            // Basic tests to check if the given valueString is valid\n\n            var _checkIfInRangeWithOv = this._checkIfInRangeWithOverrideOption(valueString, settings),\n                _checkIfInRangeWithOv2 = _slicedToArray(_checkIfInRangeWithOv, 2),\n                minTest = _checkIfInRangeWithOv2[0],\n                maxTest = _checkIfInRangeWithOv2[1];\n\n            if (!minTest || !maxTest) {\n                // Throw a custom event\n                _AutoNumericHelper2.default.triggerEvent(AutoNumeric.events.formatted, document, 'Range test failed');\n                _AutoNumericHelper2.default.throwError('The value [' + valueString + '] being set falls outside of the minimumValue [' + settings.minimumValue + '] and maximumValue [' + settings.maximumValue + '] range set for this element');\n            }\n\n            // Everything is ok, proceed to rounding, formatting and grouping\n            valueString = this._roundValue(valueString, settings);\n            valueString = this._modifyNegativeSignAndDecimalCharacterForFormattedValue(valueString, settings);\n            valueString = this._addGroupSeparators(valueString, settings, false);\n\n            return valueString;\n        }\n\n        /**\n         * Format the given DOM element value, and set the resulting value back as the element value.\n         *\n         * @param {HTMLElement|HTMLInputElement} domElement\n         * @param {object} options\n         * @returns {string|null}\n         */\n\n    }, {\n        key: 'formatAndSet',\n        value: function formatAndSet(domElement) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            var formattedValue = this.format(domElement, options);\n            _AutoNumericHelper2.default.setElementValue(domElement, formattedValue);\n\n            return formattedValue;\n        }\n\n        /**\n         * Unformat the given formatted string with the given options. This returns a numeric string.\n         * It can also unformat the given DOM element value with the given options and returns the unformatted numeric string.\n         * Note: This does *not* update that element value.\n         * This basically allows to get the unformatted value without first having to initialize an AutoNumeric object.\n         *\n         * @param {string|number|HTMLElement|HTMLInputElement} numericStringOrDomElement\n         * @param {object|null} options Multiple objects can be passed, the latter overwriting the settings from the former ones\n         * @returns {*}\n         */\n\n    }, {\n        key: 'unformat',\n        value: function unformat(numericStringOrDomElement) {\n            if (_AutoNumericHelper2.default.isNumberStrict(numericStringOrDomElement)) {\n                // Giving an unformatted value should return the same unformatted value, whatever the options passed as a parameter\n                return numericStringOrDomElement;\n            }\n\n            var value = void 0;\n            if (_AutoNumericHelper2.default.isElement(numericStringOrDomElement)) {\n                value = _AutoNumericHelper2.default.getElementValue(numericStringOrDomElement);\n            } else {\n                value = numericStringOrDomElement;\n            }\n\n            if (_AutoNumericHelper2.default.isUndefined(value) || value === null) {\n                return null;\n            }\n\n            if (_AutoNumericHelper2.default.isArray(value) || _AutoNumericHelper2.default.isObject(value)) {\n                // Check the validity of the `value` parameter\n                _AutoNumericHelper2.default.throwError('A number or a string representing a number is needed to be able to unformat it, [' + value + '] given.');\n            }\n\n            var optionsToUse = {};\n\n            for (var _len5 = arguments.length, options = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                options[_key5 - 1] = arguments[_key5];\n            }\n\n            if (_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(options) || options.length === 0) {\n                optionsToUse = null;\n            } else if (options.length >= 1) {\n                options.forEach(function (optionObject) {\n                    _extends(optionsToUse, optionObject);\n                });\n            }\n\n            var settings = _extends({}, this.getDefaultConfig(), optionsToUse);\n            if (_AutoNumericHelper2.default.isNull(settings.decimalPlacesOverride)) {\n                settings.decimalPlacesOverride = this._maximumVMinAndVMaxDecimalLength(settings.minimumValue, settings.maximumValue);\n            }\n            value = value.toString();\n\n            // This checks if a negative sign is anywhere in the `value`, not just on the very first character (ie. '12345.67-')\n            if (_AutoNumericHelper2.default.isNegative(value)) {\n                settings.negativeSignCharacter = '-';\n            } else if (!_AutoNumericHelper2.default.isNull(settings.negativeBracketsTypeOnBlur)) {\n                var _settings$negativeBra3 = settings.negativeBracketsTypeOnBlur.split(',');\n\n                var _settings$negativeBra4 = _slicedToArray(_settings$negativeBra3, 2);\n\n                settings.firstBracket = _settings$negativeBra4[0];\n                settings.lastBracket = _settings$negativeBra4[1];\n\n                if (value.charAt(0) === settings.firstBracket && value.charAt(value.length - 1) === settings.lastBracket) {\n                    settings.negativeSignCharacter = '-';\n                    value = this._removeBrackets(value, settings, false);\n                }\n            }\n\n            value = this._convertToNumericString(value, settings);\n            var unwantedCharacters = new RegExp('[^+-0123456789.]', 'gi');\n            if (unwantedCharacters.test(value)) {\n                return NaN;\n            }\n\n            value = this._roundValue(value, settings);\n            value = value.replace(settings.decimalCharacter, '.'); // Here we need to convert back the decimal character to a period since `_roundValue` adds it in some cases\n            value = this._toLocale(value, settings.outputFormat);\n\n            return value;\n        }\n\n        /**\n         * Unformat the given DOM element value, and set the resulting value back as the element value.\n         *\n         * @param {HTMLElement|HTMLInputElement} domElement\n         * @param {object} options\n         * @returns {*}\n         */\n\n    }, {\n        key: 'unformatAndSet',\n        value: function unformatAndSet(domElement) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            var unformattedValue = this.unformat(domElement, options);\n            _AutoNumericHelper2.default.setElementValue(domElement, unformattedValue);\n\n            return unformattedValue;\n        }\n\n        /**\n         * Unformat and localize the given formatted string with the given options. This returns a numeric string.\n         * It can also unformat and localize the given DOM element value with the given options and returns the unformatted numeric string.\n         * Note: This does *not* update that element value.\n         * This basically allows to get the localized value without first having to initialize an AutoNumeric object.\n         *\n         * @param {string|number|HTMLElement|HTMLInputElement} numericStringOrDomElement\n         * @param {object} options\n         * @returns {*}\n         */\n\n    }, {\n        key: 'localize',\n        value: function localize(numericStringOrDomElement) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            var value = void 0;\n            if (_AutoNumericHelper2.default.isElement(numericStringOrDomElement)) {\n                value = _AutoNumericHelper2.default.getElementValue(numericStringOrDomElement);\n            } else {\n                value = numericStringOrDomElement;\n            }\n\n            if (_AutoNumericHelper2.default.isNull(options)) {\n                options = AutoNumeric.defaultSettings;\n            }\n\n            value = this.unformat(value, options);\n\n            //XXX The following code is pretty close to the one you can find in `getLocalized()`, but different enough so we won't refactor it.\n            if (Number(value) === 0 && options.leadingZero !== AutoNumeric.options.leadingZero.keep) {\n                value = '0';\n            }\n\n            var outputFormatToUse = void 0;\n            if (_AutoNumericHelper2.default.isNull(options)) {\n                outputFormatToUse = options.outputFormat;\n            } else {\n                outputFormatToUse = AutoNumeric.defaultSettings.outputFormat;\n            }\n\n            return this._toLocale(value, outputFormatToUse);\n        }\n    }, {\n        key: 'localizeAndSet',\n        value: function localizeAndSet(domElement) {\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            //FIXME à tester\n            var localizedValue = this.localize(domElement, options);\n            _AutoNumericHelper2.default.setElementValue(domElement, localizedValue);\n\n            return localizedValue;\n        }\n\n        /**\n         * Return `true` is the given DOM element has an AutoNumeric object that manages it.\n         *\n         * @param {HTMLElement} domElement\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isManagedByAutoNumeric',\n        value: function isManagedByAutoNumeric(domElement) {\n            //FIXME à tester\n            return this._isInGlobalList(domElement);\n        }\n\n        /**\n         * Return the AutoNumeric object that manages the given DOM element.\n         *\n         * @param {HTMLElement} domElement\n         * @returns {null|AutoNumeric}\n         */\n\n    }, {\n        key: 'getAutoNumericElement',\n        value: function getAutoNumericElement(domElement) {\n            //FIXME à tester\n            if (!this.isManagedByAutoNumeric(domElement)) {\n                return null;\n            }\n\n            return this._getFromGlobalList(domElement);\n        }\n    }, {\n        key: '_maximumVMinAndVMaxDecimalLength',\n        value: function _maximumVMinAndVMaxDecimalLength(minimumValue, maximumValue) {\n            return Math.max(_AutoNumericHelper2.default.decimalPlaces(minimumValue), _AutoNumericHelper2.default.decimalPlaces(maximumValue));\n        }\n    }, {\n        key: '_stripAllNonNumberCharacters',\n        value: function _stripAllNonNumberCharacters(s, settings, stripZeros, isFocused) {\n            //XXX Note; this function is static since we need to pass a `settings` object when calling the static `AutoNumeric.format()` method\n            //TODO This function is called 10 times (sic!) on each key input, couldn't we lower that number? cf. issue #325\n            //TODO Refactor this with `convertToNumericString()` if possible?\n            s = String(s); // Typecast to to a string, in case that the initialValue is a number\n\n            if (settings.currencySymbol !== '') {\n                // Remove currency sign\n                s = s.replace(settings.currencySymbol, '');\n            }\n\n            if (settings.suffixText) {\n                // Remove suffix\n                s = s.replace(settings.suffixText, '');\n            }\n\n            //TODO Remove the positive sign too?\n\n            // First replace anything before digits\n            s = s.replace(settings.skipFirstAutoStrip, '$1$2');\n\n            // Then replace anything after digits\n            s = s.replace(settings.skipLastAutoStrip, '$1');\n\n            // Then remove any uninteresting characters\n            s = s.replace(settings.allowedAutoStrip, '');\n            if (settings.decimalCharacterAlternative) {\n                s = s.replace(settings.decimalCharacterAlternative, settings.decimalCharacter);\n            }\n\n            // Get only number string\n            var m = s.match(settings.numRegAutoStrip);\n            s = m ? [m[1], m[2], m[3]].join('') : '';\n\n            if (settings.leadingZero === AutoNumeric.options.leadingZero.allow || settings.leadingZero === AutoNumeric.options.leadingZero.keep) {\n                var negativeSign = '';\n\n                var _s$split = s.split(settings.decimalCharacter),\n                    _s$split2 = _slicedToArray(_s$split, 2),\n                    integerPart = _s$split2[0],\n                    decimalPart = _s$split2[1];\n\n                var modifiedIntegerPart = integerPart;\n                if (_AutoNumericHelper2.default.contains(modifiedIntegerPart, settings.negativeSignCharacter)) {\n                    negativeSign = settings.negativeSignCharacter;\n                    modifiedIntegerPart = modifiedIntegerPart.replace(settings.negativeSignCharacter, '');\n                }\n\n                // Strip leading zero on positive value if need\n                if (negativeSign === '' && modifiedIntegerPart.length > settings.mIntPos && modifiedIntegerPart.charAt(0) === '0') {\n                    modifiedIntegerPart = modifiedIntegerPart.slice(1);\n                }\n\n                // Strip leading zero on negative value if need\n                if (negativeSign !== '' && modifiedIntegerPart.length > settings.mIntNeg && modifiedIntegerPart.charAt(0) === '0') {\n                    modifiedIntegerPart = modifiedIntegerPart.slice(1);\n                }\n\n                s = '' + negativeSign + modifiedIntegerPart + (_AutoNumericHelper2.default.isUndefined(decimalPart) ? '' : settings.decimalCharacter + decimalPart);\n            }\n\n            if (stripZeros && settings.leadingZero === AutoNumeric.options.leadingZero.deny || !isFocused && settings.leadingZero === AutoNumeric.options.leadingZero.allow) {\n                s = s.replace(settings.stripReg, '$1$2');\n            }\n\n            return s;\n        }\n\n        /**\n         * Sets or removes brackets on negative values, depending on the focus state, which is passed as `isFocused`.\n         * The focus state is 'stored' in that object property.\n         *\n         * @param {string} value\n         * @param {object} settings\n         * @param {boolean} isFocused\n         * @returns {*}\n         */\n\n    }, {\n        key: '_toggleNegativeBracket',\n        value: function _toggleNegativeBracket(value, settings, isFocused) {\n            //XXX Note; this function is static since we need to pass a `settings` object when calling the static `AutoNumeric.format()` method\n            var result = void 0;\n            if (isFocused) {\n                result = this._removeBrackets(value, settings);\n            } else {\n                result = this._addBrackets(value, settings);\n            }\n\n            return result;\n        }\n\n        /**\n         * Add the bracket types specified in the `settings` object, to the given string `value`.\n         *\n         * @param {string} value\n         * @param {object} settings\n         * @returns {string}\n         * @private\n         */\n\n    }, {\n        key: '_addBrackets',\n        value: function _addBrackets(value, settings) {\n            var result = void 0;\n            if (!_AutoNumericHelper2.default.isNull(settings.negativeBracketsTypeOnBlur)) {\n                result = '' + settings.firstBracket + value.replace(settings.negativeSignCharacter, '') + settings.lastBracket;\n            } else {\n                result = value;\n            }\n\n            return result;\n        }\n\n        /**\n         * Remove the bracket types specified in the `settings` object, from the given string `value`.\n         *\n         * @param {string} value\n         * @param {object} settings\n         * @param {boolean} rearrangeSignsAndValueOrder If set to `true`, then only the brackets are remove and a negative sign is added, without reordering the negative sign, currency symbol and value according to the settings.\n         * @returns {string}\n         * @private\n         */\n\n    }, {\n        key: '_removeBrackets',\n        value: function _removeBrackets(value, settings) {\n            var rearrangeSignsAndValueOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n            var result = void 0;\n            if (!_AutoNumericHelper2.default.isNull(settings.negativeBracketsTypeOnBlur) && value.charAt(0) === settings.firstBracket) {\n                // Remove the brackets if they are present\n                result = value.replace(settings.firstBracket, '');\n                result = result.replace(settings.lastBracket, '');\n\n                // Add back the negative sign at the right place\n                if (rearrangeSignsAndValueOrder) {\n                    // First we need to remove the currency symbol from the value, since we want to be able to add back the negative sign at the right place (including between the value and the currency sign)\n                    result = result.replace(settings.currencySymbol, '');\n                    result = this._mergeCurrencySignNegativePositiveSignAndValue(result, settings, true, false); //TODO This assume the value is negative and non-empty. Is this always the case?\n                } else {\n                    // Here we only want to add the negative sign since we removed the brackets, without reordering\n                    result = '-' + result;\n                }\n            } else {\n                result = value;\n            }\n\n            return result;\n        }\n    }, {\n        key: '_convertToNumericString',\n        value: function _convertToNumericString(s, settings) {\n            // Remove the currency symbol\n            s = s.replace(settings.currencySymbol, '');\n\n            // Remove the grouping separators (thousands separators usually)\n            s = s.replace(settings.digitGroupSeparator, '');\n\n            // Replace the decimal character by a dot\n            if (settings.decimalCharacter !== '.') {\n                s = s.replace(settings.decimalCharacter, '.');\n            }\n\n            // Remove the suffixText\n            if (settings.suffixText !== AutoNumeric.options.suffixText.none) {\n                s = s.replace(settings.suffixText, '');\n            }\n\n            // Move the trailing negative sign to the right position, if any\n            if (_AutoNumericHelper2.default.isNegative(s) && s.lastIndexOf('-') === s.length - 1) {\n                s = s.replace('-', '');\n                s = '-' + s;\n            }\n\n            // Convert arabic numbers to latin ones, if any\n            var convertToNumber = settings.leadingZero !== AutoNumeric.options.leadingZero.keep;\n            var temp = _AutoNumericHelper2.default.arabicToLatinNumbers(s, convertToNumber, false, false);\n            if (!isNaN(temp)) {\n                s = temp.toString();\n            }\n\n            return s;\n        }\n\n        /**\n         * Converts the ISO numeric string to the locale decimal and minus sign placement.\n         * See the \"outputFormat\" option definition for more details.\n         *\n         * @param {string|null} value\n         * @param {string|null} locale\n         * @returns {*}\n         */\n\n    }, {\n        key: '_toLocale',\n        value: function _toLocale(value, locale) {\n            if (_AutoNumericHelper2.default.isNull(locale) || locale === AutoNumeric.options.outputFormat.string) {\n                return value;\n            }\n\n            var result = void 0;\n            switch (locale) {\n                case AutoNumeric.options.outputFormat.number:\n                    result = Number(value);\n                    break;\n                case AutoNumeric.options.outputFormat.dotNegative:\n                    result = _AutoNumericHelper2.default.isNegative(value) ? value.replace('-', '') + '-' : value;\n                    break;\n                case AutoNumeric.options.outputFormat.comma:\n                case AutoNumeric.options.outputFormat.negativeComma:\n                    result = value.replace('.', ',');\n                    break;\n                case AutoNumeric.options.outputFormat.commaNegative:\n                    result = value.replace('.', ',');\n                    result = _AutoNumericHelper2.default.isNegative(result) ? result.replace('-', '') + '-' : result;\n                    break;\n                // The default case\n                case AutoNumeric.options.outputFormat.dot:\n                case AutoNumeric.options.outputFormat.negativeDot:\n                    result = value;\n                    break;\n                default:\n                    _AutoNumericHelper2.default.throwError('The given outputFormat [' + locale + '] option is not recognized.');\n            }\n\n            return result;\n        }\n    }, {\n        key: '_modifyNegativeSignAndDecimalCharacterForFormattedValue',\n        value: function _modifyNegativeSignAndDecimalCharacterForFormattedValue(s, settings) {\n            //XXX Note; this function is static since we need to pass a `settings` object when calling the static `AutoNumeric.format()` method\n            if (settings.negativeSignCharacter !== '-' && settings.negativeSignCharacter !== '') {\n                s = s.replace('-', settings.negativeSignCharacter);\n            }\n\n            if (settings.decimalCharacter !== '.') {\n                s = s.replace('.', settings.decimalCharacter);\n            }\n\n            return s;\n        }\n\n        /**\n         * Return `true` if the given value is empty or is equal to the negative sign character defined in the given settings.\n         *\n         * @param {string} value\n         * @param {object} settings\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isElementValueEmptyOrOnlyTheNegativeSign',\n        value: function _isElementValueEmptyOrOnlyTheNegativeSign(value, settings) {\n            return value === '' || value === settings.negativeSignCharacter;\n        }\n\n        /**\n         * Return the value with the currency symbol and the suffix text ordered according to the given settings.\n         *\n         * @param {string} value\n         * @param {object} settings\n         * @param {boolean} signOnEmpty\n         * @returns {*}\n         * @private\n         */\n\n    }, {\n        key: '_orderValueCurrencySymbolAndSuffixText',\n        value: function _orderValueCurrencySymbolAndSuffixText(value, settings, signOnEmpty) {\n            var result = void 0;\n            if (settings.emptyInputBehavior === AutoNumeric.options.emptyInputBehavior.always || signOnEmpty) {\n                if (settings.negativePositiveSignPlacement === AutoNumeric.options.negativePositiveSignPlacement.left) {\n                    result = value + settings.currencySymbol + settings.suffixText;\n                } else {\n                    result = settings.currencySymbol + value + settings.suffixText;\n                }\n            } else {\n                result = value;\n            }\n\n            return result;\n        }\n\n        /**\n         * Modify the input value by adding the group separators, as defined in the settings.\n         *\n         * @param {string} inputValue\n         * @param {object} settings\n         * @param {boolean} isFocused\n         * @param {number|string|null} rawValue If this is set, then this rawValue is used instead of the one passed through the `settings` object. This is useful is some very specific cases where we need to set the raw value *after* settings the formatted value, using the `_addGroupSeparators()` method.\n         * @returns {*}\n         */\n\n    }, {\n        key: '_addGroupSeparators',\n        value: function _addGroupSeparators(inputValue, settings, isFocused) {\n            var rawValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n            //XXX Note; this function is static since we need to pass a `settings` object when calling the static `AutoNumeric.format()` method\n            var isValueNegative = _AutoNumericHelper2.default.isNegative(inputValue) || _AutoNumericHelper2.default.isNegativeWithBrackets(inputValue, settings.firstBracket, settings.lastBracket); // Test if the value is negative before removing the negative sign\n\n            inputValue = this._stripAllNonNumberCharacters(inputValue, settings, false, isFocused);\n\n            if (this._isElementValueEmptyOrOnlyTheNegativeSign(inputValue, settings)) {\n                return this._orderValueCurrencySymbolAndSuffixText(inputValue, settings, true);\n            }\n\n            var isZeroOrHasNoValue = _AutoNumericHelper2.default.isZeroOrHasNoValue(inputValue);\n\n            // Temporarily remove the negative sign if present\n            if (isValueNegative) {\n                inputValue = inputValue.replace('-', '');\n            }\n\n            settings.digitalGroupSpacing = settings.digitalGroupSpacing.toString();\n            var digitalGroup = void 0;\n            switch (settings.digitalGroupSpacing) {\n                case AutoNumeric.options.digitalGroupSpacing.two:\n                    digitalGroup = /(\\d)((\\d)(\\d{2}?)+)$/;\n                    break;\n                case AutoNumeric.options.digitalGroupSpacing.twoScaled:\n                    digitalGroup = /(\\d)((?:\\d{2}){0,2}\\d{3}(?:(?:\\d{2}){2}\\d{3})*?)$/;\n                    break;\n                case AutoNumeric.options.digitalGroupSpacing.four:\n                    digitalGroup = /(\\d)((\\d{4}?)+)$/;\n                    break;\n                case AutoNumeric.options.digitalGroupSpacing.three:\n                default:\n                    digitalGroup = /(\\d)((\\d{3}?)+)$/;\n            }\n\n            // Splits the string at the decimal string\n\n            var _inputValue$split = inputValue.split(settings.decimalCharacter),\n                _inputValue$split2 = _slicedToArray(_inputValue$split, 2),\n                integerPart = _inputValue$split2[0],\n                decimalPart = _inputValue$split2[1];\n\n            if (settings.decimalCharacterAlternative && _AutoNumericHelper2.default.isUndefined(decimalPart)) {\n                var _inputValue$split3 = inputValue.split(settings.decimalCharacterAlternative);\n\n                var _inputValue$split4 = _slicedToArray(_inputValue$split3, 2);\n\n                integerPart = _inputValue$split4[0];\n                decimalPart = _inputValue$split4[1];\n            }\n\n            if (settings.digitGroupSeparator !== '') {\n                // Re-inserts the thousand separator via a regular expression\n                while (digitalGroup.test(integerPart)) {\n                    integerPart = integerPart.replace(digitalGroup, '$1' + settings.digitGroupSeparator + '$2');\n                }\n            }\n\n            if (settings.decimalPlacesOverride !== 0 && !_AutoNumericHelper2.default.isUndefined(decimalPart)) {\n                if (decimalPart.length > settings.decimalPlacesOverride) {\n                    decimalPart = decimalPart.substring(0, settings.decimalPlacesOverride);\n                }\n\n                // Joins the whole number with the decimal value\n                inputValue = integerPart + settings.decimalCharacter + decimalPart;\n            } else {\n                // Otherwise if it's an integer\n                inputValue = integerPart;\n            }\n\n            // Add back the negative/positive sign and the currency symbol, at the right positions\n            inputValue = AutoNumeric._mergeCurrencySignNegativePositiveSignAndValue(inputValue, settings, isValueNegative, isZeroOrHasNoValue); //TODO this function is called again in `_toggleNegativeBracket` if the brackets are removed; let's DRY this\n\n            if (_AutoNumericHelper2.default.isNull(rawValue)) {\n                // If the raw value is not forced, use the default one from the settings object\n                rawValue = settings.rawValue;\n            }\n\n            // Toggle the negative sign and brackets\n            if (settings.negativeBracketsTypeOnBlur !== null && (rawValue < 0 || _AutoNumericHelper2.default.isNegativeStrict(inputValue))) {\n                inputValue = this._toggleNegativeBracket(inputValue, settings, isFocused);\n            }\n\n            var result = void 0;\n            if (settings.suffixText) {\n                result = inputValue + settings.suffixText;\n            } else {\n                result = inputValue;\n            }\n\n            return result;\n        }\n\n        /**\n         * Return a semi-formatted string where the input value, the negative or positive sign, and the currency symbol are stitched together at the right positions, using the options set in the `settings` object.\n         * Note : the `inputValue` is usually not a numeric string since the grouping symbols are already added to it at this point.\n         *\n         * @param {string} inputValue\n         * @param {object} settings\n         * @param {boolean} isValueNegative\n         * @param {boolean} isZeroOrHasNoValue\n         * @returns {*}\n         * @throws\n         * @private\n         */\n\n    }, {\n        key: '_mergeCurrencySignNegativePositiveSignAndValue',\n        value: function _mergeCurrencySignNegativePositiveSignAndValue(inputValue, settings, isValueNegative, isZeroOrHasNoValue) {\n            var signToUse = '';\n            if (isValueNegative) {\n                signToUse = settings.negativeSignCharacter;\n            } else if (settings.showPositiveSign && !isZeroOrHasNoValue) {\n                signToUse = settings.positiveSignCharacter;\n            }\n\n            var result = void 0;\n            if (settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.prefix) {\n                if (settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                    switch (settings.negativePositiveSignPlacement) {\n                        case AutoNumeric.options.negativePositiveSignPlacement.prefix:\n                        case AutoNumeric.options.negativePositiveSignPlacement.left:\n                            result = '' + signToUse + settings.currencySymbol + inputValue;\n                            break;\n                        case AutoNumeric.options.negativePositiveSignPlacement.right:\n                            result = '' + settings.currencySymbol + signToUse + inputValue;\n                            break;\n                        case AutoNumeric.options.negativePositiveSignPlacement.suffix:\n                            result = '' + settings.currencySymbol + inputValue + signToUse;\n                            break;\n                    }\n                } else {\n                    result = settings.currencySymbol + inputValue;\n                }\n            } else if (settings.currencySymbolPlacement === AutoNumeric.options.currencySymbolPlacement.suffix) {\n                if (settings.negativePositiveSignPlacement !== AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && settings.showPositiveSign && !isZeroOrHasNoValue)) {\n                    switch (settings.negativePositiveSignPlacement) {\n                        case AutoNumeric.options.negativePositiveSignPlacement.suffix:\n                        case AutoNumeric.options.negativePositiveSignPlacement.right:\n                            result = '' + inputValue + settings.currencySymbol + signToUse;\n                            break;\n                        case AutoNumeric.options.negativePositiveSignPlacement.left:\n                            result = '' + inputValue + signToUse + settings.currencySymbol;\n                            break;\n                        case AutoNumeric.options.negativePositiveSignPlacement.prefix:\n                            result = '' + signToUse + inputValue + settings.currencySymbol;\n                            break;\n                    }\n                } else {\n                    result = inputValue + settings.currencySymbol;\n                }\n            }\n\n            return result;\n        }\n    }, {\n        key: '_truncateZeros',\n        value: function _truncateZeros(roundedInputValue, decimalPlacesOverride) {\n            var regex = void 0;\n            switch (decimalPlacesOverride) {\n                case 0:\n                    // Prevents padding - removes trailing zeros until the first significant digit is encountered\n                    regex = /(\\.(?:\\d*[1-9])?)0*$/;\n                    break;\n                case 1:\n                    // Allows padding when decimalPlacesOverride equals one - leaves one zero trailing the decimal character\n                    regex = /(\\.\\d(?:\\d*[1-9])?)0*$/;\n                    break;\n                default:\n                    // Removes access zeros to the decimalPlacesOverride length when allowDecimalPadding is set to true\n                    regex = new RegExp('(\\\\.\\\\d{' + decimalPlacesOverride + '}(?:\\\\d*[1-9])?)0*');\n            }\n\n            // If there are no decimal places, we don't need a decimal point at the end\n            roundedInputValue = roundedInputValue.replace(regex, '$1');\n            if (decimalPlacesOverride === 0) {\n                roundedInputValue = roundedInputValue.replace(/\\.$/, '');\n            }\n\n            return roundedInputValue;\n        }\n\n        /**\n         * Round the input value using the rounding method defined in the settings.\n         * This function accepts multiple rounding methods. See the documentation for more details about those.\n         *\n         * Note : This is handled as text since JavaScript math function can return inaccurate values.\n         *\n         * @param {string} inputValue\n         * @param {object} settings\n         * @returns {*}\n         */\n\n    }, {\n        key: '_roundValue',\n        value: function _roundValue(inputValue, settings) {\n            //XXX Note; this function is static since we need to pass a `settings` object when calling the static `AutoNumeric.format()` method\n            //TODO Divide this function to make it easier to understand\n            inputValue = inputValue === '' ? '0' : inputValue.toString();\n            if (settings.roundingMethod === AutoNumeric.options.roundingMethod.toNearest05 || settings.roundingMethod === AutoNumeric.options.roundingMethod.toNearest05Alt || settings.roundingMethod === AutoNumeric.options.roundingMethod.upToNext05 || settings.roundingMethod === AutoNumeric.options.roundingMethod.downToNext05) {\n                return this._roundCloseTo05(inputValue, settings);\n            }\n\n            var _AutoNumeric$_prepare = AutoNumeric._prepareValueForRounding(inputValue, settings),\n                _AutoNumeric$_prepare2 = _slicedToArray(_AutoNumeric$_prepare, 2),\n                negativeSign = _AutoNumeric$_prepare2[0],\n                preparedValue = _AutoNumeric$_prepare2[1];\n\n            inputValue = preparedValue;\n\n            var decimalCharacterPosition = inputValue.lastIndexOf('.');\n            var inputValueHasADot = decimalCharacterPosition === -1;\n\n            var _inputValue$split5 = inputValue.split('.'),\n                _inputValue$split6 = _slicedToArray(_inputValue$split5, 2),\n                decimalPart = _inputValue$split6[1]; // Here the decimal character is always a period '.'\n\n\n            var hasDecimals = decimalPart > 0;\n            if (!hasDecimals && (settings.allowDecimalPadding === AutoNumeric.options.allowDecimalPadding.never || settings.allowDecimalPadding === AutoNumeric.options.allowDecimalPadding.floats)) {\n                return Number(inputValue) === 0 ? inputValue : negativeSign + inputValue;\n            }\n\n            // Virtual decimal position\n            var virtualDecimalPosition = inputValueHasADot ? inputValue.length - 1 : decimalCharacterPosition;\n\n            // Sets the truncate zero method\n            var temporaryDecimalPlacesOverride = void 0;\n            if (settings.allowDecimalPadding) {\n                temporaryDecimalPlacesOverride = settings.decimalPlacesOverride;\n            } else {\n                temporaryDecimalPlacesOverride = 0;\n            }\n\n            // Checks decimal places to determine if rounding is required :\n            var inputValueRounded = '';\n            var checkDecimalPlaces = inputValue.length - 1 - virtualDecimalPosition;\n            // Check if no rounding is required\n            if (checkDecimalPlaces <= settings.decimalPlacesOverride) {\n                // Check if we need to pad with zeros\n                inputValueRounded = inputValue;\n                if (checkDecimalPlaces < temporaryDecimalPlacesOverride) {\n                    if (inputValueHasADot) {\n                        inputValueRounded += settings.decimalCharacter;\n                    }\n\n                    var zeros = '000000';\n                    while (checkDecimalPlaces < temporaryDecimalPlacesOverride) {\n                        zeros = zeros.substring(0, temporaryDecimalPlacesOverride - checkDecimalPlaces);\n                        inputValueRounded += zeros;\n                        checkDecimalPlaces += zeros.length;\n                    }\n                } else if (checkDecimalPlaces > temporaryDecimalPlacesOverride) {\n                    inputValueRounded = this._truncateZeros(inputValueRounded, temporaryDecimalPlacesOverride);\n                } else if (checkDecimalPlaces === 0 && temporaryDecimalPlacesOverride === 0) {\n                    inputValueRounded = inputValueRounded.replace(/\\.$/, '');\n                }\n\n                return Number(inputValueRounded) === 0 ? inputValueRounded : negativeSign + inputValueRounded;\n            }\n\n            // Rounded length of the string after rounding\n            var roundedStrLength = void 0;\n            if (inputValueHasADot) {\n                roundedStrLength = settings.decimalPlacesOverride - 1;\n            } else {\n                roundedStrLength = settings.decimalPlacesOverride + decimalCharacterPosition;\n            }\n\n            var lastDigit = Number(inputValue.charAt(roundedStrLength + 1));\n            var inputValueArray = inputValue.substring(0, roundedStrLength + 1).split('');\n            var odd = void 0;\n            if (inputValue.charAt(roundedStrLength) === '.') {\n                odd = inputValue.charAt(roundedStrLength - 1) % 2;\n            } else {\n                odd = inputValue.charAt(roundedStrLength) % 2;\n            }\n\n            if (this._shouldRoundUp(lastDigit, settings, negativeSign, odd)) {\n                // Round up the last digit if required, and continue until no more 9's are found\n                for (var i = inputValueArray.length - 1; i >= 0; i -= 1) {\n                    if (inputValueArray[i] !== '.') {\n                        inputValueArray[i] = +inputValueArray[i] + 1;\n                        if (inputValueArray[i] < 10) {\n                            break;\n                        }\n\n                        if (i > 0) {\n                            inputValueArray[i] = '0';\n                        }\n                    }\n                }\n            }\n\n            // Reconstruct the string, converting any 10's to 0's\n            inputValueArray = inputValueArray.slice(0, roundedStrLength + 1);\n\n            // Return the rounded value\n            inputValueRounded = this._truncateZeros(inputValueArray.join(''), temporaryDecimalPlacesOverride);\n\n            return Number(inputValueRounded) === 0 ? inputValueRounded : negativeSign + inputValueRounded;\n        }\n\n        /**\n         * Round the `value` when the rounding method deals with '.05'\n         *\n         * @param {string} value\n         * @param {object} settings\n         * @returns {string}\n         * @private\n         */\n\n    }, {\n        key: '_roundCloseTo05',\n        value: function _roundCloseTo05(value, settings) {\n            switch (settings.roundingMethod) {\n                case AutoNumeric.options.roundingMethod.toNearest05:\n                case AutoNumeric.options.roundingMethod.toNearest05Alt:\n                    value = (Math.round(value * 20) / 20).toString();\n                    break;\n                case AutoNumeric.options.roundingMethod.upToNext05:\n                    value = (Math.ceil(value * 20) / 20).toString();\n                    break;\n                default:\n                    value = (Math.floor(value * 20) / 20).toString();\n            }\n\n            var result = void 0;\n            if (!_AutoNumericHelper2.default.contains(value, '.')) {\n                result = value + '.00';\n            } else if (value.length - value.indexOf('.') < 3) {\n                result = value + '0';\n            } else {\n                result = value;\n            }\n\n            return result;\n        }\n\n        /**\n         * Modify the given `value` in order to make it usable for the rest of the rounding function.\n         * This convert the `value` to a positive one, trim any leading zeros and make sure it does not starts with a leading dot.\n         *\n         * @param {string} value\n         * @param {object} settings\n         * @returns {[string, string]}\n         * @private\n         */\n\n    }, {\n        key: '_prepareValueForRounding',\n        value: function _prepareValueForRounding(value, settings) {\n            // Checks if `inputValue` is a negative value\n            var negativeSign = '';\n            if (_AutoNumericHelper2.default.isNegativeStrict(value)) {\n                negativeSign = '-';\n\n                // Removes the negative sign that will be added back later if required\n                value = value.replace('-', '');\n            }\n\n            // Append a zero if the first character is not a digit (then it is likely a dot)\n            if (!value.match(/^\\d/)) {\n                value = '0' + value;\n            }\n\n            // Determines if the value is equal to zero. If it is, remove the negative sign\n            if (Number(value) === 0) {\n                negativeSign = '';\n            }\n\n            // Trims leading zero's as needed\n            if (Number(value) > 0 && settings.leadingZero !== AutoNumeric.options.leadingZero.keep || value.length > 0 && settings.leadingZero === AutoNumeric.options.leadingZero.allow) {\n                value = value.replace(/^0*(\\d)/, '$1');\n            }\n\n            return [negativeSign, value];\n        }\n\n        /**\n         * Return `true` if a round up should be done given the last digit, the settings and other information about the value.\n         * \n         * @param {number} lastDigit\n         * @param {object} settings\n         * @param {string} negativeSign\n         * @param {number} odd\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_shouldRoundUp',\n        value: function _shouldRoundUp(lastDigit, settings, negativeSign, odd) {\n            return lastDigit > 4 && settings.roundingMethod === AutoNumeric.options.roundingMethod.halfUpSymmetric || // Round half up symmetric\n            lastDigit > 4 && settings.roundingMethod === AutoNumeric.options.roundingMethod.halfUpAsymmetric && negativeSign === '' || // Round half up asymmetric positive values\n            lastDigit > 5 && settings.roundingMethod === AutoNumeric.options.roundingMethod.halfUpAsymmetric && negativeSign === '-' || // Round half up asymmetric negative values\n            lastDigit > 5 && settings.roundingMethod === AutoNumeric.options.roundingMethod.halfDownSymmetric || // Round half down symmetric\n            lastDigit > 5 && settings.roundingMethod === AutoNumeric.options.roundingMethod.halfDownAsymmetric && negativeSign === '' || // Round half down asymmetric positive values\n            lastDigit > 4 && settings.roundingMethod === AutoNumeric.options.roundingMethod.halfDownAsymmetric && negativeSign === '-' || // Round half down asymmetric negative values\n            lastDigit > 5 && settings.roundingMethod === AutoNumeric.options.roundingMethod.halfEvenBankersRounding || lastDigit === 5 && settings.roundingMethod === AutoNumeric.options.roundingMethod.halfEvenBankersRounding && odd === 1 || lastDigit > 0 && settings.roundingMethod === AutoNumeric.options.roundingMethod.toCeilingTowardPositiveInfinity && negativeSign === '' || lastDigit > 0 && settings.roundingMethod === AutoNumeric.options.roundingMethod.toFloorTowardNegativeInfinity && negativeSign === '-' || lastDigit > 0 && settings.roundingMethod === AutoNumeric.options.roundingMethod.upRoundAwayFromZero; // Round up away from zero\n        }\n\n        /**\n         * Truncates the decimal part of a number.\n         *\n         * @param {string} s\n         * @param {object} settings\n         * @param {boolean} isPaste\n         * @returns {*}\n         */\n\n    }, {\n        key: '_truncateDecimalPlaces',\n        value: function _truncateDecimalPlaces(s, settings, isPaste) {\n            if (isPaste) {\n                s = this._roundValue(s, settings);\n            }\n\n            if (settings.decimalCharacter && settings.decimalPlacesOverride) {\n                var _s$split3 = s.split(settings.decimalCharacter),\n                    _s$split4 = _slicedToArray(_s$split3, 2),\n                    integerPart = _s$split4[0],\n                    decimalPart = _s$split4[1];\n\n                // Truncate the decimal part to the satisfying length since we would round it anyway\n\n\n                if (decimalPart && decimalPart.length > settings.decimalPlacesOverride) {\n                    if (settings.decimalPlacesOverride > 0) {\n                        var modifiedDecimalPart = decimalPart.substring(0, settings.decimalPlacesOverride);\n                        s = '' + integerPart + settings.decimalCharacter + modifiedDecimalPart;\n                    } else {\n                        s = integerPart;\n                    }\n                }\n            }\n\n            return s;\n        }\n\n        /**\n         * Check that the number satisfy the format conditions\n         * and lays between settings.minimumValue and settings.maximumValue\n         * and the string length does not exceed the digits in settings.minimumValue and settings.maximumValue\n         *\n         * @param {string} s\n         * @param {object} settings\n         * @returns {*}\n         */\n\n    }, {\n        key: '_checkIfInRangeWithOverrideOption',\n        value: function _checkIfInRangeWithOverrideOption(s, settings) {\n            s = s.toString();\n            s = s.replace(',', '.');\n            var minParse = _AutoNumericHelper2.default.parseStr(settings.minimumValue);\n            var maxParse = _AutoNumericHelper2.default.parseStr(settings.maximumValue);\n            var valParse = _AutoNumericHelper2.default.parseStr(s);\n\n            var result = void 0;\n            switch (settings.overrideMinMaxLimits) {\n                case AutoNumeric.options.overrideMinMaxLimits.floor:\n                    result = [_AutoNumericHelper2.default.testMinMax(minParse, valParse) > -1, true];\n                    break;\n                case AutoNumeric.options.overrideMinMaxLimits.ceiling:\n                    result = [true, _AutoNumericHelper2.default.testMinMax(maxParse, valParse) < 1];\n                    break;\n                case AutoNumeric.options.overrideMinMaxLimits.ignore:\n                    result = [true, true];\n                    break;\n                default:\n                    result = [_AutoNumericHelper2.default.testMinMax(minParse, valParse) > -1, _AutoNumericHelper2.default.testMinMax(maxParse, valParse) < 1];\n            }\n\n            return result;\n        }\n    }, {\n        key: '_readCookie',\n        value: function _readCookie(name) {\n            var nameEQ = name + '=';\n            var ca = document.cookie.split(';');\n            var c = '';\n            for (var i = 0; i < ca.length; i += 1) {\n                c = ca[i];\n                while (c.charAt(0) === ' ') {\n                    c = c.substring(1, c.length);\n                }\n                if (c.indexOf(nameEQ) === 0) {\n                    return c.substring(nameEQ.length, c.length);\n                }\n            }\n\n            return null;\n        }\n\n        /**\n         * Test if sessionStorage is supported.\n         * This is taken from Modernizr.\n         *\n         * @returns {boolean}\n         */\n\n    }, {\n        key: '_storageTest',\n        value: function _storageTest() {\n            var mod = 'modernizr';\n            try {\n                sessionStorage.setItem(mod, mod);\n                sessionStorage.removeItem(mod);\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n    }, {\n        key: '_correctCaretPositionOnFocusAndSelectOnFocusOptions',\n        value: function _correctCaretPositionOnFocusAndSelectOnFocusOptions(options) {\n            if (_AutoNumericHelper2.default.isNull(options)) {\n                return null;\n            }\n\n            // If the user has set the `caretPositionOnFocus` option, do not set `selectOnFocus` to `true` by default\n            if (!_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(options.caretPositionOnFocus) && _AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(options.selectOnFocus)) {\n                options.selectOnFocus = AutoNumeric.options.selectOnFocus.doNotSelect;\n            }\n\n            // If the user has set the `selectOnFocus` option to `true`, set `caretPositionOnFocus` to `doNoForceCaretPosition`\n            if (_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(options.caretPositionOnFocus) && !_AutoNumericHelper2.default.isUndefinedOrNullOrEmpty(options.selectOnFocus) && options.selectOnFocus === AutoNumeric.options.selectOnFocus.select) {\n                options.caretPositionOnFocus = AutoNumeric.options.caretPositionOnFocus.doNoForceCaretPosition;\n            }\n\n            return options;\n        }\n    }, {\n        key: '_cachesUsualRegularExpressions',\n        value: function _cachesUsualRegularExpressions(settings, regex) {\n            var allNumbersReg = '[0-9]';\n            var noAllNumbersReg = '[^0-9]';\n\n            // Test if there is a negative character in the string\n            var aNegReg = settings.negativeSignCharacter ? '([-\\\\' + settings.negativeSignCharacter + ']?)' : '(-?)';\n            regex.aNegRegAutoStrip = aNegReg;\n\n            var negativeSignRegPart = void 0;\n            if (settings.negativeSignCharacter) {\n                negativeSignRegPart = '\\\\' + settings.negativeSignCharacter;\n            } else {\n                negativeSignRegPart = '';\n            }\n\n            settings.skipFirstAutoStrip = new RegExp(aNegReg + '[^-' + negativeSignRegPart + '\\\\' + settings.decimalCharacter + allNumbersReg + '].*?(' + allNumbersReg + '|\\\\' + settings.decimalCharacter + allNumbersReg + ')');\n            settings.skipLastAutoStrip = new RegExp('(' + allNumbersReg + '\\\\' + settings.decimalCharacter + '?)[^\\\\' + settings.decimalCharacter + allNumbersReg + ']' + noAllNumbersReg + '*$');\n\n            var allowed = '-0123456789\\\\' + settings.decimalCharacter;\n            settings.allowedAutoStrip = new RegExp('[^' + allowed + ']', 'g');\n            settings.numRegAutoStrip = new RegExp(aNegReg + '(?:\\\\' + settings.decimalCharacter + '?(' + allNumbersReg + '+\\\\' + settings.decimalCharacter + allNumbersReg + '+)|(' + allNumbersReg + '*(?:\\\\' + settings.decimalCharacter + allNumbersReg + '*)?))');\n\n            // Using this regex version `^${regex.aNegRegAutoStrip}0*(\\\\d|$)` entirely clear the input on blur\n            settings.stripReg = new RegExp('^' + regex.aNegRegAutoStrip + '0*(' + allNumbersReg + ')');\n        }\n    }, {\n        key: '_convertOldOptionsToNewOnes',\n        value: function _convertOldOptionsToNewOnes(options) {\n            //TODO Delete this function once the old options are not used anymore\n            var oldOptionsConverter = {\n                // Old option names, with their corresponding new names\n                aSep: 'digitGroupSeparator',\n                nSep: 'noSeparatorOnFocus',\n                dGroup: 'digitalGroupSpacing',\n                aDec: 'decimalCharacter',\n                altDec: 'decimalCharacterAlternative',\n                aSign: 'currencySymbol',\n                pSign: 'currencySymbolPlacement',\n                pNeg: 'negativePositiveSignPlacement',\n                aSuffix: 'suffixText',\n                oLimits: 'overrideMinMaxLimits',\n                vMax: 'maximumValue',\n                vMin: 'minimumValue',\n                mDec: 'decimalPlacesOverride',\n                eDec: 'decimalPlacesShownOnFocus',\n                scaleDecimal: 'scaleDecimalPlaces',\n                aStor: 'saveValueToSessionStorage',\n                mRound: 'roundingMethod',\n                aPad: 'allowDecimalPadding',\n                nBracket: 'negativeBracketsTypeOnBlur',\n                wEmpty: 'emptyInputBehavior',\n                lZero: 'leadingZero',\n                aForm: 'formatOnPageLoad',\n                sNumber: 'selectNumberOnly',\n                anDefault: 'defaultValueOverride',\n                unSetOnSubmit: 'unformatOnSubmit',\n                outputType: 'outputFormat',\n                debug: 'showWarnings',\n\n                // Current options :\n                allowDecimalPadding: true,\n                caretPositionOnFocus: true,\n                createLocalList: true,\n                currencySymbol: true,\n                currencySymbolPlacement: true,\n                decimalCharacter: true,\n                decimalCharacterAlternative: true,\n                decimalPlacesOverride: true,\n                decimalPlacesShownOnFocus: true,\n                defaultValueOverride: true,\n                digitalGroupSpacing: true,\n                digitGroupSeparator: true,\n                emptyInputBehavior: true,\n                failOnUnknownOption: true,\n                formatOnPageLoad: true,\n                historySize: true,\n                isCancellable: true,\n                leadingZero: true,\n                maximumValue: true,\n                minimumValue: true,\n                modifyValueOnWheel: true,\n                negativeBracketsTypeOnBlur: true,\n                negativePositiveSignPlacement: true,\n                noEventListeners: true,\n                noSeparatorOnFocus: true,\n                onInvalidPaste: true,\n                outputFormat: true,\n                overrideMinMaxLimits: true,\n                readOnly: true,\n                roundingMethod: true,\n                saveValueToSessionStorage: true,\n                scaleDecimalPlaces: true,\n                scaleDivisor: true,\n                scaleSymbol: true,\n                selectNumberOnly: true,\n                selectOnFocus: true,\n                serializeSpaces: true,\n                showPositiveSign: true,\n                showWarnings: true,\n                styleRules: true,\n                suffixText: true,\n                unformatOnHover: true,\n                unformatOnSubmit: true,\n                wheelStep: true,\n\n                // Additional information that are added to the `settings` object :\n                //FIXME Find a way to exclude those internal data from the settings object (ideally by using another object, or better yet, class attributes) -->\n                allowedAutoStrip: true,\n                mIntNeg: true,\n                mIntPos: true,\n                negativeSignCharacter: true,\n                numRegAutoStrip: true,\n                positiveSignCharacter: true,\n                rawValue: true,\n                skipFirstAutoStrip: true,\n                skipLastAutoStrip: true,\n                stripReg: true\n            };\n\n            for (var option in options) {\n                if (options.hasOwnProperty(option)) {\n                    if (oldOptionsConverter[option] === true) {\n                        // If the option is a 'new' option, we continue looping\n                        continue;\n                    }\n\n                    if (oldOptionsConverter.hasOwnProperty(option)) {\n                        // Else we have an 'old' option name\n                        _AutoNumericHelper2.default.warning('You are using the deprecated option name \\'' + option + '\\'. Please use \\'' + oldOptionsConverter[option] + '\\' instead from now on. The old option name will be dropped soon.', true);\n\n                        // Then we modify the initial option object to use the new options instead of the old ones\n                        options[oldOptionsConverter[option]] = options[option];\n                        delete options[option];\n                    } else if (options.failOnUnknownOption) {\n                        // ...or the option name is unknown. This means there is a problem with the options object, therefore we throw an error.\n                        _AutoNumericHelper2.default.throwError('Option name \\'' + option + '\\' is unknown. Please fix the options passed to autoNumeric');\n                    }\n                }\n            }\n        }\n    }, {\n        key: '_toNumericValue',\n        value: function _toNumericValue(value, settings) {\n            //XXX Note; this function is static since we need to pass a `settings` object when calling the static `AutoNumeric.format()` method\n            var result = void 0;\n            if (_AutoNumericHelper2.default.isNumber(Number(value))) {\n                // The value has either already been stripped, or a 'real' javascript number is passed as a parameter\n                result = value;\n            } else {\n                // Else if it's a string that `Number()` cannot typecast, then we try to convert the localized numeric string to a numeric one\n                // Convert the value to a numeric string, stripping unnecessary characters in the process\n                result = this._convertToNumericString(value.toString(), settings);\n\n                // If the result is still not a numeric string, then we throw a warning\n                if (!_AutoNumericHelper2.default.isNumber(Number(result))) {\n                    _AutoNumericHelper2.default.warning('The value \"' + value + '\" being \"set\" is not numeric and therefore cannot be used appropriately.', settings.showWarnings);\n                    result = NaN;\n                }\n            }\n\n            return result;\n        }\n    }, {\n        key: '_checkIfInRange',\n        value: function _checkIfInRange(value, parsedMinValue, parsedMaxValue) {\n            var parsedValue = _AutoNumericHelper2.default.parseStr(value);\n            return _AutoNumericHelper2.default.testMinMax(parsedMinValue, parsedValue) > -1 && _AutoNumericHelper2.default.testMinMax(parsedMaxValue, parsedValue) < 1;\n        }\n    }, {\n        key: '_shouldSkipEventKey',\n        value: function _shouldSkipEventKey(eventKeyName) {\n            var isFnKeys = _AutoNumericHelper2.default.isInArray(eventKeyName, _AutoNumericEnum2.default.keyName._allFnKeys);\n            var isOSKeys = eventKeyName === _AutoNumericEnum2.default.keyName.OSLeft || eventKeyName === _AutoNumericEnum2.default.keyName.OSRight;\n            var isContextMenu = eventKeyName === _AutoNumericEnum2.default.keyName.ContextMenu;\n            var isSomeNonPrintableKeys = _AutoNumericHelper2.default.isInArray(eventKeyName, _AutoNumericEnum2.default.keyName._someNonPrintableKeys);\n            var isOtherNonPrintableKeys = eventKeyName === _AutoNumericEnum2.default.keyName.NumLock || eventKeyName === _AutoNumericEnum2.default.keyName.ScrollLock || eventKeyName === _AutoNumericEnum2.default.keyName.Insert || eventKeyName === _AutoNumericEnum2.default.keyName.Command;\n            var isUnrecognizableKeys = eventKeyName === _AutoNumericEnum2.default.keyName.Unidentified;\n\n            return isFnKeys || isOSKeys || isContextMenu || isSomeNonPrintableKeys || isUnrecognizableKeys || isOtherNonPrintableKeys;\n        }\n    }, {\n        key: '_serialize',\n        value: function _serialize(form) {\n            var intoAnArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var formatType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unformatted';\n\n            var _this7 = this;\n\n            var serializedSpaceCharacter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '+';\n            var forcedOutputFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n            var result = [];\n\n            if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) === 'object' && form.nodeName.toLowerCase() === 'form') {\n                Array.prototype.slice.call(form.elements).forEach(function (element) {\n                    if (element.name && !element.disabled && ['file', 'reset', 'submit', 'button'].indexOf(element.type) === -1) {\n                        if (element.type === 'select-multiple') {\n                            Array.prototype.slice.call(element.options).forEach(function (option) {\n                                if (option.selected) {\n                                    //TODO Should we unformat/format/localize the selection option (which be default should be read-only)?\n                                    if (intoAnArray) {\n                                        result.push({ name: element.name, value: option.value });\n                                    } else {\n                                        // into a string\n                                        result.push(encodeURIComponent(element.name) + '=' + encodeURIComponent(option.value));\n                                    }\n                                }\n                            });\n                        } else if (['checkbox', 'radio'].indexOf(element.type) === -1 || element.checked) {\n                            var valueResult = void 0;\n                            if (_this7.isManagedByAutoNumeric(element)) {\n                                var anObject = void 0;\n                                switch (formatType) {\n                                    case 'unformatted':\n                                        anObject = _this7.getAutoNumericElement(element);\n                                        if (!_AutoNumericHelper2.default.isNull(anObject)) {\n                                            valueResult = _this7.unformat(element, anObject.getSettings());\n                                        }\n                                        break;\n                                    case 'localized':\n                                        anObject = _this7.getAutoNumericElement(element);\n                                        if (!_AutoNumericHelper2.default.isNull(anObject)) {\n                                            // Here I need to clone the setting object, otherwise I would modify it when changing the `outputFormat` option value\n                                            var currentSettings = _AutoNumericHelper2.default.cloneObject(anObject.getSettings());\n                                            if (!_AutoNumericHelper2.default.isNull(forcedOutputFormat)) {\n                                                currentSettings.outputFormat = forcedOutputFormat;\n                                            }\n\n                                            valueResult = _this7.localize(element, currentSettings);\n                                        }\n                                        break;\n                                    case 'formatted':\n                                    default:\n                                        valueResult = element.value;\n                                }\n                            } else {\n                                valueResult = element.value;\n                            }\n\n                            if (_AutoNumericHelper2.default.isUndefined(valueResult)) {\n                                _AutoNumericHelper2.default.throwError('This error should never be hit. If it has, something really wrong happened!');\n                            }\n\n                            if (intoAnArray) {\n                                result.push({ name: element.name, value: valueResult });\n                            } else {\n                                // into a string\n                                result.push(encodeURIComponent(element.name) + '=' + encodeURIComponent(valueResult));\n                            }\n                        }\n                    }\n                });\n            }\n\n            var finalResult = void 0;\n\n            if (intoAnArray) {\n                // Result as an Array\n                // Note: `serializedSpaceCharacter` does not affect the array result since we do not change the space character for this one\n                finalResult = result;\n            } else {\n                // Result as a string\n                finalResult = result.join('&');\n\n                if ('+' === serializedSpaceCharacter) {\n                    finalResult = finalResult.replace(/%20/g, '+');\n                }\n            }\n\n            return finalResult;\n        }\n\n        /**\n         * Serialize the form values to a string, outputting numeric strings for each AutoNumeric-managed element values.\n         *\n         * @param {HTMLFormElement} form\n         * @param {string} serializedSpaceCharacter\n         * @returns {string}\n         */\n\n    }, {\n        key: '_serializeNumericString',\n        value: function _serializeNumericString(form) {\n            var serializedSpaceCharacter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '+';\n\n            return this._serialize(form, false, 'unformatted', serializedSpaceCharacter);\n        }\n\n        /**\n         * Serialize the form values to a string, outputting the formatted value as strings for each AutoNumeric-managed elements.\n         *\n         * @param {HTMLFormElement} form\n         * @param {string} serializedSpaceCharacter\n         * @returns {string}\n         */\n\n    }, {\n        key: '_serializeFormatted',\n        value: function _serializeFormatted(form) {\n            var serializedSpaceCharacter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '+';\n\n            return this._serialize(form, false, 'formatted', serializedSpaceCharacter);\n        }\n\n        /**\n         * Serialize the form values to a string, outputting localized strings for each AutoNumeric-managed element values.\n         *\n         * @param {HTMLFormElement} form\n         * @param {string} serializedSpaceCharacter\n         * @param {string|null} forcedOutputFormat If set, then this is the format that is used for the localization, instead of the default `outputFormat` option.\n         * @returns {string}\n         */\n\n    }, {\n        key: '_serializeLocalized',\n        value: function _serializeLocalized(form) {\n            var serializedSpaceCharacter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '+';\n            var forcedOutputFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n            return this._serialize(form, false, 'localized', serializedSpaceCharacter, forcedOutputFormat);\n        }\n\n        /**\n         * Generate an Array with the form values, outputting numeric strings for each AutoNumeric-managed element values.\n         *\n         * @param {HTMLFormElement} form\n         * @param {string} serializedSpaceCharacter\n         * @returns {Array}\n         */\n\n    }, {\n        key: '_serializeNumericStringArray',\n        value: function _serializeNumericStringArray(form) {\n            var serializedSpaceCharacter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '+';\n\n            return this._serialize(form, true, 'unformatted', serializedSpaceCharacter);\n        }\n\n        /**\n         * Generate an Array with the form values, outputting the formatted value as strings for each AutoNumeric-managed elements.\n         *\n         * @param {HTMLFormElement} form\n         * @param {string} serializedSpaceCharacter\n         * @returns {Array}\n         */\n\n    }, {\n        key: '_serializeFormattedArray',\n        value: function _serializeFormattedArray(form) {\n            var serializedSpaceCharacter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '+';\n\n            return this._serialize(form, true, 'formatted', serializedSpaceCharacter);\n        }\n\n        /**\n         * Generate an Array with the form values, outputting localized strings for each AutoNumeric-managed element values.\n         *\n         * @param {HTMLFormElement} form\n         * @param {string} serializedSpaceCharacter\n         * @param {string|null} forcedOutputFormat If set, then this is the format that is used for the localization, instead of the default `outputFormat` option.\n         * @returns {Array}\n         */\n\n    }, {\n        key: '_serializeLocalizedArray',\n        value: function _serializeLocalizedArray(form) {\n            var serializedSpaceCharacter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '+';\n            var forcedOutputFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n            return this._serialize(form, true, 'localized', serializedSpaceCharacter, forcedOutputFormat);\n        }\n    }]);\n\n    return AutoNumeric;\n}();\n\n/**\n * Initialize multiple DOM elements in one call (and possibly pass multiple values that will be mapped to each DOM element).\n *\n * @param {string|Array|{ rootElement: HTMLElement }|{ rootElement: HTMLElement, exclude: Array<HTMLInputElement>}} arg1\n * @param {number|Array|object|null} initialValue\n * @param {object|null} options\n * @returns {Array}\n */\n\n\nAutoNumeric.multiple = function (arg1) {\n    var initialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    var result = [];\n\n    // Analyze the arguments and transform them to make them exploitable\n    if (_AutoNumericHelper2.default.isObject(initialValue)) {\n        // If the user gave an option object as the second argument, instead of the initial values\n        options = initialValue;\n        initialValue = null;\n    }\n\n    if (_AutoNumericHelper2.default.isString(arg1)) {\n        arg1 = [].concat(_toConsumableArray(document.querySelectorAll(arg1))); // Convert a NodeList to an Array (cf. http://stackoverflow.com/a/37297292/2834898)\n    } else if (_AutoNumericHelper2.default.isObject(arg1)) {\n        if (!arg1.hasOwnProperty('rootElement')) {\n            _AutoNumericHelper2.default.throwError('The object passed to the \\'multiple\\' function is invalid ; no \\'rootElement\\' attribute found.');\n        }\n\n        // Retrieve the DOM element list from the given <form> element\n        var elements = [].concat(_toConsumableArray(arg1.rootElement.querySelectorAll('input')));\n        if (arg1.hasOwnProperty('exclude')) {\n            if (!Array.isArray(arg1.exclude)) {\n                _AutoNumericHelper2.default.throwError('The \\'exclude\\' array passed to the \\'multiple\\' function is invalid.');\n            }\n\n            // Filter out the excluded elements\n            arg1 = _AutoNumericHelper2.default.filterOut(elements, arg1.exclude);\n        } else {\n            arg1 = elements;\n        }\n    } else if (!_AutoNumericHelper2.default.isArray(arg1)) {\n        _AutoNumericHelper2.default.throwError('The given parameters to the \\'multiple\\' function are invalid.');\n    }\n\n    if (arg1.length === 0) {\n        _AutoNumericHelper2.default.warning('No valid DOM elements were given hence no AutoNumeric object were instantiated.');\n        return [];\n    }\n\n    // Initialize the initial values\n    var isInitialValueArray = _AutoNumericHelper2.default.isArray(initialValue);\n    var isInitialValueNumber = _AutoNumericHelper2.default.isNumber(initialValue);\n    var initialValueArraySize = void 0;\n    if (isInitialValueArray) {\n        initialValueArraySize = initialValue.length;\n    }\n\n    // Instantiate each AutoNumeric objects\n    arg1.forEach(function (domElement, index) {\n        if (isInitialValueNumber) {\n            // We set the same value for each elements\n            result.push(new AutoNumeric(domElement, initialValue, options));\n        } else if (isInitialValueArray && index <= initialValueArraySize) {\n            result.push(new AutoNumeric(domElement, initialValue[index], options));\n        } else {\n            result.push(new AutoNumeric(domElement, null, options));\n        }\n    });\n\n    return result;\n};\n\n/**\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent for obsolete browsers (IE)\n * //TODO Make sure we call that at least once when loading the AutoNumeric library\n */\n(function () {\n    if (typeof window.CustomEvent === 'function') {\n        return false;\n    }\n\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: void 0 };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n    window.CustomEvent = CustomEvent;\n})();\n\n/**\n * //XXX This is needed in order to get direct access to the `AutoNumeric` constructor without having to use `new AutoNumeric.default()` (cf. http://stackoverflow.com/a/36389244/2834898) : using `export var __useDefault = true;` does not work though.\n * //XXX The workaround (using `module.exports = AutoNumeric` instead of `export default class AutoNumeric {}`) comes from https://github.com/webpack/webpack/issues/706#issuecomment-167908576\n * //XXX And the explanation why Babel 6 changed the way Babel 5 worked : http://stackoverflow.com/a/33506169/2834898\n * //XXX Ideally, we should be able to just declare `export default class AutoNumeric {}` in the future, and remove the following `module.exports = AutoNumeric;` line\n *\n * @type {AutoNumeric}\n */\nmodule.exports = AutoNumeric;\n}.call(window));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Enumerations for autoNumeric.js\n * @author Alexandre Bonneau <alexandre.bonneau@linuxfr.eu>\n * @copyright © 2016 Alexandre Bonneau\n *\n * The MIT License (http://www.opensource.org/licenses/mit-license.php)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sub license, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Object that store the helper enumerations\n * @type {{ allowedTagList: [string], keyCode: {}, fromCharCodeKeyCode: [string], keyName: {} }}\n */\nvar AutoNumericEnum = {\n  /**\n   * List of allowed tag on which autoNumeric can be used.\n   */\n  allowedTagList: ['b', 'caption', 'cite', 'code', 'const', 'dd', 'del', 'div', 'dfn', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'input', 'ins', 'kdb', 'label', 'li', 'option', 'output', 'p', 'q', 's', 'sample', 'span', 'strong', 'td', 'th', 'u'],\n\n  /**\n   * Wrapper variable that hold named keyboard keys with their respective keyCode as seen in DOM events.\n   * cf. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n   *\n   * This deprecated information is used for obsolete browsers.\n   * @deprecated\n   */\n  keyCode: {\n    Backspace: 8,\n    Tab: 9,\n    // No 10, 11\n    // 12 === NumpadEqual on Windows\n    // 12 === NumLock on Mac\n    Enter: 13,\n    // 14 reserved, but not used\n    // 15 does not exists\n    Shift: 16,\n    Ctrl: 17,\n    Alt: 18,\n    Pause: 19,\n    CapsLock: 20,\n    // 21, 22, 23, 24, 25 : Asiatic key codes\n    // 26 does not exists\n    Esc: 27,\n    // 28, 29, 30, 31 : Convert, NonConvert, Accept and ModeChange keys\n    Space: 32,\n    PageUp: 33,\n    PageDown: 34,\n    End: 35,\n    Home: 36,\n    LeftArrow: 37,\n    UpArrow: 38,\n    RightArrow: 39,\n    DownArrow: 40,\n    Insert: 45,\n    Delete: 46,\n    num0: 48,\n    num1: 49,\n    num2: 50,\n    num3: 51,\n    num4: 52,\n    num5: 53,\n    num6: 54,\n    num7: 55,\n    num8: 56,\n    num9: 57,\n    a: 65,\n    b: 66,\n    c: 67,\n    d: 68,\n    e: 69,\n    f: 70,\n    g: 71,\n    h: 72,\n    i: 73,\n    j: 74,\n    k: 75,\n    l: 76,\n    m: 77,\n    n: 78,\n    o: 79,\n    p: 80,\n    q: 81,\n    r: 82,\n    s: 83,\n    t: 84,\n    u: 85,\n    v: 86,\n    w: 87,\n    x: 88,\n    y: 89,\n    z: 90,\n    OSLeft: 91,\n    OSRight: 92,\n    ContextMenu: 93,\n    numpad0: 96,\n    numpad1: 97,\n    numpad2: 98,\n    numpad3: 99,\n    numpad4: 100,\n    numpad5: 101,\n    numpad6: 102,\n    numpad7: 103,\n    numpad8: 104,\n    numpad9: 105,\n    MultiplyNumpad: 106,\n    PlusNumpad: 107,\n    MinusNumpad: 109,\n    DotNumpad: 110,\n    SlashNumpad: 111,\n    F1: 112,\n    F2: 113,\n    F3: 114,\n    F4: 115,\n    F5: 116,\n    F6: 117,\n    F7: 118,\n    F8: 119,\n    F9: 120,\n    F10: 121,\n    F11: 122,\n    F12: 123,\n    NumLock: 144,\n    ScrollLock: 145,\n    MyComputer: 182,\n    MyCalculator: 183,\n    Semicolon: 186,\n    Equal: 187,\n    Comma: 188,\n    Hyphen: 189,\n    Dot: 190,\n    Slash: 191,\n    Backquote: 192,\n    LeftBracket: 219,\n    Backslash: 220,\n    RightBracket: 221,\n    Quote: 222,\n    Command: 224,\n    AltGraph: 225,\n    AndroidDefault: 229 },\n\n  /**\n   * This object is the reverse of `keyCode`, and is used to translate the key code to named keys when no valid characters can be obtained by `String.fromCharCode`.\n   * Note: this sparse array is initialized later in the source code.\n   */\n  fromCharCodeKeyCode: [],\n\n  /**\n   * Wrapper variable that hold named keyboard keys with their respective key name (as set in KeyboardEvent.key).\n   * Those names are listed here :\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n   */\n  keyName: {\n    // Special values\n    Unidentified: 'Unidentified',\n    AndroidDefault: 'AndroidDefault',\n\n    // Modifier keys\n    Alt: 'Alt',\n    AltGr: 'AltGraph',\n    CapsLock: 'CapsLock', // Under Chrome, e.key is empty for CapsLock\n    Ctrl: 'Control',\n    Fn: 'Fn',\n    FnLock: 'FnLock',\n    Hyper: 'Hyper', // 'OS' under Firefox\n    Meta: 'Meta',\n    OSLeft: 'OS',\n    OSRight: 'OS',\n    Command: 'OS',\n    NumLock: 'NumLock',\n    ScrollLock: 'ScrollLock',\n    Shift: 'Shift',\n    Super: 'Super', // 'OS' under Firefox\n    Symbol: 'Symbol',\n    SymbolLock: 'SymbolLock',\n\n    // Whitespace keys\n    Enter: 'Enter',\n    Tab: 'Tab',\n    Space: ' ', // 'Spacebar' for Firefox <37, and IE9\n\n    // Navigation keys\n    LeftArrow: 'ArrowLeft', // 'Left' for Firefox <=36, and IE9\n    UpArrow: 'ArrowUp', // 'Up' for Firefox <=36, and IE9\n    RightArrow: 'ArrowRight', // 'Right' for Firefox <=36, and IE9\n    DownArrow: 'ArrowDown', // 'Down' for Firefox <=36, and IE9\n    End: 'End',\n    Home: 'Home',\n    PageUp: 'PageUp',\n    PageDown: 'PageDown',\n\n    // Editing keys\n    Backspace: 'Backspace',\n    Clear: 'Clear',\n    Copy: 'Copy',\n    CrSel: 'CrSel', // 'Crsel' for Firefox <=36, and IE9\n    Cut: 'Cut',\n    Delete: 'Delete', // 'Del' for Firefox <=36, and IE9\n    EraseEof: 'EraseEof',\n    ExSel: 'ExSel', // 'Exsel' for Firefox <=36, and IE9\n    Insert: 'Insert',\n    Paste: 'Paste',\n    Redo: 'Redo',\n    Undo: 'Undo',\n\n    // UI keys\n    Accept: 'Accept',\n    Again: 'Again',\n    Attn: 'Attn', // 'Unidentified' for Firefox, Chrome, and IE9 ('KanaMode' when using the Japanese keyboard layout)\n    Cancel: 'Cancel',\n    ContextMenu: 'ContextMenu', // 'Apps' for Firefox <=36, and IE9\n    Esc: 'Escape', // 'Esc' for Firefox <=36, and IE9\n    Execute: 'Execute',\n    Find: 'Find',\n    Finish: 'Finish', // 'Unidentified' for Firefox, Chrome, and IE9 ('Katakana' when using the Japanese keyboard layout)\n    Help: 'Help',\n    Pause: 'Pause',\n    Play: 'Play',\n    Props: 'Props',\n    Select: 'Select',\n    ZoomIn: 'ZoomIn',\n    ZoomOut: 'ZoomOut',\n\n    // Device keys\n    BrightnessDown: 'BrightnessDown',\n    BrightnessUp: 'BrightnessUp',\n    Eject: 'Eject',\n    LogOff: 'LogOff',\n    Power: 'Power',\n    PowerOff: 'PowerOff',\n    PrintScreen: 'PrintScreen',\n    Hibernate: 'Hibernate', // 'Unidentified' for Firefox <=37\n    Standby: 'Standby', // 'Unidentified' for Firefox <=36, and IE9\n    WakeUp: 'WakeUp',\n\n    // IME and composition keys\n    Compose: 'Compose',\n    Dead: 'Dead',\n\n    // Function keys\n    F1: 'F1',\n    F2: 'F2',\n    F3: 'F3',\n    F4: 'F4',\n    F5: 'F5',\n    F6: 'F6',\n    F7: 'F7',\n    F8: 'F8',\n    F9: 'F9',\n    F10: 'F10',\n    F11: 'F11',\n    F12: 'F12',\n\n    // Document keys\n    Print: 'Print',\n\n    // 'Normal' keys\n    num0: '0',\n    num1: '1',\n    num2: '2',\n    num3: '3',\n    num4: '4',\n    num5: '5',\n    num6: '6',\n    num7: '7',\n    num8: '8',\n    num9: '9',\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n    e: 'e',\n    f: 'f',\n    g: 'g',\n    h: 'h',\n    i: 'i',\n    j: 'j',\n    k: 'k',\n    l: 'l',\n    m: 'm',\n    n: 'n',\n    o: 'o',\n    p: 'p',\n    q: 'q',\n    r: 'r',\n    s: 's',\n    t: 't',\n    u: 'u',\n    v: 'v',\n    w: 'w',\n    x: 'x',\n    y: 'y',\n    z: 'z',\n    A: 'A',\n    B: 'B',\n    C: 'C',\n    D: 'D',\n    E: 'E',\n    F: 'F',\n    G: 'G',\n    H: 'H',\n    I: 'I',\n    J: 'J',\n    K: 'K',\n    L: 'L',\n    M: 'M',\n    N: 'N',\n    O: 'O',\n    P: 'P',\n    Q: 'Q',\n    R: 'R',\n    S: 'S',\n    T: 'T',\n    U: 'U',\n    V: 'V',\n    W: 'W',\n    X: 'X',\n    Y: 'Y',\n    Z: 'Z',\n    Semicolon: ';',\n    Equal: '=',\n    Comma: ',',\n    Hyphen: '-',\n    Minus: '-',\n    Plus: '+',\n    Dot: '.',\n    Slash: '/',\n    Backquote: '`',\n    LeftBracket: '[',\n    RightBracket: ']',\n    Backslash: '\\\\',\n    Quote: \"'\",\n\n    // Numeric keypad keys\n    numpad0: '0',\n    numpad1: '1',\n    numpad2: '2',\n    numpad3: '3',\n    numpad4: '4',\n    numpad5: '5',\n    numpad6: '6',\n    numpad7: '7',\n    numpad8: '8',\n    numpad9: '9',\n    NumpadDot: '.',\n    NumpadDotAlt: ',', // Modern browsers automatically adapt the character sent by this key to the decimal character of the current language\n    NumpadMultiply: '*',\n    NumpadPlus: '+',\n    NumpadMinus: '-',\n    NumpadSlash: '/',\n    NumpadDotObsoleteBrowsers: 'Decimal',\n    NumpadMultiplyObsoleteBrowsers: 'Multiply',\n    NumpadPlusObsoleteBrowsers: 'Add',\n    NumpadMinusObsoleteBrowsers: 'Subtract',\n    NumpadSlashObsoleteBrowsers: 'Divide',\n\n    // Special arrays for quicker tests\n    _allFnKeys: ['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'],\n    _someNonPrintableKeys: ['Tab', 'Enter', 'Shift', 'ShiftLeft', 'ShiftRight', 'Control', 'ControlLeft', 'ControlRight', 'Alt', 'AltLeft', 'AltRight', 'Pause', 'CapsLock', 'Escape'],\n    _directionKeys: ['PageUp', 'PageDown', 'End', 'Home', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp']\n  }\n};\n\n// Here we populate the sparse array that uses the `event.keyCode` as index, and returns the corresponding key name (à la event.key)\nAutoNumericEnum.fromCharCodeKeyCode[0] = 'LaunchCalculator';\nAutoNumericEnum.fromCharCodeKeyCode[8] = 'Backspace';\nAutoNumericEnum.fromCharCodeKeyCode[9] = 'Tab';\nAutoNumericEnum.fromCharCodeKeyCode[13] = 'Enter';\nAutoNumericEnum.fromCharCodeKeyCode[16] = 'Shift';\nAutoNumericEnum.fromCharCodeKeyCode[17] = 'Ctrl';\nAutoNumericEnum.fromCharCodeKeyCode[18] = 'Alt';\nAutoNumericEnum.fromCharCodeKeyCode[19] = 'Pause';\nAutoNumericEnum.fromCharCodeKeyCode[20] = 'CapsLock';\nAutoNumericEnum.fromCharCodeKeyCode[27] = 'Escape';\nAutoNumericEnum.fromCharCodeKeyCode[32] = ' ';\nAutoNumericEnum.fromCharCodeKeyCode[33] = 'PageUp';\nAutoNumericEnum.fromCharCodeKeyCode[34] = 'PageDown';\nAutoNumericEnum.fromCharCodeKeyCode[35] = 'End';\nAutoNumericEnum.fromCharCodeKeyCode[36] = 'Home';\nAutoNumericEnum.fromCharCodeKeyCode[37] = 'ArrowLeft';\nAutoNumericEnum.fromCharCodeKeyCode[38] = 'ArrowUp';\nAutoNumericEnum.fromCharCodeKeyCode[39] = 'ArrowRight';\nAutoNumericEnum.fromCharCodeKeyCode[40] = 'ArrowDown';\nAutoNumericEnum.fromCharCodeKeyCode[45] = 'Insert';\nAutoNumericEnum.fromCharCodeKeyCode[46] = 'Delete';\nAutoNumericEnum.fromCharCodeKeyCode[48] = '0';\nAutoNumericEnum.fromCharCodeKeyCode[49] = '1';\nAutoNumericEnum.fromCharCodeKeyCode[50] = '2';\nAutoNumericEnum.fromCharCodeKeyCode[51] = '3';\nAutoNumericEnum.fromCharCodeKeyCode[52] = '4';\nAutoNumericEnum.fromCharCodeKeyCode[53] = '5';\nAutoNumericEnum.fromCharCodeKeyCode[54] = '6';\nAutoNumericEnum.fromCharCodeKeyCode[55] = '7';\nAutoNumericEnum.fromCharCodeKeyCode[56] = '8';\nAutoNumericEnum.fromCharCodeKeyCode[57] = '9';\n// [65, 'a'],\n// [66, 'b'],\n// [67, 'c'],\n// [68, 'd'],\n// [69, 'e'],\n// [70, 'f'],\n// [71, 'g'],\n// [72, 'h'],\n// [73, 'i'],\n// [74, 'j'],\n// [75, 'k'],\n// [76, 'l'],\n// [77, 'm'],\n// [78, 'n'],\n// [79, 'o'],\n// [80, 'p'],\n// [81, 'q'],\n// [82, 'r'],\n// [83, 's'],\n// [84, 't'],\n// [85, 'u'],\n// [86, 'v'],\n// [87, 'w'],\n// [88, 'x'],\n// [89, 'y'],\n// [90, 'z'],\nAutoNumericEnum.fromCharCodeKeyCode[91] = 'OS'; // Note: Firefox and Chrome reports 'OS' instead of 'OSLeft'\nAutoNumericEnum.fromCharCodeKeyCode[92] = 'OSRight';\nAutoNumericEnum.fromCharCodeKeyCode[93] = 'ContextMenu';\nAutoNumericEnum.fromCharCodeKeyCode[96] = '0';\nAutoNumericEnum.fromCharCodeKeyCode[97] = '1';\nAutoNumericEnum.fromCharCodeKeyCode[98] = '2';\nAutoNumericEnum.fromCharCodeKeyCode[99] = '3';\nAutoNumericEnum.fromCharCodeKeyCode[100] = '4';\nAutoNumericEnum.fromCharCodeKeyCode[101] = '5';\nAutoNumericEnum.fromCharCodeKeyCode[102] = '6';\nAutoNumericEnum.fromCharCodeKeyCode[103] = '7';\nAutoNumericEnum.fromCharCodeKeyCode[104] = '8';\nAutoNumericEnum.fromCharCodeKeyCode[105] = '9';\nAutoNumericEnum.fromCharCodeKeyCode[106] = '*';\nAutoNumericEnum.fromCharCodeKeyCode[107] = '+';\nAutoNumericEnum.fromCharCodeKeyCode[109] = '-';\nAutoNumericEnum.fromCharCodeKeyCode[110] = '.';\nAutoNumericEnum.fromCharCodeKeyCode[111] = '/';\nAutoNumericEnum.fromCharCodeKeyCode[112] = 'F1';\nAutoNumericEnum.fromCharCodeKeyCode[113] = 'F2';\nAutoNumericEnum.fromCharCodeKeyCode[114] = 'F3';\nAutoNumericEnum.fromCharCodeKeyCode[115] = 'F4';\nAutoNumericEnum.fromCharCodeKeyCode[116] = 'F5';\nAutoNumericEnum.fromCharCodeKeyCode[117] = 'F6';\nAutoNumericEnum.fromCharCodeKeyCode[118] = 'F7';\nAutoNumericEnum.fromCharCodeKeyCode[119] = 'F8';\nAutoNumericEnum.fromCharCodeKeyCode[120] = 'F9';\nAutoNumericEnum.fromCharCodeKeyCode[121] = 'F10';\nAutoNumericEnum.fromCharCodeKeyCode[122] = 'F11';\nAutoNumericEnum.fromCharCodeKeyCode[123] = 'F12';\nAutoNumericEnum.fromCharCodeKeyCode[144] = 'NumLock';\nAutoNumericEnum.fromCharCodeKeyCode[145] = 'ScrollLock';\nAutoNumericEnum.fromCharCodeKeyCode[182] = 'MyComputer';\nAutoNumericEnum.fromCharCodeKeyCode[183] = 'MyCalculator';\nAutoNumericEnum.fromCharCodeKeyCode[186] = ';';\nAutoNumericEnum.fromCharCodeKeyCode[187] = '=';\nAutoNumericEnum.fromCharCodeKeyCode[188] = ',';\nAutoNumericEnum.fromCharCodeKeyCode[189] = '-';\nAutoNumericEnum.fromCharCodeKeyCode[190] = '.';\nAutoNumericEnum.fromCharCodeKeyCode[191] = '/';\nAutoNumericEnum.fromCharCodeKeyCode[192] = '`';\nAutoNumericEnum.fromCharCodeKeyCode[219] = '[';\nAutoNumericEnum.fromCharCodeKeyCode[220] = '\\\\';\nAutoNumericEnum.fromCharCodeKeyCode[221] = ']';\nAutoNumericEnum.fromCharCodeKeyCode[222] = \"'\";\nAutoNumericEnum.fromCharCodeKeyCode[224] = 'Meta';\nAutoNumericEnum.fromCharCodeKeyCode[225] = 'AltGraph';\n\nexports.default = AutoNumericEnum;\n}.call(window));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nelper functions for autoNumeric.js\nauthor Alexandre Bonneau <alexandre.bonneau@linuxfr.eu>\ncopyright © 2016 Alexandre Bonneau\nnhe MIT License (http://www.opensource.org/licenses/mit-license.php)\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\nermission is hereby granted, free of charge, to any person\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * obtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sub license, and/or sell\ncopies of the Software, and to permit persons to whom the\noftware is furnished to do so, subject to the following\nconditions:\nnhe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nnnnnnnnnnn\nvar _AutoNumericEnum = __webpack_require__(2);\n\nvar _AutoNumericEnum2 = _interopRequireDefault(_AutoNumericEnum);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Static class that holds all the helper functions autoNumeric uses.\n * Note : none of the functions in there are aware of any autoNumeric internals (which means there are no references to autoNumeric-specific info like options names or data structures).\n */\nvar AutoNumericHelper = function () {\n    function AutoNumericHelper() {\n        _classCallCheck(this, AutoNumericHelper);\n    }\n\n    _createClass(AutoNumericHelper, null, [{\n        key: 'isNull',\n\n        /**\n         * Return `true` if the `value` is null\n         *\n         * @static\n         * @param {*} value The value to test\n         * @returns {boolean} Return `true` if the `value` is null, FALSE otherwise\n         */\n        value: function isNull(value) {\n            return value === null;\n        }\n\n        /**\n         * Return `true` if the `value` is undefined\n         *\n         * @static\n         * @param {*} value The value to test\n         * @returns {boolean} Return `true` if the `value` is undefined, FALSE otherwise\n         */\n\n    }, {\n        key: 'isUndefined',\n        value: function isUndefined(value) {\n            return value === void 0;\n        }\n\n        /**\n         * Return `true` if the `value` is undefined, null or empty\n         *\n         * @param {*} value\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isUndefinedOrNullOrEmpty',\n        value: function isUndefinedOrNullOrEmpty(value) {\n            return value === null || value === void 0 || '' === value;\n        }\n\n        /**\n         * Return `true` if the given parameter is a String\n         *\n         * @param {*} str\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isString',\n        value: function isString(str) {\n            return typeof str === 'string' || str instanceof String;\n        }\n        /**\n         * Return `true` if the `value` is an empty string ''\n         *\n         * @static\n         * @param {*} value The value to test\n         * @returns {boolean} Return `true` if the `value` is an empty string '', FALSE otherwise\n         */\n\n    }, {\n        key: 'isEmptyString',\n        value: function isEmptyString(value) {\n            return value === '';\n        }\n\n        /**\n         * Return `true` if the parameter is a boolean\n         *\n         * @static\n         * @param {*} value\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isBoolean',\n        value: function isBoolean(value) {\n            return typeof value === 'boolean';\n        }\n\n        /**\n         * Return `true` if the parameter is a string 'true' or 'false'\n         *\n         * This function accepts any cases for those strings.\n         * @param {string} value\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isTrueOrFalseString',\n        value: function isTrueOrFalseString(value) {\n            var lowercaseValue = String(value).toLowerCase();\n            return lowercaseValue === 'true' || lowercaseValue === 'false';\n        }\n\n        /**\n         * Return `true` if the parameter is an object\n         *\n         * @param {*} reference\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isObject',\n        value: function isObject(reference) {\n            return (typeof reference === 'undefined' ? 'undefined' : _typeof(reference)) === 'object' && reference !== null && !Array.isArray(reference);\n        }\n\n        /**\n         * Return `true` if the given object is empty\n         * cf. http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object and http://jsperf.com/empty-object-test\n         *\n         * @param {object} obj\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isEmptyObj',\n        value: function isEmptyObj(obj) {\n            for (var prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        /**\n         * Return `true` if the parameter is a real number (and not a numeric string).\n         *\n         * @param {*} n\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isNumberStrict',\n        value: function isNumberStrict(n) {\n            return typeof n === 'number';\n        }\n\n        /**\n         * Return `true` if the parameter is a number (or a number written as a string).\n         *\n         * @param {*} n\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isNumber',\n        value: function isNumber(n) {\n            return !this.isArray(n) && !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        /**\n         * Return `true` if the parameter is a number (or a number written as a string).\n         * This version also accepts Arabic and Persian numbers.\n         *\n         * @param {*} n\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isNumberOrArabic',\n        value: function isNumberOrArabic(n) {\n            var latinConvertedNumber = this.arabicToLatinNumbers(n, false, true, true);\n            return this.isNumber(latinConvertedNumber);\n        }\n\n        /**\n         * Return `true` if the parameter is an integer (and not a float).\n         *\n         * @param {*} n\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isInt',\n        value: function isInt(n) {\n            return typeof n === 'number' && parseFloat(n) === parseInt(n, 10) && !isNaN(n);\n        }\n\n        /**\n         * Return `true` if the parameter is a function.\n         *\n         * @param {function} func\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isFunction',\n        value: function isFunction(func) {\n            return typeof func === 'function';\n        }\n\n        /**\n         * Return `true` is the string `str` contains the string `needle`\n         * Note: this function does not coerce the parameters types\n         *\n         * @param {string} str\n         * @param {string} needle\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'contains',\n        value: function contains(str, needle) {\n            //TODO Use `Array.prototype.includes()` when available (cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\n            if (!this.isString(str) || !this.isString(needle) || str === '' || needle === '') {\n                return false;\n            }\n\n            return str.indexOf(needle) !== -1;\n        }\n\n        /**\n         * Return `true` if the `needle` is in the array\n         *\n         * @param {*} needle\n         * @param {Array} array\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isInArray',\n        value: function isInArray(needle, array) {\n            if (!this.isArray(array) || array === [] || this.isUndefined(needle)) {\n                return false;\n            }\n\n            return array.indexOf(needle) !== -1;\n        }\n\n        /**\n         * Return `true` if the parameter is an Array\n         * //TODO Replace this by the default `Array.isArray()` function?\n         *\n         * @param {*} arr\n         * @throws Error\n         * @returns {*|boolean}\n         */\n\n    }, {\n        key: 'isArray',\n        value: function isArray(arr) {\n            if (Object.prototype.toString.call([]) === '[object Array]') {\n                // Make sure an array has a class attribute of [object Array]\n                // Test passed, now check if is an Array\n                return Array.isArray(arr) || (typeof arr === 'undefined' ? 'undefined' : _typeof(arr)) === 'object' && Object.prototype.toString.call(arr) === '[object Array]';\n            } else {\n                throw new Error('toString message changed for Object Array'); // Verify that the string returned by `toString` does not change in the future (cf. http://stackoverflow.com/a/8365215)\n            }\n        }\n\n        /**\n         * Return `true` if the parameter is a DOM element\n         * cf. http://stackoverflow.com/a/4754104/2834898\n         *\n         * @param {*} obj\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isElement',\n        value: function isElement(obj) {\n            // return !!(obj && obj.nodeName);\n            // return obj && 'nodeType' in obj;\n            // return obj instanceof Element || obj instanceof HTMLInputElement || obj instanceof HTMLElement;\n            return obj instanceof Element;\n        }\n\n        /**\n         * Return `true` in the given DOM element is an <input>.\n         *\n         * @param {HTMLElement|HTMLInputElement} domElement\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: 'isInputElement',\n        value: function isInputElement(domElement) {\n            return this.isElement(domElement) && domElement.tagName.toLowerCase() === 'input';\n        }\n\n        /**\n         * Return `true` if the parameter is a string that represents a float number, and that number has a decimal part\n         *\n         * @param {string} str\n         * @returns {boolean}\n         */\n        // static hasDecimals(str) {\n        //     const [, decimalPart] = str.split('.');\n        //     return !isUndefined(decimalPart);\n        // }\n\n        /**\n         * Return the number of decimal places if the parameter is a string that represents a float number, and that number has a decimal part.\n         *\n         * @param {string} str\n         * @returns {int}\n         */\n\n    }, {\n        key: 'decimalPlaces',\n        value: function decimalPlaces(str) {\n            var _str$split = str.split('.'),\n                _str$split2 = _slicedToArray(_str$split, 2),\n                decimalPart = _str$split2[1];\n\n            if (!this.isUndefined(decimalPart)) {\n                return decimalPart.length;\n            }\n\n            return 0;\n        }\n\n        /**\n         * Return the code for the key used to generate the given event.\n         *\n         * @param {Event} event\n         * @returns {string|Number}\n         */\n\n    }, {\n        key: 'keyCodeNumber',\n        value: function keyCodeNumber(event) {\n            // `event.keyCode` and `event.which` are deprecated, `KeyboardEvent.key` (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) must be used now\n            // Also, do note that Firefox generate a 'keypress' event (e.keyCode === 0) for the keys that do not print a character (ie. 'Insert', 'Delete', 'Fn' keys, 'PageUp', 'PageDown' etc.). 'Shift' on the other hand does not generate a keypress event.\n            return typeof event.which === 'undefined' ? event.keyCode : event.which;\n        }\n\n        /**\n         * Return the character from the event key code.\n         * If the KeyboardEvent does not represent a printable character, then the key name is used (ie. 'Meta', 'Shift', 'F1', etc.)\n         * @example character(50) => '2'\n         *\n         * @param {KeyboardEvent} event\n         * @returns {string}\n         */\n\n    }, {\n        key: 'character',\n        value: function character(event) {\n            var result = void 0;\n            if (event.key === 'Unidentified' || event.key === void 0 || this.isSeleniumBot()) {\n                //XXX The selenium geckodriver do not understand `event.key`, hence when using it, we need to rely on the old deprecated `keyCode` attribute, cf. upstream issue https://github.com/mozilla/geckodriver/issues/440\n                // Use the old deprecated keyCode property, if the new `key` one is not supported\n                var keyCode = this.keyCodeNumber(event);\n                if (keyCode === _AutoNumericEnum2.default.keyCode.AndroidDefault) {\n                    return _AutoNumericEnum2.default.keyName.AndroidDefault;\n                }\n\n                var potentialResult = _AutoNumericEnum2.default.fromCharCodeKeyCode[keyCode];\n                if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(potentialResult)) {\n                    // Since `String.fromCharCode` do not return named keys for some keys ('Escape' and 'Enter' for instance), we convert the characters to the key names\n                    result = potentialResult;\n                } else {\n                    result = String.fromCharCode(keyCode);\n                }\n            } else {\n                var browser = void 0;\n                switch (event.key) {\n                    // Manages all the special cases for obsolete browsers that return the non-standard names\n                    case 'Add':\n                        result = _AutoNumericEnum2.default.keyName.NumpadPlus;\n                        break;\n                    case 'Apps':\n                        result = _AutoNumericEnum2.default.keyName.ContextMenu;\n                        break;\n                    case 'Crsel':\n                        result = _AutoNumericEnum2.default.keyName.CrSel;\n                        break;\n                    case 'Decimal':\n                        result = _AutoNumericEnum2.default.keyName.NumpadDot;\n                        break;\n                    case 'Del':\n                        browser = this.browser();\n                        if ((browser.name = 'firefox' && browser.version <= 36) || (browser.name = 'ie' && browser.version <= 9)) {\n                            // Special workaround for the obsolete browser IE11 which output a 'Delete' key when using the numpad 'dot' one! This fixes issue #401\n                            // This workaround break the usage of the 'Delete' key for Firefox <=36, and IE9, since those browser send 'Del' instead of 'Delete', therefore we only use it for those obsolete browsers\n                            result = _AutoNumericEnum2.default.keyName.Dot;\n                        } else {\n                            result = _AutoNumericEnum2.default.keyName.Delete;\n                        }\n                        break;\n                    case 'Divide':\n                        result = _AutoNumericEnum2.default.keyName.NumpadSlash;\n                        break;\n                    case 'Down':\n                        result = _AutoNumericEnum2.default.keyName.DownArrow;\n                        break;\n                    case 'Esc':\n                        result = _AutoNumericEnum2.default.keyName.Esc;\n                        break;\n                    case 'Exsel':\n                        result = _AutoNumericEnum2.default.keyName.ExSel;\n                        break;\n                    case 'Left':\n                        result = _AutoNumericEnum2.default.keyName.LeftArrow;\n                        break;\n                    case 'Meta':\n                    case 'Super':\n                        result = _AutoNumericEnum2.default.keyName.OSLeft;\n                        break;\n                    case 'Multiply':\n                        result = _AutoNumericEnum2.default.keyName.NumpadMultiply;\n                        break;\n                    case 'Right':\n                        result = _AutoNumericEnum2.default.keyName.RightArrow;\n                        break;\n                    case 'Spacebar':\n                        result = _AutoNumericEnum2.default.keyName.Space;\n                        break;\n                    case 'Subtract':\n                        result = _AutoNumericEnum2.default.keyName.NumpadMinus;\n                        break;\n                    case 'Up':\n                        result = _AutoNumericEnum2.default.keyName.UpArrow;\n                        break;\n                    default:\n                        // The normal case\n                        result = event.key;\n                }\n            }\n\n            return result;\n        }\n\n        /**\n         * Return an object containing the name and version of the current browser.\n         * @example `browserVersion()` => { name: 'Firefox', version: '42' }\n         * Based on http://stackoverflow.com/a/38080051/2834898\n         *\n         * @returns {{ name: string, version: string }}\n         */\n\n    }, {\n        key: 'browser',\n        value: function browser() {\n            var ua = navigator.userAgent;\n            var tem = void 0;\n            var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n\n            if (/trident/i.test(M[1])) {\n                tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n                return { name: 'ie', version: tem[1] || '' };\n            }\n\n            if (M[1] === 'Chrome') {\n                tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n                if (tem !== null) {\n                    return { name: tem[1].replace('OPR', 'opera'), version: tem[2] };\n                }\n            }\n\n            M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\n            if ((tem = ua.match(/version\\/(\\d+)/i)) !== null) {\n                M.splice(1, 1, tem[1]);\n            }\n\n            return { name: M[0].toLowerCase(), version: M[1] };\n        }\n\n        /**\n         * Check if the browser is controlled by Selenium.\n         * Note: This only works within the geckodriver.\n         * cf. http://stackoverflow.com/questions/33225947/can-a-website-detect-when-you-are-using-selenium-with-chromedriver\n         *\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isSeleniumBot',\n        value: function isSeleniumBot() {\n            // noinspection JSUnresolvedVariable\n            return window.navigator.webdriver === true;\n        }\n\n        /**\n         * Return `true` if the given number is negative, or if the given string contains a negative sign :\n         * - everywhere in the string (by default), or\n         * - on the first character only if the `checkEverywhere` parameter is set to `false`.\n         *\n         * @param {number|string} numberOrNumericString A Number, or a number represented by a string\n         * @param {boolean} checkEverywhere If TRUE, then the negative sign is search everywhere in the numeric string (this is needed for instance if the string is '1234.56-')\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isNegative',\n        value: function isNegative(numberOrNumericString) {\n            var checkEverywhere = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (numberOrNumericString === '-') {\n                return true;\n            }\n\n            if (numberOrNumericString === '') {\n                return false;\n            }\n\n            //TODO Use the `negativeSignCharacter` from the settings here\n            if (AutoNumericHelper.isNumber(numberOrNumericString)) {\n                return numberOrNumericString < 0;\n            }\n\n            if (checkEverywhere) {\n                return this.contains(numberOrNumericString, '-');\n            }\n\n            return this.isNegativeStrict(numberOrNumericString);\n        }\n\n        /**\n         * Return `true` if the given string contains a negative sign on the first character (on the far left).\n         *\n         * @example isNegativeStrict('1234.56')     => false\n         * @example isNegativeStrict('1234.56-')    => false\n         * @example isNegativeStrict('-1234.56')    => true\n         * @example isNegativeStrict('-1,234.56 €') => true\n         *\n         * @param {string} numericString\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isNegativeStrict',\n        value: function isNegativeStrict(numericString) {\n            //TODO Using the `negativeSignCharacter` from the settings here\n            return numericString.charAt(0) === '-';\n        }\n\n        /**\n         * Return `true` if the very first character is the opening bracket, and if the rest of the `valueString` also has the closing bracket.\n         *\n         * @param {string} valueString\n         * @param {string} leftBracket\n         * @param {string} rightBracket\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isNegativeWithBrackets',\n        value: function isNegativeWithBrackets(valueString, leftBracket, rightBracket) {\n            return valueString.charAt(0) === leftBracket && this.contains(valueString, rightBracket);\n        }\n\n        /**\n         * Return `true` if the formatted or unformatted numeric string represent the value 0 (ie. '0,00 €'), or is empty (' €').\n         * This works since we test if there are any numbers from 1 to 9 in the string. If there is none, then the number is zero (or the string is empty).\n         *\n         * @param {string} numericString\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isZeroOrHasNoValue',\n        value: function isZeroOrHasNoValue(numericString) {\n            return !/[1-9]/g.test(numericString);\n        }\n\n        /**\n         * Return the negative version of the value (represented as a string) given as a parameter.\n         *\n         * @param {string} value\n         * @returns {*}\n         */\n\n    }, {\n        key: 'setRawNegativeSign',\n        value: function setRawNegativeSign(value) {\n            if (!this.isNegativeStrict(value)) {\n                return '-' + value;\n            }\n\n            return value;\n        }\n\n        /**\n         * Replace the character at the position `index` in the string `string` by the character(s) `newCharacter`.\n         *\n         * @param {string} string\n         * @param {int} index\n         * @param {string} newCharacter\n         * @returns {string}\n         */\n\n    }, {\n        key: 'replaceCharAt',\n        value: function replaceCharAt(string, index, newCharacter) {\n            return '' + string.substr(0, index) + newCharacter + string.substr(index + newCharacter.length);\n        }\n\n        /**\n         * Return the value clamped to the nearest minimum/maximum value, as defined in the settings.\n         *\n         * @param {string|number} value\n         * @param {object} settings\n         * @returns {number}\n         */\n\n    }, {\n        key: 'clampToRangeLimits',\n        value: function clampToRangeLimits(value, settings) {\n            //XXX This function always assume `settings.minimumValue` is lower than `settings.maximumValue`\n            return Math.max(settings.minimumValue, Math.min(settings.maximumValue, value));\n        }\n\n        /**\n         * Return the number of number or dot characters on the left side of the caret, in a formatted number.\n         *\n         * @param {string} formattedNumberString\n         * @param {int} caretPosition This must be a positive integer\n         * @param {string} decimalCharacter\n         * @returns {number}\n         */\n\n    }, {\n        key: 'countNumberCharactersOnTheCaretLeftSide',\n        value: function countNumberCharactersOnTheCaretLeftSide(formattedNumberString, caretPosition, decimalCharacter) {\n            // Here we count the dot and report it as a number character too, since it will 'stay' in the Javascript number when unformatted\n            var numberDotOrNegativeSign = new RegExp('[0-9' + decimalCharacter + '-]'); // No need to escape the decimal character here, since it's in `[]`\n\n            var numberDotAndNegativeSignCount = 0;\n            for (var i = 0; i < caretPosition; i++) {\n                // Test if the character is a number, a dot or an hyphen. If it is, count it, otherwise ignore it\n                if (numberDotOrNegativeSign.test(formattedNumberString[i])) {\n                    numberDotAndNegativeSignCount++;\n                }\n            }\n\n            return numberDotAndNegativeSignCount;\n        }\n\n        /**\n         * Walk the `formattedNumberString` from left to right, one char by one, counting the `formattedNumberStringIndex`.\n         * If the char is in the `rawNumberString` (starting at index 0), then `rawNumberStringIndex++`, and continue until\n         * there is no more characters in `rawNumberString`) or that `rawNumberStringIndex === caretPositionInRawValue`.\n         * When you stop, the `formattedNumberStringIndex` is the position where the caret should be set.\n         *\n         * @example\n         * 1234567|89.01   : position 7 (rawNumberString)\n         * 123.456.7|89,01 : position 9 (formattedNumberString)\n         *\n         * @param {string} rawNumberString\n         * @param {int} caretPositionInRawValue\n         * @param {string} formattedNumberString\n         * @param {string} decimalCharacter\n         * @returns {*}\n         */\n\n    }, {\n        key: 'findCaretPositionInFormattedNumber',\n        value: function findCaretPositionInFormattedNumber(rawNumberString, caretPositionInRawValue, formattedNumberString, decimalCharacter) {\n            var formattedNumberStringSize = formattedNumberString.length;\n            var rawNumberStringSize = rawNumberString.length;\n\n            var formattedNumberStringIndex = void 0;\n            var rawNumberStringIndex = 0;\n            for (formattedNumberStringIndex = 0; formattedNumberStringIndex < formattedNumberStringSize && rawNumberStringIndex < rawNumberStringSize && rawNumberStringIndex < caretPositionInRawValue; formattedNumberStringIndex++) {\n                if (rawNumberString[rawNumberStringIndex] === formattedNumberString[formattedNumberStringIndex] || rawNumberString[rawNumberStringIndex] === '.' && formattedNumberString[formattedNumberStringIndex] === decimalCharacter) {\n                    rawNumberStringIndex++;\n                }\n            }\n\n            return formattedNumberStringIndex;\n        }\n\n        /**\n         * Count the number of occurrence of the given character, in the given text.\n         *\n         * @param {string} character\n         * @param {string} text\n         * @returns {number}\n         */\n\n    }, {\n        key: 'countCharInText',\n        value: function countCharInText(character, text) {\n            var charCounter = 0;\n            for (var i = 0; i < text.length; i++) {\n                if (text[i] === character) {\n                    charCounter++;\n                }\n            }\n\n            return charCounter;\n        }\n\n        /**\n         * Return the index that can be used to set the caret position.\n         * This takes into account that the position is starting at '0', not 1.\n         *\n         * @param {int} characterCount\n         * @returns {number}\n         */\n\n    }, {\n        key: 'convertCharacterCountToIndexPosition',\n        value: function convertCharacterCountToIndexPosition(characterCount) {\n            return Math.max(characterCount, characterCount - 1);\n        }\n\n        /**\n         * Cross browser routine for getting selected range/cursor position.\n         * Note: this also works with edge cases like contenteditable-enabled elements, and hidden inputs.\n         *\n         * @param {HTMLInputElement|EventTarget} element\n         * @returns {{}}\n         */\n\n    }, {\n        key: 'getElementSelection',\n        value: function getElementSelection(element) {\n            var position = {};\n\n            var isSelectionStartUndefined = void 0;\n            try {\n                isSelectionStartUndefined = this.isUndefined(element.selectionStart);\n            } catch (error) {\n                isSelectionStartUndefined = false;\n            }\n\n            try {\n                if (isSelectionStartUndefined) {\n                    var selection = window.getSelection();\n                    var selectionInfo = selection.getRangeAt(0);\n                    position.start = selectionInfo.startOffset;\n                    position.end = selectionInfo.endOffset;\n                    position.length = position.end - position.start;\n                } else {\n                    position.start = element.selectionStart;\n                    position.end = element.selectionEnd;\n                    position.length = position.end - position.start;\n                }\n            } catch (error) {\n                // Manages the cases where :\n                // - the 'contenteditable' elements that have no selections\n                // - the <input> element is of type 'hidden'\n                position.start = 0;\n                position.end = 0;\n                position.length = 0;\n            }\n\n            return position;\n        }\n\n        /**\n         * Cross browser routine for setting selected range/cursor position\n         *\n         * @param {HTMLInputElement|EventTarget} element\n         * @param {int} start\n         * @param {int|null} end\n         */\n\n    }, {\n        key: 'setElementSelection',\n        value: function setElementSelection(element, start) {\n            var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n            if (this.isUndefinedOrNullOrEmpty(end)) {\n                end = start;\n            }\n\n            if (this.isInputElement(element)) {\n                element.setSelectionRange(start, end);\n            } else if (!AutoNumericHelper.isNull(element.firstChild)) {\n                var range = document.createRange();\n                range.setStart(element.firstChild, start);\n                range.setEnd(element.firstChild, end);\n                var selection = window.getSelection();\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        }\n\n        /**\n         * Function that throw error messages\n         *\n         * @param {string} message\n         * @throws\n         */\n\n    }, {\n        key: 'throwError',\n        value: function throwError(message) {\n            throw new Error(message);\n        }\n\n        /**\n         * Function that display a warning messages, according to the debug level.\n         *\n         * @param {string} message\n         * @param {boolean} showWarning If FALSE, then the warning message is not displayed\n         */\n\n    }, {\n        key: 'warning',\n        value: function warning(message) {\n            var showWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (showWarning) {\n                /* eslint no-console: 0 */\n                console.warn('Warning: ' + message);\n            }\n        }\n\n        /**\n         * Return `true` if the given event is a wheelup event\n         *\n         * @param {WheelEvent} wheelEvent\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isWheelUpEvent',\n        value: function isWheelUpEvent(wheelEvent) {\n            if (!wheelEvent.deltaY) {\n                this.throwError('The event passed as a parameter is not a wheel event, ' + wheelEvent.type + ' given.');\n            }\n\n            return wheelEvent.deltaY < 0;\n        }\n\n        /**\n         * Return `true` if the given event is a wheeldown event\n         *\n         * @param {WheelEvent} wheelEvent\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isWheelDownEvent',\n        value: function isWheelDownEvent(wheelEvent) {\n            if (!wheelEvent.deltaY) {\n                this.throwError('The event passed as a parameter is not a wheel event, ' + wheelEvent.type + ' given.');\n            }\n\n            return wheelEvent.deltaY > 0;\n        }\n\n        /**\n         * Return the 'nearest rounded' value, according to the given step size.\n         * @example roundToNearest(264789, 10000)) => 260000\n         *\n         * @param {number} value\n         * @param {number} stepPlace\n         * @returns {*}\n         */\n\n    }, {\n        key: 'roundToNearest',\n        value: function roundToNearest(value) {\n            var stepPlace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n\n            if (value <= 10 && value >= -10) {\n                return value;\n            }\n\n            if (0 === value) {\n                return 0;\n            }\n\n            return Math.round(value / stepPlace) * stepPlace;\n        }\n\n        /**\n         * Return the 'nearest rounded' value automatically by adding or subtracting the calculated offset to the initial value.\n         * This is done without having to pass a step to this function.\n         * @example                    Calculated offset\n         *           1 ->           1 (10)\n         *          14 ->          10 (10)\n         *         143 ->         140 (10)\n         *       1.278 ->       1.300 (100)\n         *      28.456 ->      28.500 (100)\n         *     276.345 ->     276.000 (1000)\n         *   4.534.061 ->   4.530.000 (10000)\n         *  66.723.844 ->  66.700.000 (100000)\n         * 257.833.411 -> 258.000.000 (1000000)\n         *\n         * @param {number} value\n         * @param {boolean} isAddition\n         * @returns {*}\n         */\n\n    }, {\n        key: 'modifyAndRoundToNearestAuto',\n        value: function modifyAndRoundToNearestAuto(value, isAddition) {\n            value = parseInt(value, 10);\n            var lengthValue = Math.abs(value).toString().length; // Math.abs is needed here to omit the negative sign '-' in case of a negative value\n\n            var pow = void 0;\n            switch (lengthValue) {\n                // Special cases for small numbers\n                case 1:\n                case 2:\n                case 3:\n                    pow = 1;\n                    break;\n                case 4:\n                case 5:\n                    pow = 2;\n                    break;\n                // Default behavior\n                default:\n                    pow = lengthValue - 3;\n            }\n            var offset = Math.pow(10, pow);\n\n            var result = void 0;\n            if (isAddition) {\n                result = value + offset;\n            } else {\n                result = value - offset;\n            }\n\n            return this.roundToNearest(result, Math.pow(10, pow));\n        }\n\n        /**\n         * Return the 'nearest rounded' value automatically by adding the calculated offset to the initial value.\n         *\n         * @param {number} value\n         * @returns {*}\n         */\n\n    }, {\n        key: 'addAndRoundToNearestAuto',\n        value: function addAndRoundToNearestAuto(value) {\n            return this.modifyAndRoundToNearestAuto(value, true);\n        }\n\n        /**\n         * Return the 'nearest rounded' value automatically by subtracting the calculated offset to the initial value.\n         *\n         * @param {number} value\n         * @returns {*}\n         */\n\n    }, {\n        key: 'subtractAndRoundToNearestAuto',\n        value: function subtractAndRoundToNearestAuto(value) {\n            return this.modifyAndRoundToNearestAuto(value, false);\n        }\n\n        /**\n         * Take an arabic number as a string and return a javascript number.\n         * By default, this function does not try to convert the arabic decimal and thousand separator characters.\n         * This returns `NaN` is the conversion is not possible.\n         * Based on http://stackoverflow.com/a/17025392/2834898\n         *\n         * @param {string} arabicNumbers\n         * @param {boolean} returnANumber If `true`, return a Number, otherwise return a String\n         * @param {boolean} parseDecimalCharacter\n         * @param {boolean} parseThousandSeparator\n         * @returns {string|number|NaN}\n         */\n\n    }, {\n        key: 'arabicToLatinNumbers',\n        value: function arabicToLatinNumbers(arabicNumbers) {\n            var returnANumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            var parseDecimalCharacter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            var parseThousandSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n            if (this.isNull(arabicNumbers)) {\n                return arabicNumbers;\n            }\n\n            var result = arabicNumbers.toString();\n            if (result === '') {\n                return arabicNumbers;\n            }\n\n            if (result.match(/[٠١٢٣٤٥٦٧٨٩۴۵۶]/g) === null) {\n                // If no Arabic/Persian numbers are found, return the numeric string or number directly\n                if (returnANumber) {\n                    result = Number(result);\n                }\n\n                return result;\n            }\n\n            if (parseDecimalCharacter) {\n                result = result.replace(/٫/, '.'); // Decimal character\n            }\n\n            if (parseThousandSeparator) {\n                result = result.replace(/٬/g, ''); // Thousand separator\n            }\n\n            // Replace the numbers only\n            result = result.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function (d) {\n                return d.charCodeAt(0) - 1632;\n            }) // Arabic numbers\n            .replace(/[۰۱۲۳۴۵۶۷۸۹]/g, function (d) {\n                return d.charCodeAt(0) - 1776;\n            }); // Persian numbers\n\n            // `NaN` has precedence over the string `'NaN'`\n            var resultAsNumber = Number(result);\n            if (isNaN(resultAsNumber)) {\n                return resultAsNumber;\n            }\n\n            if (returnANumber) {\n                result = resultAsNumber;\n            }\n\n            return result;\n        }\n\n        /**\n         * Create a custom event and immediately sent it from the given element.\n         * By default, if no element is given, the event is thrown from `document`.\n         *\n         * @param {string} eventName\n         * @param {HTMLElement|HTMLDocument} element\n         * @param {object} detail\n         */\n\n    }, {\n        key: 'triggerEvent',\n        value: function triggerEvent(eventName) {\n            var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n            var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n            var event = void 0;\n            if (window.CustomEvent) {\n                event = new CustomEvent(eventName, { detail: detail, bubbles: false, cancelable: false }); // This is not supported by default by IE ; We use the polyfill for IE9 and later.\n            } else {\n                event = document.createEvent('CustomEvent');\n                event.initCustomEvent(eventName, true, true, { detail: detail });\n            }\n\n            element.dispatchEvent(event);\n        }\n\n        /**\n         * Function to parse minimumValue, maximumValue & the input value to prepare for testing to determine if the value falls within the min / max range.\n         * Return an object example: minimumValue: \"999999999999999.99\" returns the following \"{s: -1, e: 12, c: Array[15]}\".\n         *\n         * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.\n         *\n         * @param {number|string} n A numeric value.\n         * @returns {{}}\n         */\n\n    }, {\n        key: 'parseStr',\n        value: function parseStr(n) {\n            var x = {}; // A Big number instance.\n            var e = void 0;\n            var i = void 0;\n            var nL = void 0;\n            var j = void 0;\n\n            // Minus zero?\n            if (n === 0 && 1 / n < 0) {\n                n = '-0';\n            }\n\n            // Determine sign. 1 positive, -1 negative\n            n = n.toString();\n            if (this.isNegativeStrict(n)) {\n                n = n.slice(1);\n                x.s = -1;\n            } else {\n                x.s = 1;\n            }\n\n            // Decimal point?\n            e = n.indexOf('.');\n            if (e > -1) {\n                n = n.replace('.', '');\n            }\n\n            // length of string if no decimal character\n            if (e < 0) {\n                // Integer\n                e = n.length;\n            }\n\n            // Determine leading zeros\n            i = n.search(/[1-9]/i) === -1 ? n.length : n.search(/[1-9]/i);\n            nL = n.length;\n            if (i === nL) {\n                // Zero\n                x.e = 0;\n                x.c = [0];\n            } else {\n                // Determine trailing zeros\n                for (j = nL - 1; n.charAt(j) === '0'; j -= 1) {\n                    nL -= 1;\n                }\n                nL -= 1;\n\n                // Decimal location\n                x.e = e - i - 1;\n                x.c = [];\n\n                // Convert string to array of digits without leading/trailing zeros\n                for (e = 0; i <= nL; i += 1) {\n                    x.c[e] = +n.charAt(i);\n                    e += 1;\n                }\n            }\n\n            return x;\n        }\n\n        /**\n         * Function to test if the input value falls with the Min / Max settings.\n         * This uses the parsed strings for the above parseStr function.\n         *\n         * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.\n         *\n         * @param {object} y Big number instance\n         * @param {object} x Big number instance\n         * @returns {*}\n         */\n\n    }, {\n        key: 'testMinMax',\n        value: function testMinMax(y, x) {\n            var xc = x.c;\n            var yc = y.c;\n            var i = x.s;\n            var j = y.s;\n            var k = x.e;\n            var l = y.e;\n\n            // Either zero?\n            if (!xc[0] || !yc[0]) {\n                var _result = void 0;\n                if (!xc[0]) {\n                    _result = !yc[0] ? 0 : -j;\n                } else {\n                    _result = i;\n                }\n                return _result;\n            }\n\n            // Signs differ?\n            if (i !== j) {\n                return i;\n            }\n            var xNeg = i < 0;\n\n            // Compare exponents\n            if (k !== l) {\n                return k > l ^ xNeg ? 1 : -1;\n            }\n            i = -1;\n            k = xc.length;\n            l = yc.length;\n            j = k < l ? k : l;\n\n            // Compare digit by digit\n            for (i += 1; i < j; i += 1) {\n                if (xc[i] !== yc[i]) {\n                    return xc[i] > yc[i] ^ xNeg ? 1 : -1;\n                }\n            }\n\n            // Compare lengths\n            var result = void 0;\n            if (k === l) {\n                result = 0;\n            } else {\n                result = k > l ^ xNeg ? 1 : -1;\n            }\n\n            return result;\n        }\n\n        /**\n         * Generate a random string.\n         * cf. http://stackoverflow.com/a/8084248/2834898\n         *\n         * @param {Number} strLength Length of the generated string (in character count)\n         * @returns {string}\n         */\n\n    }, {\n        key: 'randomString',\n        value: function randomString() {\n            var strLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n\n            return Math.random().toString(36).substr(2, strLength);\n        }\n\n        /**\n         * Retrieve the current element value.\n         *\n         * @param {HTMLElement|HTMLInputElement|EventTarget} element\n         * @returns {number|string|null}\n         */\n\n    }, {\n        key: 'getElementValue',\n        value: function getElementValue(element) {\n            if (element.tagName.toLowerCase() === 'input') {\n                return element.value;\n            }\n\n            return this.text(element);\n        }\n\n        /**\n         * Modify the element value directly.\n         *\n         * @param {HTMLElement|HTMLInputElement} element\n         * @param {number|string|null} value\n         */\n\n    }, {\n        key: 'setElementValue',\n        value: function setElementValue(element) {\n            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (element.tagName.toLowerCase() === 'input') {\n                element.value = value;\n            } else {\n                element.textContent = value;\n            }\n        }\n\n        /**\n         * This clone the given object, and return it.\n         * WARNING: This does not do a deep cloning.\n         * cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Examples\n         * //TODO Add a `deep` option to clone object with more than one depth\n         *\n         * @param {object} obj\n         * @returns {object}\n         */\n\n    }, {\n        key: 'cloneObject',\n        value: function cloneObject(obj) {\n            return _extends({}, obj);\n        }\n\n        /**\n         * Return a 'camelized' version of the given string.\n         * By default, this assume that :\n         * - the separators are hyphens '-',\n         * - the 'data-' string should be removed, and\n         * - that the very first word should not be capitalized.\n         *\n         * @example camelize('data-currency-symbol') => 'currencySymbol'\n         *\n         * @param {string} str Text to camelize\n         * @param {string} separator Character that separate each word\n         * @param {boolean} removeData If set to `true`, remove the `data-` part that you can find on some html attributes\n         * @param {boolean} skipFirstWord If set to `true`, do not capitalize the very first word\n         * @returns {string|null}\n         */\n\n    }, {\n        key: 'camelize',\n        value: function camelize(str) {\n            var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n            var removeData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n            var skipFirstWord = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n            if (this.isNull(str)) {\n                return null;\n            }\n\n            if (removeData) {\n                str = str.replace(/^data-/, '');\n            }\n\n            // Cut the string into words\n            var words = str.split(separator);\n\n            // Capitalize each word\n            var result = words.map(function (word) {\n                return '' + word.charAt(0).toUpperCase() + word.slice(1);\n            });\n\n            // Then concatenate them back\n            result = result.join('');\n\n            if (skipFirstWord) {\n                // Skip the very first letter\n                result = '' + result.charAt(0).toLowerCase() + result.slice(1);\n            }\n\n            return result;\n        }\n\n        /**\n         * Return the text component of the given DOM element.\n         *\n         * @param {Element} domElement\n         * @returns {string}\n         */\n\n    }, {\n        key: 'text',\n        value: function text(domElement) {\n            var nodeType = domElement.nodeType;\n\n            var result = void 0;\n            // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n            if (nodeType === Node.ELEMENT_NODE || nodeType === Node.DOCUMENT_NODE || nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n                result = domElement.textContent;\n            } else if (nodeType === Node.TEXT_NODE) {\n                result = domElement.nodeValue;\n            } else {\n                result = '';\n            }\n\n            return result;\n        }\n\n        /**\n         * Set the text content of the given DOM element.\n         * @param {Element} domElement\n         * @param {string} text\n         */\n\n    }, {\n        key: 'setText',\n        value: function setText(domElement, text) {\n            var nodeType = domElement.nodeType;\n            if (nodeType === Node.ELEMENT_NODE || nodeType === Node.DOCUMENT_NODE || nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n                domElement.textContent = text;\n            }\n            //TODO Display a warning if that function does not do anything?\n        }\n\n        /**\n         * Filter out the given `arr` array with the elements found in `excludedElements`.\n         * This returns a new array and does not modify the source.\n         * cf. verification here : http://codepen.io/AnotherLinuxUser/pen/XpvrMg?editors=0012\n         *\n         * @param {Array} arr\n         * @param {Array} excludedElements\n         * @returns {*|Array.<T>}\n         */\n\n    }, {\n        key: 'filterOut',\n        value: function filterOut(arr, excludedElements) {\n            var _this = this;\n\n            return arr.filter(function (element) {\n                return !_this.isInArray(element, excludedElements);\n            });\n        }\n\n        /**\n         * Remove the trailing zeros in the decimal part of a number.\n         *\n         * @param {string} numericString\n         * @returns {*}\n         */\n\n    }, {\n        key: 'trimPaddedZerosFromDecimalPlaces',\n        value: function trimPaddedZerosFromDecimalPlaces(numericString) {\n            numericString = String(numericString);\n            if (numericString === '') {\n                return '';\n            }\n\n            var _numericString$split = numericString.split('.'),\n                _numericString$split2 = _slicedToArray(_numericString$split, 2),\n                integerPart = _numericString$split2[0],\n                decimalPart = _numericString$split2[1];\n\n            if (this.isUndefinedOrNullOrEmpty(decimalPart)) {\n                return integerPart;\n            }\n\n            var trimmedDecimalPart = decimalPart.replace(/0+$/g, '');\n\n            var result = void 0;\n            if (trimmedDecimalPart === '') {\n                result = integerPart;\n            } else {\n                result = integerPart + '.' + trimmedDecimalPart;\n            }\n\n            return result;\n        }\n\n        /**\n         * Return the top-most hovered item by the mouse cursor.\n         *\n         * @returns {*}\n         */\n\n    }, {\n        key: 'getHoveredElement',\n        value: function getHoveredElement() {\n            var hoveredElements = [].concat(_toConsumableArray(document.querySelectorAll(':hover')));\n            return hoveredElements[hoveredElements.length - 1];\n        }\n\n        /**\n         * Return the given array trimmed to the given length.\n         * @example arrayTrim([1, 2, 3, 4], 2) -> [1, 2]\n         *\n         * @param {Array} array\n         * @param {Number} length\n         * @returns {*}\n         */\n\n    }, {\n        key: 'arrayTrim',\n        value: function arrayTrim(array, length) {\n            var arrLength = array.length;\n            if (arrLength === 0 || length > arrLength) {\n                // Also manage the case where `length` is higher than the current length\n                return array;\n            }\n\n            if (length < 0) {\n                return [];\n            }\n\n            array.length = parseInt(length, 10);\n\n            return array;\n        }\n\n        /**\n         * Merge all the given arrays by keeping only unique elements, and return an array with de-duplicated values.\n         * cf. http://stackoverflow.com/a/27664971/2834898\n         *\n         * @param {...array} arrays\n         * @returns {[*]}\n         */\n\n    }, {\n        key: 'arrayUnique',\n        value: function arrayUnique() {\n            var _ref;\n\n            //FIXME à tester\n            return [].concat(_toConsumableArray(new Set((_ref = []).concat.apply(_ref, arguments))));\n        }\n\n        /**\n         * Merge all the given Maps by keeping only unique elements, and return a new Map with de-duplicated keys.\n         *\n         * @param {...Map} mapObjects\n         * @returns {Map}\n         */\n\n    }, {\n        key: 'mergeMaps',\n        value: function mergeMaps() {\n            for (var _len = arguments.length, mapObjects = Array(_len), _key = 0; _key < _len; _key++) {\n                mapObjects[_key] = arguments[_key];\n            }\n\n            return new Map(mapObjects.reduce(function (as, b) {\n                return as.concat([].concat(_toConsumableArray(b)));\n            }, []));\n        }\n    }]);\n\n    return AutoNumericHelper;\n}();\n\nexports.default = AutoNumericHelper;\n}.call(window));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n'use strict';\n\nvar _AutoNumeric = __webpack_require__(1);\n\nvar _AutoNumeric2 = _interopRequireDefault(_AutoNumeric);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Options values enumeration\n */\n_AutoNumeric2.default.options = {\n    /* Allow padding the decimal places with zeros\n     * `true`   : always pad decimals with zeros\n     * `false`  : never pad with zeros\n     * `'floats'` : pad with zeros only when there are decimals\n     * Note: setting allowDecimalPadding to 'false' will override the 'decimalPlacesOverride' setting.\n     */\n    allowDecimalPadding: {\n        always: true,\n        never: false,\n        floats: 'floats'\n    },\n\n    /* Defines where should be positioned the caret on focus\n     * null : Do not enforce any caret positioning on focus (this is needed when using `selectOnFocus`)\n     * `'start'` : put the caret of the far left side of the value (excluding the positive/negative sign and currency symbol, if any)\n     * `'end'` : put the caret of the far right side of the value (excluding the positive/negative sign and currency symbol, if any)\n     * `'decimalLeft'` : put the caret of the left of the decimal character if any\n     * `'decimalRight'` : put the caret of the right of the decimal character if any\n     */\n    caretPositionOnFocus: {\n        start: 'start',\n        end: 'end',\n        decimalLeft: 'decimalLeft',\n        decimalRight: 'decimalRight',\n        doNoForceCaretPosition: null\n    },\n\n    /* Defines if a local list of AutoNumeric objects should be kept when initializing this object.\n     * This list is used by the `global.*` functions.\n     */\n    createLocalList: {\n        createList: true,\n        doNotCreateList: false\n    },\n\n    /* Defines the currency symbol string.\n     * It can be a string of more than one character (allowing for instance to use a space on either side of it, example: '$ ' or ' $')\n     * cf. https://en.wikipedia.org/wiki/Currency_symbol\n     */\n    currencySymbol: {\n        none: '',\n        currencySign: '¤',\n        austral: '₳', // ARA\n        australCentavo: '¢',\n        baht: '฿', // THB\n        cedi: '₵', // GHS\n        cent: '¢',\n        colon: '₡', // CRC\n        cruzeiro: '₢', // BRB - Not used anymore since 1993\n        dollar: '$',\n        dong: '₫', // VND\n        drachma: '₯', // GRD (or 'Δρχ.' or 'Δρ.')\n        dram: '​֏', // AMD\n        european: '₠', // XEU (old currency before the Euro)\n        euro: '€', // EUR\n        florin: 'ƒ',\n        franc: '₣', // FRF\n        guarani: '₲', // PYG\n        hryvnia: '₴', // грн\n        kip: '₭', // LAK\n        att: 'ອັດ', // cents of the Kip\n        lepton: 'Λ.', // cents of the Drachma\n        lira: '₺', // TRY\n        liraOld: '₤',\n        lari: '₾', // GEL\n        mark: 'ℳ',\n        mill: '₥',\n        naira: '₦', // NGN\n        peseta: '₧',\n        peso: '₱', // PHP\n        pfennig: '₰', // cents of the Mark\n        pound: '£',\n        real: 'R$', // Brazilian real\n        riel: '៛', // KHR\n        ruble: '₽', // RUB\n        rupee: '₹', // INR\n        rupeeOld: '₨',\n        shekel: '₪',\n        shekelAlt: 'ש״ח‎‎',\n        taka: '৳', // BDT\n        tenge: '₸', // KZT\n        togrog: '₮', // MNT\n        won: '₩',\n        yen: '¥'\n    },\n\n    /* Defines where the currency symbol should be placed (before of after the numbers)\n     * for prefix currencySymbolPlacement: \"p\" (default)\n     * for suffix currencySymbolPlacement: \"s\"\n     */\n    currencySymbolPlacement: {\n        prefix: 'p',\n        suffix: 's'\n    },\n\n    /* Defines what decimal separator character is used\n     */\n    decimalCharacter: {\n        comma: ',',\n        dot: '.',\n        middleDot: '·',\n        arabicDecimalSeparator: '٫',\n        decimalSeparatorKeySymbol: '⎖'\n    },\n\n    /* Allow to declare an alternative decimal separator which is automatically replaced by `decimalCharacter` when typed.\n     * This is used by countries that use a comma \",\" as the decimal character and have keyboards\\numeric pads that have\n     * a period 'full stop' as the decimal character (France or Spain for instance).\n     */\n    decimalCharacterAlternative: {\n        none: null,\n        comma: ',',\n        dot: '.'\n    },\n\n    /* Defines the maximum number of decimal places to show and keep as the precision.\n     * This is used to override the decimal places number set by the minimumValue & maximumValue values.\n     */\n    decimalPlacesOverride: {\n        doNotOverride: null\n    },\n\n    /* Defines how many decimal places should be visible when the element has the focus\n     * Example:\n     * Fon instance if `decimalPlacesShownOnFocus` is set to `5` and the default number of decimal places is `2`, then on focus `1,000.12345` will be shown, while without focus `1,000.12` will be set back.\n     * Note 1: the results depends on the rounding method used.\n     * Note 2: the `getNumericString()` method returns the extended decimal places\n     */\n    decimalPlacesShownOnFocus: {\n        useDefault: null\n    },\n\n    /* Helper option for ASP.NET postback\n     * This should be set as the value of the unformatted default value\n     * examples:\n     * no default value=\"\" {defaultValueOverride: \"\"}\n     * value=1234.56 {defaultValueOverride: '1234.56'}\n     */\n    defaultValueOverride: {\n        doNotOverride: null\n    },\n\n    /* Defines how many numbers should be grouped together (usually for the thousand separator)\n     * - \"2\",  results in 99,99,99,999 India's lakhs\n     * - \"2s\", results in 99,999,99,99,999 India's lakhs scaled\n     * - \"3\",  results in 999,999,999 (default)\n     * - \"4\",  results in 9999,9999,9999 used in some Asian countries\n     */\n    digitalGroupSpacing: {\n        two: '2',\n        twoScaled: '2s',\n        three: '3',\n        four: '4'\n    },\n\n    /* Defines the thousand grouping separator character\n     * Example : If `'.'` is set, then you'll get `'1.234.567'`\n     */\n    digitGroupSeparator: {\n        comma: ',',\n        dot: '.',\n        normalSpace: ' ',\n        thinSpace: '\\u2009',\n        narrowNoBreakSpace: '\\u202F',\n        noBreakSpace: '\\xA0',\n        noSeparator: '',\n        apostrophe: '\\'',\n        arabicThousandsSeparator: '٬',\n        dotAbove: '˙'\n    },\n\n    /* Defines what should be displayed in the element if the raw value is an empty string ('').\n     * - 'focus'  : The currency sign is displayed when the input receives focus (default)\n     * - 'press'  : The currency sign is displayed whenever a key is being pressed\n     * - 'always' : The currency sign is always displayed\n     * - 'zero'   : A zero is displayed ('rounded' with or without a currency sign) if the input has no value on focus out\n     */\n    emptyInputBehavior: {\n        focus: 'focus',\n        press: 'press',\n        always: 'always',\n        zero: 'zero'\n    },\n\n    /* This option is the 'strict mode' (aka 'debug' mode), which allows autoNumeric to strictly analyse the options passed, and fails if an unknown options is used in the settings object.\n     * You should set that to `true` if you want to make sure you are only using 'pure' autoNumeric settings objects in your code.\n     * If you see uncaught errors in the console and your code starts to fail, this means somehow those options gets polluted by another program (which usually happens when using frameworks).\n     */\n    failOnUnknownOption: {\n        fail: true,\n        ignore: false\n    },\n\n    /* Determine if the default value will be formatted on initialization.\n     */\n    formatOnPageLoad: {\n        format: true, // automatically formats the default value on initialization\n        doNotFormat: false },\n\n    /* Set the undo/redo history table size.\n     * Each record keeps the raw value as well and the last known caret/selection positions.\n     */\n    historySize: {\n        verySmall: 5,\n        small: 10,\n        medium: 20,\n        large: 50,\n        veryLarge: 100,\n        insane: Number.MAX_SAFE_INTEGER\n    },\n\n    /* Allow the user to 'cancel' and undo the changes he made to the given autonumeric-managed element, by pressing the 'Escape' key.\n     * Whenever the user 'validate' the input (either by hitting 'Enter', or blurring the element), the new value is saved for subsequent 'cancellation'.\n     *\n     * The process :\n     *   - save the input value on focus\n     *   - if the user change the input value, and hit `Escape`, then the initial value saved on focus is set back\n     *   - on the other hand if the user either have used `Enter` to validate (`Enter` throws a change event) his entries, or if the input value has been changed by another script in the mean time, then we save the new input value\n     *   - on a successful 'cancel', select the whole value (while respecting the `selectNumberOnly` option)\n     *   - bonus; if the value has not changed, hitting 'Esc' just select all the input value (while respecting the `selectNumberOnly` option)\n     */\n    isCancellable: {\n        cancellable: true,\n        notCancellable: false\n    },\n\n    /* Controls the leading zero behavior\n     * - 'allow' : allows leading zeros to be entered. Zeros will be truncated when entering additional digits. On focusout zeros will be deleted\n     * - 'deny'  : allows only one leading zero on values that are between 1 and -1\n     * - 'keep'  : allows leading zeros to be entered. on focusout zeros will be retained\n     */\n    leadingZero: {\n        allow: 'allow',\n        deny: 'deny',\n        keep: 'keep'\n    },\n\n    /* Defines the maximum possible value a user can enter.\n     * Notes:\n     * - this value must a string and use the period for the decimal point\n     * - this value needs to be larger than `minimumValue`\n     */\n    maximumValue: {\n        tenTrillions: '9999999999999.99', // 9.999.999.999.999,99 ~= 10000 billions\n        tenTrillionsNoDecimals: '9999999999999',\n        oneBillion: '999999999.99',\n        zero: '0'\n    },\n\n    /* Defines the minimum possible value a user can enter.\n     * Notes:\n     * - this value must a string and use the period for the decimal point\n     * - this value needs to be smaller than `maximumValue`\n     * - if this is superior to 0, then you'll effectively prevent your user to entirely delete the content of your element\n     */\n    minimumValue: {\n        tenTrillions: '-9999999999999.99', // -9.999.999.999.999,99 ~= 10000 billions\n        tenTrillionsNoDecimals: '-9999999999999',\n        oneBillion: '-999999999.99',\n        zero: '0'\n    },\n\n    /* Allow the user to increment or decrement the element value with the mouse wheel.\n     * The wheel behavior can by modified by the `wheelStep` option.\n     * This `wheelStep` options can be used in two ways, either by setting :\n     * - a 'fixed' step value (`wheelStep : 1000`), or\n     * - the 'progressive' string (`wheelStep : 'progressive'`), which will then activate a special mode where the step is automatically calculated based on the element value size.\n     *\n     * Note :\n     * A special behavior is applied in order to avoid preventing the user to scroll the page if the inputs are covering the whole available space.\n     * You can use the 'Shift' modifier key while using the mouse wheel in order to temporarily disable the increment/decrement feature (useful on small screen where some badly configured inputs could use all the available space).\n     */\n    modifyValueOnWheel: {\n        modifyValue: true,\n        doNothing: false\n    },\n\n    /* Adds brackets on negative values (ie. transforms '-$ 999.99' to '(999.99)')\n     * Those brackets are visible only when the field does NOT have the focus.\n     * The left and right symbols should be enclosed in quotes and separated by a comma.\n     */\n    negativeBracketsTypeOnBlur: {\n        parentheses: '(,)',\n        brackets: '[,]',\n        chevrons: '<,>',\n        curlyBraces: '{,}',\n        angleBrackets: '〈,〉',\n        japaneseQuotationMarks: '｢,｣',\n        halfBrackets: '⸤,⸥',\n        whiteSquareBrackets: '⟦,⟧',\n        quotationMarks: '‹,›',\n        guillemets: '«,»',\n        none: null },\n\n    /* Placement of the negative/positive sign relative to the `currencySymbol` option.\n     *\n     * Example:\n     * -1,234.56  => default no options required\n     * -$1,234.56 => {currencySymbol: \"$\"} or {currencySymbol: \"$\", negativePositiveSignPlacement: \"l\"}\n     * $-1,234.56 => {currencySymbol: \"$\", negativePositiveSignPlacement: \"r\"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty\n     * -1,234.56$ => {currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"p\"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty\n     * 1,234.56-  => {negativePositiveSignPlacement: \"s\"}\n     * $1,234.56- => {currencySymbol: \"$\", negativePositiveSignPlacement: \"s\"}\n     * 1,234.56-$ => {currencySymbol: \"$\", currencySymbolPlacement: \"s\"}\n     * 1,234.56$- => {currencySymbol: \"$\", currencySymbolPlacement: \"s\", negativePositiveSignPlacement: \"r\"}\n     */\n    negativePositiveSignPlacement: {\n        prefix: 'p',\n        suffix: 's',\n        left: 'l',\n        right: 'r',\n        none: null\n    },\n\n    /* Defines if the element should have event listeners activated on it.\n     * By default, those event listeners are only added to <input> elements and html element with the `contenteditable` attribute set to `true`, but not on the other html tags.\n     * This allows to initialize elements without any event listeners.\n     * Warning: Since AutoNumeric will not check the input content after its initialization, using some autoNumeric methods will probably leads to formatting problems.\n     */\n    noEventListeners: {\n        noEvents: true,\n        addEvents: false\n    },\n\n    /* Defines if the element value should be converted to the raw value on focus (and back to the formatted on blur).\n     * If set to `true`, then autoNumeric remove the thousand separator, currency symbol and suffix on focus.\n     * Example:\n     * If the input value is '$ 1,999.88 suffix', on focus it becomes '1999.88' and back to '$ 1,999.88 suffix' on focus out.\n     */\n    //TODO Rename this option to `rawValueOnFocus`\n    noSeparatorOnFocus: {\n        noSeparator: true,\n        withSeparator: false\n    },\n\n    /* Manage how autoNumeric react when the user tries to paste an invalid number.\n     * - 'error'    : (This is the default behavior) The input value is not changed and an error is output in the console.\n     * - 'ignore'   : idem than 'error', but fail silently without outputting any error/warning in the console.\n     * - 'clamp'    : if the pasted value is either too small or too big regarding the minimumValue and maximumValue range, then the result is clamped to those limits.\n     * - 'truncate' : autoNumeric will insert as many pasted numbers it can at the initial caret/selection, until everything is pasted, or the range limit is hit.\n     *                The non-pasted numbers are dropped and therefore not used at all.\n     * - 'replace'  : autoNumeric will first insert as many pasted numbers it can at the initial caret/selection, then if the range limit is hit, it will try\n     *                to replace one by one the remaining initial numbers (on the right side of the caret) with the rest of the pasted numbers.\n     *\n     * Note 1 : A paste content starting with a negative sign '-' will be accepted anywhere in the input, and will set the resulting value as a negative number\n     * Note 2 : A paste content starting with a number will be accepted, even if the rest is gibberish (ie. '123foobar456').\n     *          Only the first number will be used (here '123').\n     * Note 3 : The paste event works with the `decimalPlacesShownOnFocus` option too.\n     */\n    onInvalidPaste: {\n        error: 'error',\n        ignore: 'ignore',\n        clamp: 'clamp',\n        truncate: 'truncate',\n        replace: 'replace'\n    },\n\n    /* Defines how the value should be formatted when wanting a 'localized' version of it.\n     * - null or 'string' => 'nnnn.nn' or '-nnnn.nn' as text type. This is the default behavior.\n     * - 'number'         => nnnn.nn or -nnnn.nn as a Number (Warning: this works only for integers inferior to Number.MAX_SAFE_INTEGER)\n     * - ',' or '-,'      => 'nnnn,nn' or '-nnnn,nn'\n     * - '.-'             => 'nnnn.nn' or 'nnnn.nn-'\n     * - ',-'             => 'nnnn,nn' or 'nnnn,nn-'\n     */\n    outputFormat: {\n        string: 'string',\n        number: 'number',\n        dot: '.',\n        negativeDot: '-.',\n        comma: ',',\n        negativeComma: '-,',\n        dotNegative: '.-',\n        commaNegative: ',-',\n        none: null\n    },\n\n    /* Override the minimum and maximum limits\n     * overrideMinMaxLimits: \"ceiling\" adheres to maximumValue and ignores minimumValue settings\n     * overrideMinMaxLimits: \"floor\" adheres to minimumValue and ignores maximumValue settings\n     * overrideMinMaxLimits: \"ignore\" ignores both minimumValue & maximumValue\n     */\n    overrideMinMaxLimits: {\n        ceiling: 'ceiling',\n        floor: 'floor',\n        ignore: 'ignore',\n        doNotOverride: null\n    },\n\n    /* Defines if the <input> element should be set as read only on initialization.\n     * When set to `true`, then the `readonly` html property is added to the <input> element on initialization.\n     */\n    readOnly: {\n        readOnly: true,\n        readWrite: false\n    },\n\n    /* Defines the rounding method to use.\n     * roundingMethod: \"S\", Round-Half-Up Symmetric (default)\n     * roundingMethod: \"A\", Round-Half-Up Asymmetric\n     * roundingMethod: \"s\", Round-Half-Down Symmetric (lower case s)\n     * roundingMethod: \"a\", Round-Half-Down Asymmetric (lower case a)\n     * roundingMethod: \"B\", Round-Half-Even \"Bankers Rounding\"\n     * roundingMethod: \"U\", Round Up \"Round-Away-From-Zero\"\n     * roundingMethod: \"D\", Round Down \"Round-Toward-Zero\" - same as truncate\n     * roundingMethod: \"C\", Round to Ceiling \"Toward Positive Infinity\"\n     * roundingMethod: \"F\", Round to Floor \"Toward Negative Infinity\"\n     * roundingMethod: \"N05\" Rounds to the nearest .05 => same as \"CHF\" used in 1.9X and still valid\n     * roundingMethod: \"U05\" Rounds up to next .05\n     * roundingMethod: \"D05\" Rounds down to next .05\n     */\n    roundingMethod: {\n        halfUpSymmetric: 'S',\n        halfUpAsymmetric: 'A',\n        halfDownSymmetric: 's',\n        halfDownAsymmetric: 'a',\n        halfEvenBankersRounding: 'B',\n        upRoundAwayFromZero: 'U',\n        downRoundTowardZero: 'D',\n        toCeilingTowardPositiveInfinity: 'C',\n        toFloorTowardNegativeInfinity: 'F',\n        toNearest05: 'N05',\n        toNearest05Alt: 'CHF',\n        upToNext05: 'U05',\n        downToNext05: 'D05'\n    },\n\n    /* Set to `true` to allow the `decimalPlacesShownOnFocus` value to be saved with sessionStorage\n     * If IE 6 or 7 is detected, the value will be saved as a session cookie.\n     */\n    saveValueToSessionStorage: {\n        save: true,\n        doNotSave: false\n    },\n\n    /* The next three options (scaleDivisor, scaleDecimalPlaces & scaleSymbol) handle scaling of the input when the input does not have focus\n     * Please note that the non-scaled value is held in data and it is advised that you use the \"saveValueToSessionStorage\" option to ensure retaining the value\n     * [\"divisor\", \"decimal places\", \"symbol\"]\n     * Example: with the following options set {scaleDivisor: '1000', scaleDecimalPlaces: '1', scaleSymbol: ' K'}\n     * Example: focusin value \"1,111.11\" focusout value \"1.1 K\"\n     */\n\n    /* The `scaleDecimalPlaces` option is the number of decimal place when not in focus - for this to work, `scaledDivisor` must not be `null`.\n     * This is optional ; if omitted the decimal places will be the same when the input has the focus.\n     */\n    scaleDecimalPlaces: {\n        doNotChangeDecimalPlaces: null\n    },\n\n    /* The `scaleDivisor` decides the on focus value and places the result in the input on focusout\n     * Example {scaleDivisor: '1000'} or <input data-scale-divisor=\"1000\">\n     * The divisor value - does not need to be whole number but please understand that Javascript has limited accuracy in math\n     * The \"get\" method returns the full value, including the 'hidden' decimals.\n     */\n    scaleDivisor: {\n        doNotActivateTheScalingOption: null,\n        percentage: 100,\n        permille: 1000,\n        basisPoint: 10000\n    },\n\n    /* The `scaleSymbol` option is a symbol placed as a suffix when not in focus.\n     * This is optional too.\n     */\n    scaleSymbol: {\n        none: null,\n        percentage: '%',\n        permille: '‰',\n        basisPoint: '‱'\n    },\n\n    /* Determine if the select all keyboard command will select the complete input text, or only the input numeric value\n     * Note : If the currency symbol is between the numeric value and the negative sign, only the numeric value will be selected\n     */\n    selectNumberOnly: {\n        selectNumbersOnly: true,\n        selectAll: false\n    },\n\n    /* Defines if the element value should be selected on focus.\n     * Note: The selection is done using the `selectNumberOnly` option.\n     */\n    selectOnFocus: {\n        select: true,\n        doNotSelect: false\n    },\n\n    /* Defines how the serialize functions should treat the spaces.\n     * Those spaces ' ' can either be converted to the plus sign '+', which is the default, or to '%20'.\n     * Both values being valid per the spec (http://www.w3.org/Addressing/URL/uri-spec.html).\n     * Also see the summed up answer on http://stackoverflow.com/a/33939287.\n     *\n     * tl;dr : Spaces should be converted to '%20' before the '?' sign, then converted to '+' after.\n     * In our case since we serialize the query, we use '+' as the default (but allow the user to get back the old *wrong* behavior).\n     */\n    serializeSpaces: {\n        plus: '+',\n        percent: '%20'\n    },\n\n    /* Allow the positive sign symbol `+` to be displayed for positive numbers.\n     * By default, this positive sign is not shown.\n     * The sign placement is controlled by the 'negativePositiveSignPlacement' option, mimicking the negative sign placement rules.\n     */\n    showPositiveSign: {\n        show: true,\n        hide: false\n    },\n\n    /* Defines if warnings should be shown in the console\n     * Those warnings can be ignored, but are usually printed when something could be improved by the user (ie. option conflicts).\n     */\n    showWarnings: {\n        show: true, // All warning are shown\n        hide: false },\n\n    /* Defines the rules that calculate the CSS class(es) to apply on the element, based on the raw unformatted value.\n     * This can also be used to call callbacks whenever the `rawValue` is updated.\n     * Important: all callbacks must return `null` if no ranges/userDefined classes are selected\n     * @example\n     * {\n     *     positive   : 'autoNumeric-positive', // Or `null` to not use it\n     *     negative   : 'autoNumeric-negative',\n     *     ranges     : [\n     *         { min: 0, max: 25, class: 'autoNumeric-red' },\n     *         { min: 25, max: 50, class: 'autoNumeric-orange' },\n     *         { min: 50, max: 75, class: 'autoNumeric-yellow' },\n     *         { min: 75, max: Number.MAX_SAFE_INTEGER, class: 'autoNumeric-green' },\n     *     ],\n     *     userDefined: [\n     *         // If 'classes' is a string, set it if `true`, remove it if `false`\n     *         { callback: rawValue => { return true; }, classes: 'thisIsTrue' },\n     *         // If 'classes' is an array with only 2 elements, set the first class if `true`, the second if `false`\n     *         { callback: rawValue => rawValue % 2 === 0, classes: ['autoNumeric-even', 'autoNumeric-odd'] },\n     *         // Return only one index to use on the `classes` array (here, 'class3')\n     *         { callback: rawValue => { return 2; }, classes: ['class1', 'class2', 'class3'] },\n     *         // Return an array of indexes to use on the `classes` array (here, 'class1' and 'class3')\n     *         { callback: rawValue => { return [0, 2]; }, classes: ['class1', 'class2', 'class3'] },\n     *         // If 'classes' is `undefined` or `null`, then the callback is called with the AutoNumeric object passed as a parameter\n     *         { callback: anElement => { return anElement.getFormatted(); } },\n     *     ],\n     * }\n     */\n    styleRules: {\n        none: null,\n        positiveNegative: {\n            positive: 'autoNumeric-positive',\n            negative: 'autoNumeric-negative'\n        },\n        range0To100With4Steps: {\n            ranges: [{ min: 0, max: 25, class: 'autoNumeric-red' }, { min: 25, max: 50, class: 'autoNumeric-orange' }, { min: 50, max: 75, class: 'autoNumeric-yellow' }, { min: 75, max: 100, class: 'autoNumeric-green' }]\n        },\n        evenOdd: {\n            userDefined: [{ callback: function callback(rawValue) {\n                    return rawValue % 2 === 0;\n                }, classes: ['autoNumeric-even', 'autoNumeric-odd'] }]\n        },\n        rangeSmallAndZero: {\n            userDefined: [{\n                callback: function callback(rawValue) {\n                    if (rawValue >= -1 && rawValue < 0) {\n                        return 0;\n                    }\n                    if (Number(rawValue) === 0) {\n                        return 1;\n                    }\n                    if (rawValue > 0 && rawValue <= 1) {\n                        return 2;\n                    }\n\n                    return null; // In case the rawValue is outside those ranges\n                }, classes: ['autoNumeric-small-negative', 'autoNumeric-zero', 'autoNumeric-small-positive']\n            }]\n        }\n    },\n\n    /* Add a text on the right hand side of the element value.\n     * This suffix text can have any characters in its string, except numeric characters and the negative/positive sign.\n     * Example: ' dollars'\n     */\n    suffixText: {\n        none: '',\n        percentage: '%',\n        permille: '‰',\n        basisPoint: '‱'\n    },\n\n    /* Defines if the element value should be unformatted when the user hover his mouse over it while holding the `Alt` key.\n     * We reformat back before anything else if :\n     * - the user focus on the element by tabbing or clicking into it,\n     * - the user releases the `Alt` key, and\n     * - if we detect a mouseleave event.\n     *\n     * We unformat again if :\n     * - while the mouse is over the element, the user hit ctrl again\n     */\n    unformatOnHover: {\n        unformat: true,\n        doNotUnformat: false\n    },\n\n    /* Removes the formatting and use the raw value in each autoNumeric elements of the parent form element, on the form `submit` event.\n     * The output format is a numeric string (nnnn.nn or -nnnn.nn).\n     */\n    unformatOnSubmit: {\n        unformat: true,\n        keepCurrentValue: false\n    },\n\n    /* That option is linked to the `modifyValueOnWheel` one and will only be used if the latter is set to `true`.\n     * This option will modify the wheel behavior and can be used in two ways, either by setting :\n     * - a 'fixed' step value (a positive float or integer number `1000`), or\n     * - the `'progressive'` string.\n     *\n     * The 'fixed' mode always increment/decrement the element value by that amount, while respecting the `minimumValue` and `maximumValue` settings.\n     * The 'progressive' mode will increment/decrement the element value based on its current value. The bigger the number, the bigger the step, and vice versa.\n     */\n    wheelStep: {\n        progressive: 'progressive'\n    }\n}; /**\n    * Options for autoNumeric.js\n    * @author Alexandre Bonneau <alexandre.bonneau@linuxfr.eu>\n    * @copyright © 2016 Alexandre Bonneau\n    *\n    * The MIT License (http://www.opensource.org/licenses/mit-license.php)\n    *\n    * Permission is hereby granted, free of charge, to any person\n    * obtaining a copy of this software and associated documentation\n    * files (the \"Software\"), to deal in the Software without\n    * restriction, including without limitation the rights to use,\n    * copy, modify, merge, publish, distribute, sub license, and/or sell\n    * copies of the Software, and to permit persons to whom the\n    * Software is furnished to do so, subject to the following\n    * conditions:\n    *\n    * The above copyright notice and this permission notice shall be\n    * included in all copies or substantial portions of the Software.\n    *\n    * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    * OTHER DEALINGS IN THE SOFTWARE.\n    */\n}.call(window));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n'use strict';\n\nvar _AutoNumeric = __webpack_require__(1);\n\nvar _AutoNumeric2 = _interopRequireDefault(_AutoNumeric);\n\nvar _AutoNumericOptions = __webpack_require__(4);\n\nvar _AutoNumericOptions2 = _interopRequireDefault(_AutoNumericOptions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint no-unused-vars: 0 */\n\n/**\n * The defaults options.\n * These can be overridden by the following methods:\n * - HTML5 data attributes (ie. `<input type=\"text\" data-currency-symbol=\" €\">`)\n * - Options passed to the `update` method (ie. `anElement.update({ currencySymbol: ' €' });`), or simply during the initialization (ie. `new AutoNumeric(domElement, {options});`)\n */\n/**\n * Default settings for autoNumeric.js\n * @author Alexandre Bonneau <alexandre.bonneau@linuxfr.eu>\n * @copyright © 2016 Alexandre Bonneau\n *\n * The MIT License (http://www.opensource.org/licenses/mit-license.php)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sub license, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n_AutoNumeric2.default.defaultSettings = {\n  allowDecimalPadding: _AutoNumeric2.default.options.allowDecimalPadding.always,\n  caretPositionOnFocus: _AutoNumeric2.default.options.caretPositionOnFocus.doNoForceCaretPosition,\n  createLocalList: _AutoNumeric2.default.options.createLocalList.createList,\n  currencySymbol: _AutoNumeric2.default.options.currencySymbol.none,\n  currencySymbolPlacement: _AutoNumeric2.default.options.currencySymbolPlacement.prefix,\n  decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot,\n  decimalCharacterAlternative: _AutoNumeric2.default.options.decimalCharacterAlternative.none,\n  decimalPlacesOverride: _AutoNumeric2.default.options.decimalPlacesOverride.doNotOverride,\n  decimalPlacesShownOnFocus: _AutoNumeric2.default.options.decimalPlacesShownOnFocus.useDefault,\n  defaultValueOverride: _AutoNumeric2.default.options.defaultValueOverride.doNotOverride,\n  digitalGroupSpacing: _AutoNumeric2.default.options.digitalGroupSpacing.three,\n  digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.comma,\n  emptyInputBehavior: _AutoNumeric2.default.options.emptyInputBehavior.focus,\n  failOnUnknownOption: _AutoNumeric2.default.options.failOnUnknownOption.ignore,\n  formatOnPageLoad: _AutoNumeric2.default.options.formatOnPageLoad.format,\n  historySize: _AutoNumeric2.default.options.historySize.medium,\n  isCancellable: _AutoNumeric2.default.options.isCancellable.cancellable,\n  leadingZero: _AutoNumeric2.default.options.leadingZero.deny,\n  maximumValue: _AutoNumeric2.default.options.maximumValue.tenTrillions,\n  minimumValue: _AutoNumeric2.default.options.minimumValue.tenTrillions,\n  modifyValueOnWheel: _AutoNumeric2.default.options.modifyValueOnWheel.modifyValue,\n  negativeBracketsTypeOnBlur: _AutoNumeric2.default.options.negativeBracketsTypeOnBlur.none,\n  negativePositiveSignPlacement: _AutoNumeric2.default.options.negativePositiveSignPlacement.none,\n  noEventListeners: _AutoNumeric2.default.options.noEventListeners.addEvents,\n  noSeparatorOnFocus: _AutoNumeric2.default.options.noSeparatorOnFocus.withSeparator,\n  //TODO Shouldn't we use `truncate` as the default value?\n  onInvalidPaste: _AutoNumeric2.default.options.onInvalidPaste.error,\n  outputFormat: _AutoNumeric2.default.options.outputFormat.none,\n  overrideMinMaxLimits: _AutoNumeric2.default.options.overrideMinMaxLimits.doNotOverride,\n  readOnly: _AutoNumeric2.default.options.readOnly.readWrite,\n  roundingMethod: _AutoNumeric2.default.options.roundingMethod.halfUpSymmetric,\n  saveValueToSessionStorage: _AutoNumeric2.default.options.saveValueToSessionStorage.doNotSave,\n  scaleDecimalPlaces: _AutoNumeric2.default.options.scaleDecimalPlaces.doNotChangeDecimalPlaces,\n  scaleDivisor: _AutoNumeric2.default.options.scaleDivisor.doNotActivateTheScalingOption,\n  scaleSymbol: _AutoNumeric2.default.options.scaleSymbol.none,\n  selectNumberOnly: _AutoNumeric2.default.options.selectNumberOnly.selectNumbersOnly,\n  selectOnFocus: _AutoNumeric2.default.options.selectOnFocus.select,\n  serializeSpaces: _AutoNumeric2.default.options.serializeSpaces.plus,\n  showPositiveSign: _AutoNumeric2.default.options.showPositiveSign.hide,\n  showWarnings: _AutoNumeric2.default.options.showWarnings.show,\n  styleRules: _AutoNumeric2.default.options.styleRules.none,\n  suffixText: _AutoNumeric2.default.options.suffixText.none,\n  unformatOnHover: _AutoNumeric2.default.options.unformatOnHover.unformat,\n  unformatOnSubmit: _AutoNumeric2.default.options.unformatOnSubmit.keepCurrentValue,\n  wheelStep: _AutoNumeric2.default.options.wheelStep.progressive\n};\n}.call(window));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n'use strict';\n\nvar _AutoNumeric = __webpack_require__(1);\n\nvar _AutoNumeric2 = _interopRequireDefault(_AutoNumeric);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Event list managed by AutoNumeric\n *\n * @type {{formatted: string, minRangeExceeded: string, maxRangeExceeded: string, native: {input: string, change: string}}}\n */\n_AutoNumeric2.default.events = {\n  formatted: 'autoNumeric:formatted',\n  minRangeExceeded: 'autoNumeric:minExceeded',\n  maxRangeExceeded: 'autoNumeric:maxExceeded',\n  native: {\n    input: 'input',\n    change: 'change'\n  }\n}; /**\n    * Options for autoNumeric.js\n    * @author Alexandre Bonneau <alexandre.bonneau@linuxfr.eu>\n    * @copyright © 2016 Alexandre Bonneau\n    *\n    * The MIT License (http://www.opensource.org/licenses/mit-license.php)\n    *\n    * Permission is hereby granted, free of charge, to any person\n    * obtaining a copy of this software and associated documentation\n    * files (the \"Software\"), to deal in the Software without\n    * restriction, including without limitation the rights to use,\n    * copy, modify, merge, publish, distribute, sub license, and/or sell\n    * copies of the Software, and to permit persons to whom the\n    * Software is furnished to do so, subject to the following\n    * conditions:\n    *\n    * The above copyright notice and this permission notice shall be\n    * included in all copies or substantial portions of the Software.\n    *\n    * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    * OTHER DEALINGS IN THE SOFTWARE.\n    */\n}.call(window));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXV0b051bWVyaWNFdmVudHMuanM/N2JkMyJdLCJuYW1lcyI6WyJldmVudHMiLCJmb3JtYXR0ZWQiLCJtaW5SYW5nZUV4Y2VlZGVkIiwibWF4UmFuZ2VFeGNlZWRlZCIsIm5hdGl2ZSIsImlucHV0IiwiY2hhbmdlIl0sIm1hcHBpbmdzIjoiOzs7OztBQTZCQTs7Ozs7O0FBRUE7Ozs7O0FBS0Esc0JBQVlBLE1BQVosR0FBcUI7QUFDakJDLGFBQWtCLHVCQUREO0FBRWpCQyxvQkFBa0IseUJBRkQ7QUFHakJDLG9CQUFrQix5QkFIRDtBQUlqQkMsVUFBa0I7QUFDZEMsV0FBUSxPQURNO0FBRWRDLFlBQVE7QUFGTTtBQUpELENBQXJCLEMsQ0FwQ0EiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT3B0aW9ucyBmb3IgYXV0b051bWVyaWMuanNcbiAqIEBhdXRob3IgQWxleGFuZHJlIEJvbm5lYXUgPGFsZXhhbmRyZS5ib25uZWF1QGxpbnV4ZnIuZXU+XG4gKiBAY29weXJpZ2h0IMKpIDIwMTYgQWxleGFuZHJlIEJvbm5lYXVcbiAqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0XG4gKiByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSxcbiAqIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YiBsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlXG4gKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFU1xuICogT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4gKiBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuICogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUlxuICogT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCBBdXRvTnVtZXJpYyBmcm9tICcuL0F1dG9OdW1lcmljJztcblxuLyoqXG4gKiBFdmVudCBsaXN0IG1hbmFnZWQgYnkgQXV0b051bWVyaWNcbiAqXG4gKiBAdHlwZSB7e2Zvcm1hdHRlZDogc3RyaW5nLCBtaW5SYW5nZUV4Y2VlZGVkOiBzdHJpbmcsIG1heFJhbmdlRXhjZWVkZWQ6IHN0cmluZywgbmF0aXZlOiB7aW5wdXQ6IHN0cmluZywgY2hhbmdlOiBzdHJpbmd9fX1cbiAqL1xuQXV0b051bWVyaWMuZXZlbnRzID0ge1xuICAgIGZvcm1hdHRlZCAgICAgICA6ICdhdXRvTnVtZXJpYzpmb3JtYXR0ZWQnLFxuICAgIG1pblJhbmdlRXhjZWVkZWQ6ICdhdXRvTnVtZXJpYzptaW5FeGNlZWRlZCcsXG4gICAgbWF4UmFuZ2VFeGNlZWRlZDogJ2F1dG9OdW1lcmljOm1heEV4Y2VlZGVkJyxcbiAgICBuYXRpdmUgICAgICAgICAgOiB7XG4gICAgICAgIGlucHV0IDogJ2lucHV0JyxcbiAgICAgICAgY2hhbmdlOiAnY2hhbmdlJyxcbiAgICB9LFxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9BdXRvTnVtZXJpY0V2ZW50cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n'use strict';\n\nvar _AutoNumeric = __webpack_require__(1);\n\nvar _AutoNumeric2 = _interopRequireDefault(_AutoNumeric);\n\nvar _AutoNumericHelper = __webpack_require__(3);\n\nvar _AutoNumericHelper2 = _interopRequireDefault(_AutoNumericHelper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Predefined options for the most common languages\n */\n/**\n * Pre-defined options for autoNumeric.js\n * @author Alexandre Bonneau <alexandre.bonneau@linuxfr.eu>\n * @copyright © 2016 Alexandre Bonneau\n *\n * The MIT License (http://www.opensource.org/licenses/mit-license.php)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sub license, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n_AutoNumeric2.default.predefinedOptions = {\n    French: { // Français\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.dot, // or '\\u202f'\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.comma,\n        decimalCharacterAlternative: _AutoNumeric2.default.options.decimalCharacterAlternative.dot,\n        currencySymbol: '\\u202F\\u20AC',\n        currencySymbolPlacement: _AutoNumeric2.default.options.currencySymbolPlacement.suffix,\n        negativePositiveSignPlacement: _AutoNumeric2.default.options.negativePositiveSignPlacement.prefix\n    },\n    NorthAmerican: {\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.comma,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot,\n        currencySymbol: _AutoNumeric2.default.options.currencySymbol.dollar,\n        currencySymbolPlacement: _AutoNumeric2.default.options.currencySymbolPlacement.prefix,\n        negativePositiveSignPlacement: _AutoNumeric2.default.options.negativePositiveSignPlacement.right\n    },\n    British: {\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.comma,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot,\n        currencySymbol: _AutoNumeric2.default.options.currencySymbol.pound,\n        currencySymbolPlacement: _AutoNumeric2.default.options.currencySymbolPlacement.prefix,\n        negativePositiveSignPlacement: _AutoNumeric2.default.options.negativePositiveSignPlacement.right\n    },\n    Swiss: { // Suisse\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.apostrophe,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot,\n        currencySymbol: '\\u202FCHF',\n        currencySymbolPlacement: _AutoNumeric2.default.options.currencySymbolPlacement.suffix,\n        negativePositiveSignPlacement: _AutoNumeric2.default.options.negativePositiveSignPlacement.prefix\n    },\n    Japanese: { // 日本語\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.comma,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot,\n        currencySymbol: _AutoNumeric2.default.options.currencySymbol.yen,\n        currencySymbolPlacement: _AutoNumeric2.default.options.currencySymbolPlacement.prefix,\n        negativePositiveSignPlacement: _AutoNumeric2.default.options.negativePositiveSignPlacement.right\n    },\n    Brazilian: {\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.dot,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.comma,\n        currencySymbol: _AutoNumeric2.default.options.currencySymbol.real,\n        currencySymbolPlacement: _AutoNumeric2.default.options.currencySymbolPlacement.prefix,\n        negativePositiveSignPlacement: _AutoNumeric2.default.options.negativePositiveSignPlacement.right\n    },\n    dotDecimalCharCommaSeparator: {\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.comma,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot\n    },\n    commaDecimalCharDotSeparator: {\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.dot,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.comma,\n        decimalCharacterAlternative: _AutoNumeric2.default.options.decimalCharacterAlternative.dot\n    },\n    integer: { minimumValue: _AutoNumeric2.default.options.minimumValue.tenTrillionsNoDecimals, maximumValue: _AutoNumeric2.default.options.maximumValue.tenTrillionsNoDecimals },\n    integerPos: { minimumValue: _AutoNumeric2.default.options.minimumValue.zero, maximumValue: _AutoNumeric2.default.options.maximumValue.tenTrillionsNoDecimals },\n    integerNeg: { minimumValue: _AutoNumeric2.default.options.minimumValue.tenTrillionsNoDecimals, maximumValue: _AutoNumeric2.default.options.maximumValue.zero },\n    float: { allowDecimalPadding: _AutoNumeric2.default.options.allowDecimalPadding.never },\n    floatPos: { allowDecimalPadding: _AutoNumeric2.default.options.allowDecimalPadding.never, minimumValue: _AutoNumeric2.default.options.minimumValue.zero, maximumValue: _AutoNumeric2.default.options.maximumValue.tenTrillions },\n    floatNeg: { allowDecimalPadding: _AutoNumeric2.default.options.allowDecimalPadding.never, minimumValue: _AutoNumeric2.default.options.minimumValue.tenTrillions, maximumValue: _AutoNumeric2.default.options.maximumValue.zero },\n    numeric: {\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.noSeparator,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot,\n        currencySymbol: _AutoNumeric2.default.options.currencySymbol.none\n    },\n    numericPos: {\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.noSeparator,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot,\n        currencySymbol: _AutoNumeric2.default.options.currencySymbol.none,\n        minimumValue: _AutoNumeric2.default.options.minimumValue.zero,\n        maximumValue: _AutoNumeric2.default.options.maximumValue.tenTrillions\n    },\n    numericNeg: {\n        digitGroupSeparator: _AutoNumeric2.default.options.digitGroupSeparator.noSeparator,\n        decimalCharacter: _AutoNumeric2.default.options.decimalCharacter.dot,\n        currencySymbol: _AutoNumeric2.default.options.currencySymbol.none,\n        minimumValue: _AutoNumeric2.default.options.minimumValue.tenTrillions,\n        maximumValue: _AutoNumeric2.default.options.maximumValue.zero\n    }\n};\n\n_AutoNumeric2.default.predefinedOptions.Spanish = _AutoNumeric2.default.predefinedOptions.French; // Español (idem French)\n_AutoNumeric2.default.predefinedOptions.Chinese = _AutoNumeric2.default.predefinedOptions.Japanese; // 中国語 (Chinese)\n\n_AutoNumeric2.default.predefinedOptions.euro = _AutoNumeric2.default.predefinedOptions.French;\n_AutoNumeric2.default.predefinedOptions.euroPos = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.French);\n_AutoNumeric2.default.predefinedOptions.euroPos.minimumValue = '0.00'; // Here we need to clone the initial object in order to be able to edit it without affecting the initial object\n_AutoNumeric2.default.predefinedOptions.euroNeg = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.French);\n_AutoNumeric2.default.predefinedOptions.euroNeg.maximumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.euroNeg.negativePositiveSignPlacement = _AutoNumeric2.default.options.negativePositiveSignPlacement.prefix;\n\n_AutoNumeric2.default.predefinedOptions.euroSpace = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.French);\n_AutoNumeric2.default.predefinedOptions.euroSpace.digitGroupSeparator = _AutoNumeric2.default.options.digitGroupSeparator.normalSpace;\n_AutoNumeric2.default.predefinedOptions.euroSpacePos = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.euroSpace);\n_AutoNumeric2.default.predefinedOptions.euroSpacePos.minimumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.euroSpaceNeg = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.euroSpace);\n_AutoNumeric2.default.predefinedOptions.euroSpaceNeg.maximumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.euroSpaceNeg.negativePositiveSignPlacement = _AutoNumeric2.default.options.negativePositiveSignPlacement.prefix;\n\n_AutoNumeric2.default.predefinedOptions.percentageEU2dec = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.French);\n_AutoNumeric2.default.predefinedOptions.percentageEU2dec.currencySymbol = _AutoNumeric2.default.options.currencySymbol.none;\n_AutoNumeric2.default.predefinedOptions.percentageEU2dec.suffixText = '\\u202F' + _AutoNumeric2.default.options.suffixText.percentage;\n_AutoNumeric2.default.predefinedOptions.percentageEU2decPos = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageEU2dec);\n_AutoNumeric2.default.predefinedOptions.percentageEU2decPos.minimumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.percentageEU2decNeg = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageEU2dec);\n_AutoNumeric2.default.predefinedOptions.percentageEU2decNeg.maximumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.percentageEU2decNeg.negativePositiveSignPlacement = _AutoNumeric2.default.options.negativePositiveSignPlacement.prefix;\n\n_AutoNumeric2.default.predefinedOptions.percentageEU3dec = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageEU2dec);\n_AutoNumeric2.default.predefinedOptions.percentageEU3dec.maximumValue = _AutoNumeric2.default.options.maximumValue.tenTrillions + '9';\n_AutoNumeric2.default.predefinedOptions.percentageEU3dec.decimalPlacesOverride = 3;\n_AutoNumeric2.default.predefinedOptions.percentageEU3decPos = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageEU2decPos);\n_AutoNumeric2.default.predefinedOptions.percentageEU3decPos.maximumValue = _AutoNumeric2.default.options.maximumValue.tenTrillions + '9';\n_AutoNumeric2.default.predefinedOptions.percentageEU3decPos.decimalPlacesOverride = 3;\n_AutoNumeric2.default.predefinedOptions.percentageEU3decNeg = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageEU2decNeg);\n_AutoNumeric2.default.predefinedOptions.percentageEU3decNeg.maximumValue = _AutoNumeric2.default.options.maximumValue.tenTrillions + '9';\n_AutoNumeric2.default.predefinedOptions.percentageEU3decNeg.decimalPlacesOverride = 3;\n\n_AutoNumeric2.default.predefinedOptions.dollar = _AutoNumeric2.default.predefinedOptions.NorthAmerican;\n_AutoNumeric2.default.predefinedOptions.dollarPos = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.NorthAmerican);\n_AutoNumeric2.default.predefinedOptions.dollarPos.minimumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.dollarNeg = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.NorthAmerican);\n_AutoNumeric2.default.predefinedOptions.dollarNeg.maximumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.dollarNeg.negativePositiveSignPlacement = _AutoNumeric2.default.options.negativePositiveSignPlacement.prefix;\n_AutoNumeric2.default.predefinedOptions.dollarNegBrackets = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.dollarNeg);\n_AutoNumeric2.default.predefinedOptions.dollarNegBrackets.negativeBracketsTypeOnBlur = _AutoNumeric2.default.options.negativeBracketsTypeOnBlur.parentheses;\n\n_AutoNumeric2.default.predefinedOptions.percentageUS2dec = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.NorthAmerican);\n_AutoNumeric2.default.predefinedOptions.percentageUS2dec.currencySymbol = _AutoNumeric2.default.options.currencySymbol.none;\n_AutoNumeric2.default.predefinedOptions.percentageUS2dec.suffixText = _AutoNumeric2.default.options.suffixText.percentage;\n_AutoNumeric2.default.predefinedOptions.percentageUS2decPos = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageUS2dec);\n_AutoNumeric2.default.predefinedOptions.percentageUS2decPos.minimumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.percentageUS2decNeg = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageUS2dec);\n_AutoNumeric2.default.predefinedOptions.percentageUS2decNeg.maximumValue = '0.00';\n_AutoNumeric2.default.predefinedOptions.percentageUS2decNeg.negativePositiveSignPlacement = _AutoNumeric2.default.options.negativePositiveSignPlacement.prefix;\n\n_AutoNumeric2.default.predefinedOptions.percentageUS3dec = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageUS2dec);\n_AutoNumeric2.default.predefinedOptions.percentageUS3dec.maximumValue = _AutoNumeric2.default.options.maximumValue.tenTrillions + '9';\n_AutoNumeric2.default.predefinedOptions.percentageUS3dec.decimalPlacesOverride = 3;\n_AutoNumeric2.default.predefinedOptions.percentageUS3decPos = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageUS2decPos);\n_AutoNumeric2.default.predefinedOptions.percentageUS3decPos.maximumValue = _AutoNumeric2.default.options.maximumValue.tenTrillions + '9';\n_AutoNumeric2.default.predefinedOptions.percentageUS3decPos.decimalPlacesOverride = 3;\n_AutoNumeric2.default.predefinedOptions.percentageUS3decNeg = _AutoNumericHelper2.default.cloneObject(_AutoNumeric2.default.predefinedOptions.percentageUS2decNeg);\n_AutoNumeric2.default.predefinedOptions.percentageUS3decNeg.maximumValue = _AutoNumeric2.default.options.maximumValue.tenTrillions + '9';\n_AutoNumeric2.default.predefinedOptions.percentageUS3decNeg.decimalPlacesOverride = 3;\n}.call(window));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n'use strict';\n\nvar _AutoNumeric = __webpack_require__(1);\n\nvar _AutoNumeric2 = _interopRequireDefault(_AutoNumeric);\n\nvar _AutoNumericEvents = __webpack_require__(6);\n\nvar _AutoNumericEvents2 = _interopRequireDefault(_AutoNumericEvents);\n\nvar _AutoNumericOptions = __webpack_require__(4);\n\nvar _AutoNumericOptions2 = _interopRequireDefault(_AutoNumericOptions);\n\nvar _AutoNumericDefaultSettings = __webpack_require__(5);\n\nvar _AutoNumericDefaultSettings2 = _interopRequireDefault(_AutoNumericDefaultSettings);\n\nvar _AutoNumericPredefinedOptions = __webpack_require__(7);\n\nvar _AutoNumericPredefinedOptions2 = _interopRequireDefault(_AutoNumericPredefinedOptions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint no-unused-vars: 0 */\n\n/**\n * This file serve as the main entry point to the library.\n * cf. workaround detailed here http://stackoverflow.com/a/33683495/2834898\n *\n * @type {AutoNumeric}\n */\nmodule.exports = _AutoNumeric2.default;\n//TODO Also export the AutoNumericEnum module\n/**\n * Babel + Webpack workaround for autoNumeric\n *\n * @author Alexandre Bonneau <alexandre.bonneau@linuxfr.eu>\n * @copyright © 2017 Alexandre Bonneau\n *\n * The MIT License (http://www.opensource.org/licenses/mit-license.php)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sub license, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* global module */\n}.call(window));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBZ0NBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBOztBQUVBOzs7Ozs7QUFNQUEsT0FBT0MsT0FBUDtBQUNBO0FBL0NBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4QkEsbUIiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmFiZWwgKyBXZWJwYWNrIHdvcmthcm91bmQgZm9yIGF1dG9OdW1lcmljXG4gKlxuICogQGF1dGhvciBBbGV4YW5kcmUgQm9ubmVhdSA8YWxleGFuZHJlLmJvbm5lYXVAbGludXhmci5ldT5cbiAqIEBjb3B5cmlnaHQgwqkgMjAxNyBBbGV4YW5kcmUgQm9ubmVhdVxuICpcbiAqIFRoZSBNSVQgTGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXRcbiAqIHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLFxuICogY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3ViIGxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGVcbiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nXG4gKiBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTXG4gKiBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICogTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFRcbiAqIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HXG4gKiBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SXG4gKiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyogZ2xvYmFsIG1vZHVsZSAqL1xuXG5pbXBvcnQgQXV0b051bWVyaWMgZnJvbSAnLi9BdXRvTnVtZXJpYyc7XG5pbXBvcnQgQXV0b051bWVyaWNFdmVudHMgZnJvbSAnLi9BdXRvTnVtZXJpY0V2ZW50cyc7XG5pbXBvcnQgQXV0b051bWVyaWNPcHRpb25zIGZyb20gJy4vQXV0b051bWVyaWNPcHRpb25zJztcbmltcG9ydCBBdXRvTnVtZXJpY0RlZmF1bHRTZXR0aW5ncyBmcm9tICcuL0F1dG9OdW1lcmljRGVmYXVsdFNldHRpbmdzJztcbmltcG9ydCBBdXRvTnVtZXJpY1ByZWRlZmluZWRPcHRpb25zIGZyb20gJy4vQXV0b051bWVyaWNQcmVkZWZpbmVkT3B0aW9ucyc7XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogMCAqL1xuXG4vKipcbiAqIFRoaXMgZmlsZSBzZXJ2ZSBhcyB0aGUgbWFpbiBlbnRyeSBwb2ludCB0byB0aGUgbGlicmFyeS5cbiAqIGNmLiB3b3JrYXJvdW5kIGRldGFpbGVkIGhlcmUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzM2ODM0OTUvMjgzNDg5OFxuICpcbiAqIEB0eXBlIHtBdXRvTnVtZXJpY31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBBdXRvTnVtZXJpYztcbi8vVE9ETyBBbHNvIGV4cG9ydCB0aGUgQXV0b051bWVyaWNFbnVtIG1vZHVsZVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ])
});
;